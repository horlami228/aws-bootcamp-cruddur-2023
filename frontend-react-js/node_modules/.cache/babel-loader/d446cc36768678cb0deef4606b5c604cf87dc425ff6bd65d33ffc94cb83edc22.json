{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function addExpectContinueMiddleware(options) {\n  var _this = this;\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request;\n        return __generator(this, function (_a) {\n          request = args.request;\n          if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n            request.headers = __assign(__assign({}, request.headers), {\n              Expect: \"100-continue\"\n            });\n          }\n          return [2 /*return*/, next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\nexport var addExpectContinueMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true\n};\nexport var getAddExpectContinuePlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,wBAAwB;AAepD,OAAM,SAAUC,2BAA2B,CAACC,OAA2B;EAAvE;EACE,OAAO,UAAgCC,IAA+B;IAAgC,iBACpGC,IAAgC;MAAA;;;UAExBC,OAAO,GAAKD,IAAI,QAAT;UACf,IAAIJ,WAAW,CAACM,UAAU,CAACD,OAAO,CAAC,IAAIA,OAAO,CAACE,IAAI,IAAIL,OAAO,CAACM,OAAO,KAAK,MAAM,EAAE;YACjFH,OAAO,CAACI,OAAO,yBACVJ,OAAO,CAACI,OAAO;cAClBC,MAAM,EAAE;YAAc,EACvB;;UAEH,sBAAOP,IAAI,uBACNC,IAAI;YACPC,OAAO;UAAA,GACP;;;KACH;EAdqG,CAcrG;AACH;AAEA,OAAO,IAAMM,kCAAkC,GAAwB;EACrEC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,CAAC,mBAAmB,EAAE,eAAe,CAAC;EAC5CC,IAAI,EAAE,6BAA6B;EACnCC,QAAQ,EAAE;CACX;AAED,OAAO,IAAMC,0BAA0B,GAAG,UAACd,OAA2B;EAA0B,OAAC;IAC/Fe,YAAY,EAAE,UAACC,WAAW;MACxBA,WAAW,CAACC,GAAG,CAAClB,2BAA2B,CAACC,OAAO,CAAC,EAAES,kCAAkC,CAAC;IAC3F;GACD;AAJ+F,CAI9F","names":["HttpRequest","addExpectContinueMiddleware","options","next","args","request","isInstance","body","runtime","headers","Expect","addExpectContinueMiddlewareOptions","step","tags","name","override","getAddExpectContinuePlugin","applyToStack","clientStack","add"],"sources":["/frontend-react-js/node_modules/@aws-sdk/middleware-expect-continue/src/index.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\ninterface PreviouslyResolved {\n  runtime: string;\n}\n\nexport function addExpectContinueMiddleware(options: PreviouslyResolved): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const { request } = args;\n    if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n      request.headers = {\n        ...request.headers,\n        Expect: \"100-continue\",\n      };\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const addExpectContinueMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true,\n};\n\nexport const getAddExpectContinuePlugin = (options: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}