{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { isUsernamePasswordOpts, isCognitoHostedOpts, isFederatedSignInOptions, isFederatedSignInOptionsCustom, hasCustomState } from './types';\nimport { Amplify, ConsoleLogger as Logger, Credentials, Hub, StorageHelper, browserOrNode, parseAWSExports, UniversalStorage, urlSafeDecode } from '@aws-amplify/core';\nimport { CookieStorage, CognitoUserPool, AuthenticationDetails, CognitoUser, CognitoUserSession, CognitoUserAttribute, CognitoIdToken, CognitoRefreshToken, CognitoAccessToken } from 'amazon-cognito-identity-js';\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport { AuthErrorTypes, CognitoHostedUIIdentityProvider } from './types/Auth';\nvar logger = new Logger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nvar OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAuthEvent = function (event, data, message) {\n  Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\n// Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nvar MAX_DEVICES = 60;\nvar MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\n/**\n * Provide authentication steps\n */\nvar AuthClass = /** @class */function () {\n  /**\n   * Initialize Auth with AWS configurations\n   * @param {Object} config - Configuration of the Auth\n   */\n  function AuthClass(config) {\n    var _this = this;\n    this.userPool = null;\n    this.user = null;\n    this.oAuthFlowInProgress = false;\n    this.autoSignInInitiated = false;\n    this.Credentials = Credentials;\n    this.wrapRefreshSessionCallback = function (callback) {\n      var wrapped = function (error, data) {\n        if (data) {\n          dispatchAuthEvent('tokenRefresh', undefined, \"New token retrieved\");\n        } else {\n          dispatchAuthEvent('tokenRefresh_failure', error, \"Failed to retrieve new token\");\n        }\n        return callback(error, data);\n      };\n      return wrapped;\n    }; // prettier-ignore\n    this.configure(config);\n    this.currentCredentials = this.currentCredentials.bind(this);\n    this.currentUserCredentials = this.currentUserCredentials.bind(this);\n    Hub.listen('auth', function (_a) {\n      var payload = _a.payload;\n      var event = payload.event;\n      switch (event) {\n        case 'signIn':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n          break;\n        case 'signOut':\n          _this._storage.removeItem('amplify-signin-with-hostedUI');\n          break;\n        case 'cognitoHostedUI':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n          break;\n      }\n    });\n  }\n  AuthClass.prototype.getModuleName = function () {\n    return 'Auth';\n  };\n  AuthClass.prototype.configure = function (config) {\n    var _this = this;\n    if (!config) return this._config || {};\n    logger.debug('configure Auth');\n    var conf = Object.assign({}, this._config, parseAWSExports(config).Auth, config);\n    this._config = conf;\n    var _a = this._config,\n      userPoolId = _a.userPoolId,\n      userPoolWebClientId = _a.userPoolWebClientId,\n      cookieStorage = _a.cookieStorage,\n      oauth = _a.oauth,\n      region = _a.region,\n      identityPoolId = _a.identityPoolId,\n      mandatorySignIn = _a.mandatorySignIn,\n      refreshHandlers = _a.refreshHandlers,\n      identityPoolRegion = _a.identityPoolRegion,\n      clientMetadata = _a.clientMetadata,\n      endpoint = _a.endpoint;\n    if (!this._config.storage) {\n      // backward compatability\n      if (cookieStorage) this._storage = new CookieStorage(cookieStorage);else {\n        this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();\n      }\n    } else {\n      if (!this._isValidAuthStorage(this._config.storage)) {\n        logger.error('The storage in the Auth config is not valid!');\n        throw new Error('Empty storage object');\n      }\n      this._storage = this._config.storage;\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    if (userPoolId) {\n      var userPoolData = {\n        UserPoolId: userPoolId,\n        ClientId: userPoolWebClientId,\n        endpoint: endpoint\n      };\n      userPoolData.Storage = this._storage;\n      this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);\n    }\n    this.Credentials.configure({\n      mandatorySignIn: mandatorySignIn,\n      region: identityPoolRegion || region,\n      userPoolId: userPoolId,\n      identityPoolId: identityPoolId,\n      refreshHandlers: refreshHandlers,\n      storage: this._storage\n    });\n    // initialize cognitoauth client if hosted ui options provided\n    // to keep backward compatibility:\n    var cognitoHostedUIConfig = oauth ? isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : undefined;\n    if (cognitoHostedUIConfig) {\n      var cognitoAuthParams = Object.assign({\n        cognitoClientId: userPoolWebClientId,\n        UserPoolId: userPoolId,\n        domain: cognitoHostedUIConfig['domain'],\n        scopes: cognitoHostedUIConfig['scope'],\n        redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n        redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n        responseType: cognitoHostedUIConfig['responseType'],\n        Storage: this._storage,\n        urlOpener: cognitoHostedUIConfig['urlOpener'],\n        clientMetadata: clientMetadata\n      }, cognitoHostedUIConfig['options']);\n      this._oAuthHandler = new OAuth({\n        scopes: cognitoAuthParams.scopes,\n        config: cognitoAuthParams,\n        cognitoClientId: cognitoAuthParams.cognitoClientId\n      });\n      // **NOTE** - Remove this in a future major release as it is a breaking change\n      // Prevents _handleAuthResponse from being called multiple times in Expo\n      // See https://github.com/aws-amplify/amplify-js/issues/4388\n      var usedResponseUrls_1 = {};\n      urlListener(function (_a) {\n        var url = _a.url;\n        if (usedResponseUrls_1[url]) {\n          return;\n        }\n        usedResponseUrls_1[url] = true;\n        _this._handleAuthResponse(url);\n      });\n    }\n    dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n    if (!this.autoSignInInitiated && typeof this._storage['getItem'] === 'function') {\n      var pollingInitiated = this.isTrueStorageValue('amplify-polling-started');\n      if (pollingInitiated) {\n        dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n        this._storage.removeItem('amplify-auto-sign-in');\n      }\n      this._storage.removeItem('amplify-polling-started');\n    }\n    return this._config;\n  };\n  /**\n   * Sign up with username, password and other attributes like phone, email\n   * @param {String | object} params - The user attributes used for signin\n   * @param {String[]} restOfAttrs - for the backward compatability\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.signUp = function (params) {\n    var _this = this;\n    var restOfAttrs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      restOfAttrs[_i - 1] = arguments[_i];\n    }\n    var _a, _b, _c;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var attributes = [];\n    var validationData = null;\n    var clientMetadata;\n    var autoSignIn = {\n      enabled: false\n    };\n    var autoSignInValidationData = {};\n    var autoSignInClientMetaData = {};\n    if (params && typeof params === 'string') {\n      username = params;\n      password = restOfAttrs ? restOfAttrs[0] : null;\n      var email = restOfAttrs ? restOfAttrs[1] : null;\n      var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n      if (email) attributes.push(new CognitoUserAttribute({\n        Name: 'email',\n        Value: email\n      }));\n      if (phone_number) attributes.push(new CognitoUserAttribute({\n        Name: 'phone_number',\n        Value: phone_number\n      }));\n    } else if (params && typeof params === 'object') {\n      username = params['username'];\n      password = params['password'];\n      if (params && params.clientMetadata) {\n        clientMetadata = params.clientMetadata;\n      } else if (this._config.clientMetadata) {\n        clientMetadata = this._config.clientMetadata;\n      }\n      var attrs_1 = params['attributes'];\n      if (attrs_1) {\n        Object.keys(attrs_1).map(function (key) {\n          attributes.push(new CognitoUserAttribute({\n            Name: key,\n            Value: attrs_1[key]\n          }));\n        });\n      }\n      var validationDataObject_1 = params['validationData'];\n      if (validationDataObject_1) {\n        validationData = [];\n        Object.keys(validationDataObject_1).map(function (key) {\n          validationData.push(new CognitoUserAttribute({\n            Name: key,\n            Value: validationDataObject_1[key]\n          }));\n        });\n      }\n      autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : {\n        enabled: false\n      };\n      if (autoSignIn.enabled) {\n        this._storage.setItem('amplify-auto-sign-in', 'true');\n        autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};\n        autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};\n      }\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.SignUpError);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    logger.debug('signUp attrs:', attributes);\n    logger.debug('signUp validation data:', validationData);\n    return new Promise(function (resolve, reject) {\n      _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n        if (err) {\n          dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n          reject(err);\n        } else {\n          dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n          if (autoSignIn.enabled) {\n            _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);\n          }\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  AuthClass.prototype.handleAutoSignIn = function (username, password, validationData, clientMetadata, data) {\n    this.autoSignInInitiated = true;\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n    if (data.userConfirmed) {\n      this.signInAfterUserConfirmed(authDetails);\n    } else if (this._config.signUpVerificationMethod === 'link') {\n      this.handleLinkAutoSignIn(authDetails);\n    } else {\n      this.handleCodeAutoSignIn(authDetails);\n    }\n  };\n  AuthClass.prototype.handleCodeAutoSignIn = function (authDetails) {\n    var _this = this;\n    var listenEvent = function (_a) {\n      var payload = _a.payload;\n      if (payload.event === 'confirmSignUp') {\n        _this.signInAfterUserConfirmed(authDetails, listenEvent);\n      }\n    };\n    Hub.listen('auth', listenEvent);\n  };\n  AuthClass.prototype.handleLinkAutoSignIn = function (authDetails) {\n    var _this = this;\n    this._storage.setItem('amplify-polling-started', 'true');\n    var start = Date.now();\n    var autoSignInPollingIntervalId = setInterval(function () {\n      if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {\n        clearInterval(autoSignInPollingIntervalId);\n        dispatchAuthEvent('autoSignIn_failure', null, 'Please confirm your account and use your credentials to sign in.');\n        _this._storage.removeItem('amplify-auto-sign-in');\n      } else {\n        _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);\n      }\n    }, 5000);\n  };\n  AuthClass.prototype.signInAfterUserConfirmed = function (authDetails, listenEvent, autoSignInPollingIntervalId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user, error_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            user = this.createCognitoUser(authDetails.getUsername());\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, user.authenticateUser(authDetails, this.authCallbacks(user, function (value) {\n              dispatchAuthEvent('autoSignIn', value, authDetails.getUsername() + \" has signed in successfully\");\n              if (listenEvent) {\n                Hub.remove('auth', listenEvent);\n              }\n              if (autoSignInPollingIntervalId) {\n                clearInterval(autoSignInPollingIntervalId);\n                _this._storage.removeItem('amplify-polling-started');\n              }\n              _this._storage.removeItem('amplify-auto-sign-in');\n            }, function (error) {\n              logger.error(error);\n              _this._storage.removeItem('amplify-auto-sign-in');\n            }))];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _a.sent();\n            logger.error(error_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Send the verification code to confirm sign up\n   * @param {String} username - The username to be confirmed\n   * @param {String} code - The verification code\n   * @param {ConfirmSignUpOptions} options - other options for confirm signup\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.confirmSignUp = function (username, code, options) {\n    var _this = this;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var user = this.createCognitoUser(username);\n    var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean' ? options.forceAliasCreation : true;\n    var clientMetadata;\n    if (options && options.clientMetadata) {\n      clientMetadata = options.clientMetadata;\n    } else if (this._config.clientMetadata) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          dispatchAuthEvent('confirmSignUp', data, username + \" has been confirmed successfully\");\n          var autoSignIn = _this.isTrueStorageValue('amplify-auto-sign-in');\n          if (autoSignIn && !_this.autoSignInInitiated) {\n            dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n            _this._storage.removeItem('amplify-auto-sign-in');\n          }\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  AuthClass.prototype.isTrueStorageValue = function (value) {\n    var item = this._storage.getItem(value);\n    return item ? item === 'true' : false;\n  };\n  /**\n   * Resend the verification code\n   * @param {String} username - The username to be confirmed\n   * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n   * @return - A promise resolves code delivery details if successful\n   */\n  AuthClass.prototype.resendSignUp = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.resendConfirmationCode(function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Sign in\n   * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n   * @param {String} pw - The password of the username\n   * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows\n   * @return - A promise resolves the CognitoUser\n   */\n  AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var validationData = {};\n    // for backward compatibility\n    if (typeof usernameOrSignInOpts === 'string') {\n      username = usernameOrSignInOpts;\n      password = pw;\n    } else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n      if (typeof pw !== 'undefined') {\n        logger.warn('The password should be defined under the first parameter object!');\n      }\n      username = usernameOrSignInOpts.username;\n      password = usernameOrSignInOpts.password;\n      validationData = usernameOrSignInOpts.validationData;\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n    if (password) {\n      return this.signInWithPassword(authDetails);\n    } else {\n      return this.signInWithoutPassword(authDetails);\n    }\n  };\n  /**\n   * Return an object with the authentication callbacks\n   * @param {CognitoUser} user - the cognito user object\n   * @param {} resolve - function called when resolving the current step\n   * @param {} reject - function called when rejecting the current step\n   * @return - an object with the callback methods for user authentication\n   */\n  AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n    var _this = this;\n    var that = this;\n    return {\n      onSuccess: function (session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cred, e_1, currentUser, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug(session);\n                delete user['challengeName'];\n                delete user['challengeParam'];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 4, 5, 9]);\n                return [4 /*yield*/, this.Credentials.clear()];\n              case 2:\n                _a.sent();\n                return [4 /*yield*/, this.Credentials.set(session, 'session')];\n              case 3:\n                cred = _a.sent();\n                logger.debug('succeed to get cognito credentials', cred);\n                return [3 /*break*/, 9];\n              case 4:\n                e_1 = _a.sent();\n                logger.debug('cannot get cognito credentials', e_1);\n                return [3 /*break*/, 9];\n              case 5:\n                _a.trys.push([5, 7,, 8]);\n                return [4 /*yield*/, this.currentUserPoolUser()];\n              case 6:\n                currentUser = _a.sent();\n                that.user = currentUser;\n                dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                resolve(currentUser);\n                return [3 /*break*/, 8];\n              case 7:\n                e_2 = _a.sent();\n                logger.error('Failed to get the signed in user', e_2);\n                reject(e_2);\n                return [3 /*break*/, 8];\n              case 8:\n                return [7 /*endfinally*/];\n              case 9:\n                return [2 /*return*/];\n            }\n          });\n        });\n      },\n\n      onFailure: function (err) {\n        logger.debug('signIn failure', err);\n        dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n        reject(err);\n      },\n      customChallenge: function (challengeParam) {\n        logger.debug('signIn custom challenge answer required');\n        user['challengeName'] = 'CUSTOM_CHALLENGE';\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn MFA required');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaSetup: function (challengeName, challengeParam) {\n        logger.debug('signIn mfa setup', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      newPasswordRequired: function (userAttributes, requiredAttributes) {\n        logger.debug('signIn new password');\n        user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n        user['challengeParam'] = {\n          userAttributes: userAttributes,\n          requiredAttributes: requiredAttributes\n        };\n        resolve(user);\n      },\n      totpRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn totpRequired');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      selectMFAType: function (challengeName, challengeParam) {\n        logger.debug('signIn selectMFAType', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      }\n    };\n  };\n  /**\n   * Sign in with a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithPassword = function (authDetails) {\n    var _this = this;\n    if (this.pendingSignIn) {\n      throw new Error('Pending sign-in attempt already in progress');\n    }\n    var user = this.createCognitoUser(authDetails.getUsername());\n    this.pendingSignIn = new Promise(function (resolve, reject) {\n      user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {\n        _this.pendingSignIn = null;\n        resolve(value);\n      }, function (error) {\n        _this.pendingSignIn = null;\n        reject(error);\n      }));\n    });\n    return this.pendingSignIn;\n  };\n  /**\n   * Sign in without a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n    var _this = this;\n    var user = this.createCognitoUser(authDetails.getUsername());\n    user.setAuthenticationFlowType('CUSTOM_AUTH');\n    return new Promise(function (resolve, reject) {\n      user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves the current preferred mfa option if success\n   */\n  AuthClass.prototype.getMFAOptions = function (user) {\n    return new Promise(function (res, rej) {\n      user.getMFAOptions(function (err, mfaOptions) {\n        if (err) {\n          logger.debug('get MFA Options failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('get MFA options success', mfaOptions);\n        res(mfaOptions);\n        return;\n      });\n    });\n  };\n  /**\n   * get preferred mfa method\n   * @param {CognitoUser} user - the current cognito user\n   * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n   */\n  AuthClass.prototype.getPreferredMFA = function (user, params) {\n    var _this = this;\n    var that = this;\n    return new Promise(function (res, rej) {\n      var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n      var bypassCache = params ? params.bypassCache : false;\n      user.getUserData(function (err, data) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_1, mfaType;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('getting preferred mfa failed', err);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_1 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_1.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                mfaType = that._getMfaTypeFromUserData(data);\n                if (!mfaType) {\n                  rej('invalid MFA Type');\n                  return [2 /*return*/];\n                } else {\n                  res(mfaType);\n                  return [2 /*return*/];\n                }\n\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, {\n        bypassCache: bypassCache,\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n    var ret = null;\n    var preferredMFA = data.PreferredMfaSetting;\n    // if the user has used Auth.setPreferredMFA() to setup the mfa type\n    // then the \"PreferredMfaSetting\" would exist in the response\n    if (preferredMFA) {\n      ret = preferredMFA;\n    } else {\n      // if mfaList exists but empty, then its noMFA\n      var mfaList = data.UserMFASettingList;\n      if (!mfaList) {\n        // if SMS was enabled by using Auth.enableSMS(),\n        // the response would contain MFAOptions\n        // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n        // if it does not exist, then it should be NOMFA\n        var MFAOptions = data.MFAOptions;\n        if (MFAOptions) {\n          ret = 'SMS_MFA';\n        } else {\n          ret = 'NOMFA';\n        }\n      } else if (mfaList.length === 0) {\n        ret = 'NOMFA';\n      } else {\n        logger.debug('invalid case for getPreferredMFA', data);\n      }\n    }\n    return ret;\n  };\n  AuthClass.prototype._getUserData = function (user, params) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      user.getUserData(function (err, data) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('getting user data failed', err);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_2 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_2.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                res(data);\n                _a.label = 6;\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, params);\n    });\n  };\n  /**\n   * set preferred MFA method\n   * @param {CognitoUser} user - the current Cognito user\n   * @param {string} mfaMethod - preferred mfa method\n   * @return - A promise resolve if success\n   */\n  AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            clientMetadata = this._config.clientMetadata;\n            return [4 /*yield*/, this._getUserData(user, {\n              bypassCache: true,\n              clientMetadata: clientMetadata\n            })];\n          case 1:\n            userData = _b.sent();\n            smsMfaSettings = null;\n            totpMfaSettings = null;\n            _a = mfaMethod;\n            switch (_a) {\n              case 'TOTP':\n                return [3 /*break*/, 2];\n              case 'SOFTWARE_TOKEN_MFA':\n                return [3 /*break*/, 2];\n              case 'SMS':\n                return [3 /*break*/, 3];\n              case 'SMS_MFA':\n                return [3 /*break*/, 3];\n              case 'NOMFA':\n                return [3 /*break*/, 4];\n            }\n            return [3 /*break*/, 6];\n          case 2:\n            totpMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 3:\n            smsMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 4:\n            mfaList = userData['UserMFASettingList'];\n            return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];\n          case 5:\n            currentMFAType = _b.sent();\n            if (currentMFAType === 'NOMFA') {\n              return [2 /*return*/, Promise.resolve('No change for mfa type')];\n            } else if (currentMFAType === 'SMS_MFA') {\n              smsMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n              totpMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else {\n              return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];\n            }\n            // if there is a UserMFASettingList in the response\n            // we need to disable every mfa type in that list\n            if (mfaList && mfaList.length !== 0) {\n              // to disable SMS or TOTP if exists in that list\n              mfaList.forEach(function (mfaType) {\n                if (mfaType === 'SMS_MFA') {\n                  smsMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                } else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                  totpMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                }\n              });\n            }\n            return [3 /*break*/, 7];\n          case 6:\n            logger.debug('no validmfa method provided');\n            return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoMFA)];\n          case 7:\n            that = this;\n            return [2 /*return*/, new Promise(function (res, rej) {\n              user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                if (err) {\n                  logger.debug('Set user mfa preference error', err);\n                  return rej(err);\n                }\n                logger.debug('Set user mfa success', result);\n                logger.debug('Caching the latest user data into local');\n                // cache the latest result into user data\n                user.getUserData(function (err, data) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_3;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('getting user data failed', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _a.label = 1;\n                        case 1:\n                          _a.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _a.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_3 = _a.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_3.message));\n                          return [2 /*return*/];\n                        case 4:\n                          return [2 /*return*/, rej(err)];\n                        case 5:\n                          return [2 /*return*/, res(result)];\n                      }\n                    });\n                  });\n                }, {\n                  bypassCache: true,\n                  clientMetadata: clientMetadata\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * disable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.disableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.disableMFA(function (err, data) {\n        if (err) {\n          logger.debug('disable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('disable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * enable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.enableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.enableMFA(function (err, data) {\n        if (err) {\n          logger.debug('enable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('enable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * Setup TOTP\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves with the secret code if success\n   */\n  AuthClass.prototype.setupTOTP = function (user) {\n    return new Promise(function (res, rej) {\n      user.associateSoftwareToken({\n        onFailure: function (err) {\n          logger.debug('associateSoftwareToken failed', err);\n          rej(err);\n          return;\n        },\n        associateSecretCode: function (secretCode) {\n          logger.debug('associateSoftwareToken sucess', secretCode);\n          res(secretCode);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * verify TOTP setup\n   * @param {CognitoUser} user - the current user\n   * @param {string} challengeAnswer - challenge answer\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n    logger.debug('verification totp token', user, challengeAnswer);\n    return new Promise(function (res, rej) {\n      user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n        onFailure: function (err) {\n          logger.debug('verifyTotpToken failed', err);\n          rej(err);\n          return;\n        },\n        onSuccess: function (data) {\n          dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n          logger.debug('verifyTotpToken success', data);\n          res(data);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Send MFA code to confirm sign in\n   * @param {Object} user - The CognitoUser object\n   * @param {String} code - The confirmation code\n   */\n  AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendMFACode(code, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_3;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_3 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_3);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function (err) {\n          logger.debug('confirm signIn failure', err);\n          reject(err);\n        }\n      }, mfaType, clientMetadata);\n    });\n  };\n  AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {\n    var _this = this;\n    if (requiredAttributes === void 0) {\n      requiredAttributes = {};\n    }\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.completeNewPasswordChallenge(password, requiredAttributes, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_4;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_4 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_4);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function (err) {\n          logger.debug('completeNewPassword failure', err);\n          dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n          reject(err);\n        },\n        mfaRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn MFA required');\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        mfaSetup: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        totpRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Send the answer to a custom challenge\n   * @param {CognitoUser} user - The CognitoUser object\n   * @param {String} challengeResponses - The confirmation code\n   */\n  AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!challengeResponses) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);\n    });\n  };\n  /**\n   * Delete an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n  AuthClass.prototype.deleteUserAttributes = function (user, attributeNames) {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        user.deleteAttributes(attributeNames, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Delete the current authenticated user\n   * @return {Promise}\n   **/\n  // TODO: Check return type void\n  AuthClass.prototype.deleteUser = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_5, isSignedInHostedUI;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._storageSync];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_5 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_5);\n            throw new Error(e_5);\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2 /*return*/, new Promise(function (res, rej) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var user_1;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  if (this.userPool) {\n                    user_1 = this.userPool.getCurrentUser();\n                    if (!user_1) {\n                      logger.debug('Failed to get user from user pool');\n                      return [2 /*return*/, rej(new Error('No current user.'))];\n                    } else {\n                      user_1.getSession(function (err, session) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var cleanUpError_4;\n                          var _this = this;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                if (!err) return [3 /*break*/, 5];\n                                logger.debug('Failed to get the user session', err);\n                                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                                _a.label = 1;\n                              case 1:\n                                _a.trys.push([1, 3,, 4]);\n                                return [4 /*yield*/, this.cleanUpInvalidSession(user_1)];\n                              case 2:\n                                _a.sent();\n                                return [3 /*break*/, 4];\n                              case 3:\n                                cleanUpError_4 = _a.sent();\n                                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_4.message));\n                                return [2 /*return*/];\n                              case 4:\n                                return [2 /*return*/, rej(err)];\n                              case 5:\n                                user_1.deleteUser(function (err, result) {\n                                  if (err) {\n                                    rej(err);\n                                  } else {\n                                    dispatchAuthEvent('userDeleted', result, 'The authenticated user has been deleted.');\n                                    user_1.signOut();\n                                    _this.user = null;\n                                    try {\n                                      _this.cleanCachedItems(); // clean aws credentials\n                                    } catch (e) {\n                                      // TODO: change to rejects in refactor\n                                      logger.debug('failed to clear cached items');\n                                    }\n                                    if (isSignedInHostedUI) {\n                                      _this.oAuthSignOutRedirect(res, rej);\n                                    } else {\n                                      dispatchAuthEvent('signOut', _this.user, \"A user has been signed out\");\n                                      res(result);\n                                    }\n                                  }\n                                });\n                                _a.label = 6;\n                              case 6:\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      });\n                    }\n                  } else {\n                    logger.debug('no Congito User pool');\n                    rej(new Error('Cognito User pool does not exist'));\n                  }\n                  return [2 /*return*/];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Update an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n  AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    var attributeList = [];\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        for (var key in attributes) {\n          if (key !== 'sub' && key.indexOf('_verified') < 0) {\n            var attr = {\n              Name: key,\n              Value: attributes[key]\n            };\n            attributeList.push(attr);\n          }\n        }\n        user.updateAttributes(attributeList, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Return user attributes\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to user attributes if success\n   */\n  AuthClass.prototype.userAttributes = function (user) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.getUserAttributes(function (err, attributes) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(attributes);\n          }\n        });\n      });\n    });\n  };\n  AuthClass.prototype.verifiedContact = function (user) {\n    var that = this;\n    return this.userAttributes(user).then(function (attributes) {\n      var attrs = that.attributesToObject(attributes);\n      var unverified = {};\n      var verified = {};\n      if (attrs['email']) {\n        if (attrs['email_verified']) {\n          verified['email'] = attrs['email'];\n        } else {\n          unverified['email'] = attrs['email'];\n        }\n      }\n      if (attrs['phone_number']) {\n        if (attrs['phone_number_verified']) {\n          verified['phone_number'] = attrs['phone_number'];\n        } else {\n          unverified['phone_number'] = attrs['phone_number'];\n        }\n      }\n      return {\n        verified: verified,\n        unverified: unverified\n      };\n    });\n  };\n  AuthClass.prototype.isErrorWithMessage = function (err) {\n    return typeof err === 'object' && Object.prototype.hasOwnProperty.call(err, 'message');\n  };\n  // Session revoked by another app\n  AuthClass.prototype.isTokenRevokedError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Access Token has been revoked';\n  };\n  AuthClass.prototype.isRefreshTokenRevokedError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Refresh Token has been revoked';\n  };\n  AuthClass.prototype.isUserDisabledError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'User is disabled.';\n  };\n  AuthClass.prototype.isUserDoesNotExistError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'User does not exist.';\n  };\n  AuthClass.prototype.isRefreshTokenExpiredError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Refresh Token has expired';\n  };\n  AuthClass.prototype.isSignedInHostedUI = function () {\n    return this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n  };\n  AuthClass.prototype.isSessionInvalid = function (err) {\n    return this.isUserDisabledError(err) || this.isUserDoesNotExistError(err) || this.isTokenRevokedError(err) || this.isRefreshTokenRevokedError(err) || this.isRefreshTokenExpiredError(err);\n  };\n  AuthClass.prototype.cleanUpInvalidSession = function (user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_6;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            user.signOut();\n            this.user = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cleanCachedItems()];\n          case 2:\n            _a.sent(); // clean aws credentials\n            return [3 /*break*/, 4];\n          case 3:\n            e_6 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3 /*break*/, 4];\n          case 4:\n            if (this.isSignedInHostedUI()) {\n              return [2 /*return*/, new Promise(function (res, rej) {\n                _this.oAuthSignOutRedirect(res, rej);\n              })];\n            } else {\n              dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get current authenticated user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentUserPoolUser = function (params) {\n    var _this = this;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    return new Promise(function (res, rej) {\n      _this._storageSync.then(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, clientMetadata;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!this.isOAuthInProgress()) return [3 /*break*/, 2];\n                logger.debug('OAuth signIn in progress, waiting for resolution...');\n                return [4 /*yield*/, new Promise(function (res) {\n                  var timeoutId = setTimeout(function () {\n                    logger.debug('OAuth signIn in progress timeout');\n                    Hub.remove('auth', hostedUISignCallback);\n                    res();\n                  }, OAUTH_FLOW_MS_TIMEOUT);\n                  Hub.listen('auth', hostedUISignCallback);\n                  function hostedUISignCallback(_a) {\n                    var payload = _a.payload;\n                    var event = payload.event;\n                    if (event === 'cognitoHostedUI' || event === 'cognitoHostedUI_failure') {\n                      logger.debug(\"OAuth signIn resolved: \" + event);\n                      clearTimeout(timeoutId);\n                      Hub.remove('auth', hostedUISignCallback);\n                      res();\n                    }\n                  }\n                })];\n              case 1:\n                _a.sent();\n                _a.label = 2;\n              case 2:\n                user = this.userPool.getCurrentUser();\n                if (!user) {\n                  logger.debug('Failed to get user from user pool');\n                  rej('No current user');\n                  return [2 /*return*/];\n                }\n\n                clientMetadata = this._config.clientMetadata;\n                // refresh the session if the session expired.\n                user.getSession(function (err, session) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_5, bypassCache, clientMetadata, _a, scope;\n                    var _this = this;\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('Failed to get the user session', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _b.label = 1;\n                        case 1:\n                          _b.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _b.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_5 = _b.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_5.message));\n                          return [2 /*return*/];\n                        case 4:\n                          rej(err);\n                          return [2 /*return*/];\n                        case 5:\n                          bypassCache = params ? params.bypassCache : false;\n                          if (!bypassCache) return [3 /*break*/, 7];\n                          return [4 /*yield*/, this.Credentials.clear()];\n                        case 6:\n                          _b.sent();\n                          _b.label = 7;\n                        case 7:\n                          clientMetadata = this._config.clientMetadata;\n                          _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;\n                          if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n                            user.getUserData(function (err, data) {\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var cleanUpError_6, preferredMFA, attributeList, i, attribute, userAttribute, attributes;\n                                return __generator(this, function (_a) {\n                                  switch (_a.label) {\n                                    case 0:\n                                      if (!err) return [3 /*break*/, 7];\n                                      logger.debug('getting user data failed', err);\n                                      if (!this.isSessionInvalid(err)) return [3 /*break*/, 5];\n                                      _a.label = 1;\n                                    case 1:\n                                      _a.trys.push([1, 3,, 4]);\n                                      return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                                    case 2:\n                                      _a.sent();\n                                      return [3 /*break*/, 4];\n                                    case 3:\n                                      cleanUpError_6 = _a.sent();\n                                      rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_6.message));\n                                      return [2 /*return*/];\n                                    case 4:\n                                      rej(err);\n                                      return [3 /*break*/, 6];\n                                    case 5:\n                                      res(user);\n                                      _a.label = 6;\n                                    case 6:\n                                      return [2 /*return*/];\n                                    case 7:\n                                      preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n                                      attributeList = [];\n                                      for (i = 0; i < data.UserAttributes.length; i++) {\n                                        attribute = {\n                                          Name: data.UserAttributes[i].Name,\n                                          Value: data.UserAttributes[i].Value\n                                        };\n                                        userAttribute = new CognitoUserAttribute(attribute);\n                                        attributeList.push(userAttribute);\n                                      }\n                                      attributes = this.attributesToObject(attributeList);\n                                      Object.assign(user, {\n                                        attributes: attributes,\n                                        preferredMFA: preferredMFA\n                                      });\n                                      return [2 /*return*/, res(user)];\n                                  }\n                                });\n                              });\n                            }, {\n                              bypassCache: bypassCache,\n                              clientMetadata: clientMetadata\n                            });\n                          } else {\n                            logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" + \"is not in the scopes of the access token\");\n                            return [2 /*return*/, res(user)];\n                          }\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to sync cache info into memory', e);\n        return rej(e);\n      });\n    });\n  };\n  AuthClass.prototype.isOAuthInProgress = function () {\n    return this.oAuthFlowInProgress;\n  };\n  /**\n   * Get current authenticated user\n   * @param {CurrentUserOpts} - options for getting the current user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentAuthenticatedUser = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedUser, e_7, federatedInfo, user, e_8;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting current authenticated user');\n            federatedUser = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_7 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_7);\n            throw e_7;\n          case 4:\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n              if (federatedInfo) {\n                federatedUser = __assign(__assign({}, federatedInfo.user), {\n                  token: federatedInfo.token\n                });\n              }\n            } catch (e) {\n              logger.debug('cannot load federated user from auth storage');\n            }\n            if (!federatedUser) return [3 /*break*/, 5];\n            this.user = federatedUser;\n            logger.debug('get current authenticated federated user', this.user);\n            return [2 /*return*/, this.user];\n          case 5:\n            logger.debug('get current authenticated userpool user');\n            user = null;\n            _a.label = 6;\n          case 6:\n            _a.trys.push([6, 8,, 9]);\n            return [4 /*yield*/, this.currentUserPoolUser(params)];\n          case 7:\n            user = _a.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            e_8 = _a.sent();\n            if (e_8 === 'No userPool') {\n              logger.error('Cannot get the current user because the user pool is missing. ' + 'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n            }\n            logger.debug('The user is not authenticated by the error', e_8);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 9:\n            this.user = user;\n            return [2 /*return*/, this.user];\n        }\n      });\n    });\n  };\n  /**\n   * Get current user's session\n   * @return - A promise resolves to session object if success\n   */\n  AuthClass.prototype.currentSession = function () {\n    var that = this;\n    logger.debug('Getting current session');\n    // Purposely not calling the reject method here because we don't need a console error\n    if (!this.userPool) {\n      return Promise.reject(new Error('No User Pool in the configuration.'));\n    }\n    return new Promise(function (res, rej) {\n      that.currentUserPoolUser().then(function (user) {\n        that.userSession(user).then(function (session) {\n          res(session);\n          return;\n        }).catch(function (e) {\n          logger.debug('Failed to get the current session', e);\n          rej(e);\n          return;\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to get the current user', e);\n        rej(e);\n        return;\n      });\n    });\n  };\n  /**\n   * Get the corresponding user session\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to the session\n   */\n  AuthClass.prototype.userSession = function (user) {\n    var _this = this;\n    if (!user) {\n      logger.debug('the user is null');\n      return this.rejectAuthError(AuthErrorTypes.NoUserSession);\n    }\n    var clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n    return new Promise(function (res, rej) {\n      logger.debug('Getting the session from this user:', user);\n      user.getSession(function (err, session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_7;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('Failed to get the session from user', user);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_7 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_7.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                logger.debug('Succeed to get the user session', session);\n                res(session);\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, {\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  /**\n   * Get authenticated credentials of current user.\n   * @return - A promise resolves to be current user's credentials\n   */\n  AuthClass.prototype.currentUserCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_9, federatedInfo;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('Getting current user credentials');\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_9 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_9);\n            throw e_9;\n          case 4:\n            federatedInfo = null;\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n            } catch (e) {\n              logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n            }\n            if (federatedInfo) {\n              // refresh the jwt token here if necessary\n              return [2 /*return*/, this.Credentials.refreshFederatedToken(federatedInfo)];\n            } else {\n              return [2 /*return*/, this.currentSession().then(function (session) {\n                logger.debug('getting session success', session);\n                return _this.Credentials.set(session, 'session');\n              }).catch(function () {\n                logger.debug('getting guest credentials');\n                return _this.Credentials.set(null, 'guest');\n              })];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.currentCredentials = function () {\n    logger.debug('getting current credentials');\n    return this.Credentials.get();\n  };\n  /**\n   * Initiate an attribute confirmation request\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attributes to be verified\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.getAttributeVerificationCode(attr, {\n        onSuccess: function (success) {\n          return resolve(success);\n        },\n        onFailure: function (err) {\n          return reject(err);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm an attribute using a confirmation code\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    return new Promise(function (resolve, reject) {\n      user.verifyAttribute(attr, code, {\n        onSuccess: function (data) {\n          resolve(data);\n          return;\n        },\n        onFailure: function (err) {\n          reject(err);\n          return;\n        }\n      });\n    });\n  };\n  AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttribute(user, attr);\n    });\n  };\n  /**\n   * Confirm current user's attribute using a confirmation code\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttributeSubmit(user, attr, code);\n    });\n  };\n  AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_10, isSignedInHostedUI;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._storageSync];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_10 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_10);\n            throw e_10;\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2 /*return*/, new Promise(function (res, rej) {\n              if (opts && opts.global) {\n                logger.debug('user global sign out', user);\n                // in order to use global signout\n                // we must validate the user as an authenticated user by using getSession\n                var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n                user.getSession(function (err, result) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_8;\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('failed to get the user session', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _a.label = 1;\n                        case 1:\n                          _a.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _a.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_8 = _a.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_8.message));\n                          return [2 /*return*/];\n                        case 4:\n                          return [2 /*return*/, rej(err)];\n                        case 5:\n                          user.globalSignOut({\n                            onSuccess: function (data) {\n                              logger.debug('global sign out success');\n                              if (isSignedInHostedUI) {\n                                _this.oAuthSignOutRedirect(res, rej);\n                              } else {\n                                return res();\n                              }\n                            },\n                            onFailure: function (err) {\n                              logger.debug('global sign out failed', err);\n                              return rej(err);\n                            }\n                          });\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n              } else {\n                logger.debug('user sign out', user);\n                user.signOut(function () {\n                  if (isSignedInHostedUI) {\n                    _this.oAuthSignOutRedirect(res, rej);\n                  } else {\n                    return res();\n                  }\n                });\n              }\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {\n    var isBrowser = browserOrNode().isBrowser;\n    if (isBrowser) {\n      this.oAuthSignOutRedirectOrReject(reject);\n    } else {\n      this.oAuthSignOutAndResolve(resolve);\n    }\n  };\n  AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {\n    this._oAuthHandler.signOut();\n    resolve();\n  };\n  AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {\n    this._oAuthHandler.signOut(); // this method redirects url\n    // App should be redirected to another url otherwise it will reject\n    setTimeout(function () {\n      return reject(Error('Signout timeout fail'));\n    }, 3000);\n  };\n  /**\n   * Sign out method\n   * @\n   * @return - A promise resolved if success\n   */\n  AuthClass.prototype.signOut = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_11, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.cleanCachedItems()];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_11 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3 /*break*/, 3];\n          case 3:\n            if (!this.userPool) return [3 /*break*/, 7];\n            user = this.userPool.getCurrentUser();\n            if (!user) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];\n          case 4:\n            _a.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            logger.debug('no current Cognito user');\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            logger.debug('no Cognito User pool');\n            _a.label = 8;\n          case 8:\n            /**\n             * Note for future refactor - no reliable way to get username with\n             * Cognito User Pools vs Identity when federating with Social Providers\n             * This is why we need a well structured session object that can be inspected\n             * and information passed back in the message below for Hub dispatch\n             */\n            dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            this.user = null;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.cleanCachedItems = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // clear cognito cached item\n            return [4 /*yield*/, this.Credentials.clear()];\n          case 1:\n            // clear cognito cached item\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Change a password for an authenticated user\n   * @param {Object} user - The CognitoUser object\n   * @param {String} oldPassword - the current password\n   * @param {String} newPassword - the requested new password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.changePassword(oldPassword, newPassword, function (err, data) {\n          if (err) {\n            logger.debug('change password failure', err);\n            return reject(err);\n          } else {\n            return resolve(data);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Initiate a forgot password request\n   * @param {String} username - the username to change password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.forgotPassword = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.forgotPassword({\n        onSuccess: function () {\n          resolve();\n          return;\n        },\n        onFailure: function (err) {\n          logger.debug('forgot password failure', err);\n          dispatchAuthEvent('forgotPassword_failure', err, username + \" forgotPassword failed\");\n          reject(err);\n          return;\n        },\n        inputVerificationCode: function (data) {\n          dispatchAuthEvent('forgotPassword', user, username + \" has initiated forgot password flow\");\n          resolve(data);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm a new password using a confirmation Code\n   * @param {String} username - The username\n   * @param {String} code - The confirmation code\n   * @param {String} password - The new password\n   * @return - A promise that resolves if success\n   */\n  AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.confirmPassword(code, password, {\n        onSuccess: function (success) {\n          dispatchAuthEvent('forgotPasswordSubmit', user, username + \" forgotPasswordSubmit successful\");\n          resolve(success);\n          return;\n        },\n        onFailure: function (err) {\n          dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + \" forgotPasswordSubmit failed\");\n          reject(err);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Get user information\n   * @async\n   * @return {Object }- current User's information\n   */\n  AuthClass.prototype.currentUserInfo = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var source, user, attributes, userAttrs, credentials, e_12, info, err_1, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            source = this.Credentials.getCredSource();\n            if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];\n            return [4 /*yield*/, this.currentUserPoolUser().catch(function (err) {\n              return logger.error(err);\n            })];\n          case 1:\n            user = _a.sent();\n            if (!user) {\n              return [2 /*return*/, null];\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n            return [4 /*yield*/, this.userAttributes(user)];\n          case 3:\n            attributes = _a.sent();\n            userAttrs = this.attributesToObject(attributes);\n            credentials = null;\n            _a.label = 4;\n          case 4:\n            _a.trys.push([4, 6,, 7]);\n            return [4 /*yield*/, this.currentCredentials()];\n          case 5:\n            credentials = _a.sent();\n            return [3 /*break*/, 7];\n          case 6:\n            e_12 = _a.sent();\n            logger.debug('Failed to retrieve credentials while getting current user info', e_12);\n            return [3 /*break*/, 7];\n          case 7:\n            info = {\n              id: credentials ? credentials.identityId : undefined,\n              username: user.getUsername(),\n              attributes: userAttrs\n            };\n            return [2 /*return*/, info];\n          case 8:\n            err_1 = _a.sent();\n            logger.error('currentUserInfo error', err_1);\n            return [2 /*return*/, {}];\n          case 9:\n            if (source === 'federated') {\n              user = this.user;\n              return [2 /*return*/, user ? user : {}];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config.identityPoolId && !this._config.userPoolId) {\n              throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n            }\n            // Ensure backwards compatability\n            if (typeof providerOrOptions === 'undefined') {\n              if (this._config.identityPoolId && !this._config.userPoolId) {\n                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n              }\n            }\n            if (!(isFederatedSignInOptions(providerOrOptions) || isFederatedSignInOptionsCustom(providerOrOptions) || hasCustomState(providerOrOptions) || typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];\n            options = providerOrOptions || {\n              provider: CognitoHostedUIIdentityProvider.Cognito\n            };\n            provider = isFederatedSignInOptions(options) ? options.provider : options.customProvider;\n            customState = isFederatedSignInOptions(options) ? options.customState : options.customState;\n            if (this._config.userPoolId) {\n              client_id = isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;\n              redirect_uri = isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;\n              this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n            }\n            return [3 /*break*/, 4];\n          case 1:\n            provider = providerOrOptions;\n            // To check if the user is already logged in\n            try {\n              loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);\n              if (loggedInUser) {\n                logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n              }\n            } catch (e) {}\n            token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n            return [4 /*yield*/, this.Credentials.set({\n              provider: provider,\n              token: token,\n              identity_id: identity_id,\n              user: user,\n              expires_at: expires_at\n            }, 'federation')];\n          case 2:\n            credentials = _a.sent();\n            return [4 /*yield*/, this.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _a.sent();\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n            logger.debug('federated sign in credentials', credentials);\n            return [2 /*return*/, credentials];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Used to complete the OAuth flow with or without the Cognito Hosted UI\n   * @param {String} URL - optional parameter for customers to pass in the response URL\n   */\n  AuthClass.prototype._handleAuthResponse = function (URL) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.oAuthFlowInProgress) {\n              logger.debug(\"Skipping URL \" + URL + \" current flow in progress\");\n              return [2 /*return*/];\n            }\n\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1,, 8, 9]);\n            this.oAuthFlowInProgress = true;\n            if (!this._config.userPoolId) {\n              throw new Error(\"OAuth responses require a User Pool defined in config\");\n            }\n            dispatchAuthEvent('parsingCallbackUrl', {\n              url: URL\n            }, \"The callback url is being parsed\");\n            currentUrl = URL || (browserOrNode().isBrowser ? window.location.href : '');\n            hasCodeOrError = !!(parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'code' || k === 'error';\n            });\n            hasTokenOrError = !!(parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'access_token' || k === 'error';\n            });\n            if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 7];\n            this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 6,, 7]);\n            return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];\n          case 3:\n            _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n            session = new CognitoUserSession({\n              IdToken: new CognitoIdToken({\n                IdToken: idToken\n              }),\n              RefreshToken: new CognitoRefreshToken({\n                RefreshToken: refreshToken\n              }),\n              AccessToken: new CognitoAccessToken({\n                AccessToken: accessToken\n              })\n            });\n            credentials = void 0;\n            if (!this._config.identityPoolId) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.Credentials.set(session, 'session')];\n          case 4:\n            credentials = _b.sent();\n            logger.debug('AWS credentials', credentials);\n            _b.label = 5;\n          case 5:\n            isCustomStateIncluded = /-/.test(state);\n            currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);\n            // This calls cacheTokens() in Cognito SDK\n            currentUser.setSignInUserSession(session);\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n            dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n            if (isCustomStateIncluded) {\n              customState = state.split('-').splice(1).join('-');\n              dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), \"State for user \" + currentUser.getUsername());\n            }\n            //#endregion\n            return [2 /*return*/, credentials];\n          case 6:\n            err_2 = _b.sent();\n            logger.debug('Error in cognito hosted auth response', err_2);\n            // Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n            // Otherwise, reloading the page will throw errors as the `code` has already been spent.\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n            dispatchAuthEvent('signIn_failure', err_2, \"The OAuth response flow failed\");\n            dispatchAuthEvent('cognitoHostedUI_failure', err_2, \"A failure occurred when returning to the Cognito Hosted UI\");\n            dispatchAuthEvent('customState_failure', err_2, \"A failure occurred when returning state\");\n            return [3 /*break*/, 7];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            this.oAuthFlowInProgress = false;\n            return [7 /*endfinally*/];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  AuthClass.prototype.essentialCredentials = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  AuthClass.prototype.attributesToObject = function (attributes) {\n    var _this = this;\n    var obj = {};\n    if (attributes) {\n      attributes.map(function (attribute) {\n        if (attribute.Name === 'email_verified' || attribute.Name === 'phone_number_verified') {\n          obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;\n        } else {\n          obj[attribute.Name] = attribute.Value;\n        }\n      });\n    }\n    return obj;\n  };\n  AuthClass.prototype.isTruthyString = function (value) {\n    return typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true';\n  };\n  AuthClass.prototype.createCognitoUser = function (username) {\n    var userData = {\n      Username: username,\n      Pool: this.userPool\n    };\n    userData.Storage = this._storage;\n    var authenticationFlowType = this._config.authenticationFlowType;\n    var user = new CognitoUser(userData);\n    if (authenticationFlowType) {\n      user.setAuthenticationFlowType(authenticationFlowType);\n    }\n    return user;\n  };\n  AuthClass.prototype._isValidAuthStorage = function (obj) {\n    // We need to check if the obj has the functions of Storage\n    return !!obj && typeof obj.getItem === 'function' && typeof obj.setItem === 'function' && typeof obj.removeItem === 'function' && typeof obj.clear === 'function';\n  };\n  AuthClass.prototype.noUserPoolErrorHandler = function (config) {\n    if (config) {\n      if (!config.userPoolId || !config.identityPoolId) {\n        return AuthErrorTypes.MissingAuthConfig;\n      }\n    }\n    return AuthErrorTypes.NoConfig;\n  };\n  AuthClass.prototype.rejectAuthError = function (type) {\n    return Promise.reject(new AuthError(type));\n  };\n  AuthClass.prototype.rejectNoUserPool = function () {\n    var type = this.noUserPoolErrorHandler(this._config);\n    return Promise.reject(new NoUserPoolError(type));\n  };\n  AuthClass.prototype.rememberDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_2 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_2);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              currUser.setDeviceStatusRemembered({\n                onSuccess: function (data) {\n                  res(data);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.forgetDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_3);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              currUser.forgetDevice({\n                onSuccess: function (data) {\n                  res(data);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.fetchDevices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_4 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_4);\n            throw new Error('The user is not authenticated');\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var cb = {\n                onSuccess: function (data) {\n                  var deviceList = data.Devices.map(function (device) {\n                    var deviceName = device.DeviceAttributes.find(function (_a) {\n                      var Name = _a.Name;\n                      return Name === 'device_name';\n                    }) || {};\n                    var deviceInfo = {\n                      id: device.DeviceKey,\n                      name: deviceName.Value\n                    };\n                    return deviceInfo;\n                  });\n                  res(deviceList);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              };\n              currUser.listDevices(MAX_DEVICES, null, cb);\n            })];\n        }\n      });\n    });\n  };\n  return AuthClass;\n}();\nexport { AuthClass };\nexport var Auth = new AuthClass(null);\nAmplify.register(Auth);","map":{"version":3,"mappings":"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","names":["isUsernamePasswordOpts","isCognitoHostedOpts","isFederatedSignInOptions","isFederatedSignInOptionsCustom","hasCustomState","Amplify","ConsoleLogger","Logger","Credentials","Hub","StorageHelper","browserOrNode","parseAWSExports","UniversalStorage","urlSafeDecode","CookieStorage","CognitoUserPool","AuthenticationDetails","CognitoUser","CognitoUserSession","CognitoUserAttribute","CognitoIdToken","CognitoRefreshToken","CognitoAccessToken","parse","OAuth","default","urlListener","AuthError","NoUserPoolError","AuthErrorTypes","CognitoHostedUIIdentityProvider","logger","USER_ADMIN_SCOPE","OAUTH_FLOW_MS_TIMEOUT","AMPLIFY_SYMBOL","Symbol","for","dispatchAuthEvent","event","data","message","dispatch","MAX_DEVICES","MAX_AUTOSIGNIN_POLLING_MS","config","callback","wrapped","error","undefined","configure","currentCredentials","bind","currentUserCredentials","listen","_a","payload","_this","_storage","setItem","removeItem","AuthClass","_config","debug","conf","Object","assign","Auth","userPoolId","userPoolWebClientId","cookieStorage","oauth","region","identityPoolId","mandatorySignIn","refreshHandlers","identityPoolRegion","clientMetadata","endpoint","storage","ssr","getStorage","_isValidAuthStorage","Error","_storageSync","Promise","resolve","userPoolData","UserPoolId","ClientId","Storage","userPool","wrapRefreshSessionCallback","cognitoHostedUIConfig","awsCognito","cognitoAuthParams","cognitoClientId","domain","scopes","redirectSignIn","redirectSignOut","responseType","urlOpener","_oAuthHandler","usedResponseUrls_1","url","_handleAuthResponse","autoSignInInitiated","pollingInitiated","isTrueStorageValue","AutoSignInError","params","_i","restOfAttrs","rejectNoUserPool","username","password","attributes","validationData","autoSignIn","enabled","autoSignInValidationData","autoSignInClientMetaData","email","phone_number","push","Name","Value","attrs_1","keys","map","key","validationDataObject_1","clientMetaData","rejectAuthError","SignUpError","EmptyUsername","EmptyPassword","reject","signUp","err","handleAutoSignIn","authDetails","Username","Password","ValidationData","ClientMetadata","userConfirmed","signInAfterUserConfirmed","signUpVerificationMethod","handleLinkAutoSignIn","handleCodeAutoSignIn","listenEvent","start","Date","now","autoSignInPollingIntervalId","setInterval","clearInterval","user","createCognitoUser","getUsername","authenticateUser","authCallbacks","value","remove","error_1","code","options","EmptyCode","forceAliasCreation","confirmRegistration","item","getItem","resendConfirmationCode","usernameOrSignInOpts","pw","warn","InvalidUsername","signInWithPassword","signInWithoutPassword","that","onSuccess","session","clear","set","cred","e_1","currentUserPoolUser","currentUser","e_2","onFailure","customChallenge","challengeParam","mfaRequired","challengeName","mfaSetup","newPasswordRequired","userAttributes","requiredAttributes","totpRequired","selectMFAType","pendingSignIn","setAuthenticationFlowType","initiateAuth","res","rej","getMFAOptions","mfaOptions","bypassCache","getUserData","isSessionInvalid","cleanUpInvalidSession","cleanUpError_1","mfaType","_getMfaTypeFromUserData","ret","preferredMFA","PreferredMfaSetting","mfaList","UserMFASettingList","MFAOptions","length","cleanUpError_2","mfaMethod","_getUserData","userData","_b","smsMfaSettings","totpMfaSettings","PreferredMfa","Enabled","currentMFAType","InvalidMFA","forEach","NoMFA","setUserMfaPreference","result","cleanUpError_3","disableMFA","enableMFA","associateSoftwareToken","associateSecretCode","secretCode","challengeAnswer","verifySoftwareToken","sendMFACode","e_3","completeNewPasswordChallenge","e_4","challengeResponses","EmptyChallengeResponse","sendCustomChallengeAnswer","attributeNames","userSession","then","deleteAttributes","e_5","isSignedInHostedUI","user_1","getCurrentUser","getSession","cleanUpError_4","deleteUser","signOut","cleanCachedItems","e","oAuthSignOutRedirect","attributeList","indexOf","attr","updateAttributes","getUserAttributes","attrs","attributesToObject","unverified","verified","prototype","hasOwnProperty","call","isErrorWithMessage","isUserDisabledError","isUserDoesNotExistError","isTokenRevokedError","isRefreshTokenRevokedError","isRefreshTokenExpiredError","isOAuthInProgress","timeoutId","setTimeout","hostedUISignCallback","clearTimeout","cleanUpError_5","getAccessToken","decodePayload","scope","split","includes","cleanUpError_6","i","UserAttributes","attribute","userAttribute","catch","oAuthFlowInProgress","federatedUser","e_7","federatedInfo","JSON","token","e_8","NoUserSession","cleanUpError_7","e_9","refreshFederatedToken","currentSession","get","getAttributeVerificationCode","success","verifyAttribute","verifyUserAttribute","verifyUserAttributeSubmit","opts","e_10","global","cleanUpError_8","globalSignOut","isBrowser","oAuthSignOutRedirectOrReject","oAuthSignOutAndResolve","cognitoIdentitySignOut","oldPassword","newPassword","changePassword","forgotPassword","inputVerificationCode","confirmPassword","source","getCredSource","userAttrs","credentials","e_12","info","id","identityId","err_1","providerOrOptions","response","provider","Cognito","customProvider","customState","client_id","clientID","redirect_uri","redirectUri","oauthSignIn","loggedInUser","stringify","identity_id","expires_at","currentAuthenticatedUser","URL","currentUrl","window","location","href","hasCodeOrError","query","find","k","hasTokenOrError","hash","substr","handleAuthResponse","accessToken","idToken","refreshToken","state","IdToken","RefreshToken","AccessToken","isCustomStateIncluded","test","getIdToken","setSignInUserSession","history","replaceState","splice","join","err_2","accessKeyId","sessionToken","secretAccessKey","authenticated","obj","isTruthyString","toLowerCase","Pool","authenticationFlowType","MissingAuthConfig","NoConfig","type","noUserPoolErrorHandler","currUser","error_2","getCachedDeviceKeyAndPassword","setDeviceStatusRemembered","DeviceConfig","NetworkError","error_3","forgetDevice","error_4","cb","deviceList","Devices","deviceName","device","DeviceAttributes","deviceInfo","DeviceKey","name","listDevices","register"],"sources":["/frontend-react-js/node_modules/@aws-amplify/auth/src/Auth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tAuthOptions,\n\tFederatedResponse,\n\tSignUpParams,\n\tFederatedUser,\n\tConfirmSignUpOptions,\n\tSignOutOpts,\n\tCurrentUserOpts,\n\tGetPreferredMFAOpts,\n\tSignInOpts,\n\tisUsernamePasswordOpts,\n\tisCognitoHostedOpts,\n\tisFederatedSignInOptions,\n\tisFederatedSignInOptionsCustom,\n\thasCustomState,\n\tFederatedSignInOptionsCustom,\n\tLegacyProvider,\n\tFederatedSignInOptions,\n\tAwsCognitoOAuthOpts,\n\tClientMetaData,\n} from './types';\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tCredentials,\n\tHub,\n\tStorageHelper,\n\tICredentials,\n\tbrowserOrNode,\n\tparseAWSExports,\n\tUniversalStorage,\n\turlSafeDecode,\n\tHubCallback,\n} from '@aws-amplify/core';\nimport {\n\tCookieStorage,\n\tCognitoUserPool,\n\tAuthenticationDetails,\n\tICognitoUserPoolData,\n\tICognitoUserData,\n\tISignUpResult,\n\tCognitoUser,\n\tMFAOption,\n\tCognitoUserSession,\n\tIAuthenticationCallback,\n\tICognitoUserAttributeData,\n\tCognitoUserAttribute,\n\tCognitoIdToken,\n\tCognitoRefreshToken,\n\tCognitoAccessToken,\n\tNodeCallback,\n} from 'amazon-cognito-identity-js';\n\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport {\n\tAuthErrorTypes,\n\tAutoSignInOptions,\n\tCognitoHostedUIIdentityProvider,\n\tIAuthDevice,\n} from './types/Auth';\n\nconst logger = new Logger('AuthClass');\nconst USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nconst OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchAuthEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('auth', { event, data, message }, 'Auth', AMPLIFY_SYMBOL);\n};\n\n// Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n\nconst MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\n\n/**\n * Provide authentication steps\n */\nexport class AuthClass {\n\tprivate _config: AuthOptions;\n\tprivate userPool: CognitoUserPool = null;\n\tprivate user: any = null;\n\tprivate _oAuthHandler: OAuth;\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate oAuthFlowInProgress: boolean = false;\n\tprivate pendingSignIn: ReturnType<AuthClass['signInWithPassword']> | null;\n\tprivate autoSignInInitiated: boolean = false;\n\n\tCredentials = Credentials;\n\n\t/**\n\t * Initialize Auth with AWS configurations\n\t * @param {Object} config - Configuration of the Auth\n\t */\n\tconstructor(config: AuthOptions) {\n\t\tthis.configure(config);\n\t\tthis.currentCredentials = this.currentCredentials.bind(this);\n\t\tthis.currentUserCredentials = this.currentUserCredentials.bind(this);\n\n\t\tHub.listen('auth', ({ payload }) => {\n\t\t\tconst { event } = payload;\n\t\t\tswitch (event) {\n\t\t\t\tcase 'signIn':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'false');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'signOut':\n\t\t\t\t\tthis._storage.removeItem('amplify-signin-with-hostedUI');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cognitoHostedUI':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'true');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Auth';\n\t}\n\n\tconfigure(config?) {\n\t\tif (!config) return this._config || {};\n\t\tlogger.debug('configure Auth');\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tparseAWSExports(config).Auth,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\t\tconst {\n\t\t\tuserPoolId,\n\t\t\tuserPoolWebClientId,\n\t\t\tcookieStorage,\n\t\t\toauth,\n\t\t\tregion,\n\t\t\tidentityPoolId,\n\t\t\tmandatorySignIn,\n\t\t\trefreshHandlers,\n\t\t\tidentityPoolRegion,\n\t\t\tclientMetadata,\n\t\t\tendpoint,\n\t\t} = this._config;\n\n\t\tif (!this._config.storage) {\n\t\t\t// backward compatability\n\t\t\tif (cookieStorage) this._storage = new CookieStorage(cookieStorage);\n\t\t\telse {\n\t\t\t\tthis._storage = config.ssr\n\t\t\t\t\t? new UniversalStorage()\n\t\t\t\t\t: new StorageHelper().getStorage();\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._isValidAuthStorage(this._config.storage)) {\n\t\t\t\tlogger.error('The storage in the Auth config is not valid!');\n\t\t\t\tthrow new Error('Empty storage object');\n\t\t\t}\n\t\t\tthis._storage = this._config.storage;\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\tif (userPoolId) {\n\t\t\tconst userPoolData: ICognitoUserPoolData = {\n\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\tClientId: userPoolWebClientId,\n\t\t\t\tendpoint,\n\t\t\t};\n\t\t\tuserPoolData.Storage = this._storage;\n\n\t\t\tthis.userPool = new CognitoUserPool(\n\t\t\t\tuserPoolData,\n\t\t\t\tthis.wrapRefreshSessionCallback\n\t\t\t);\n\t\t}\n\n\t\tthis.Credentials.configure({\n\t\t\tmandatorySignIn,\n\t\t\tregion: identityPoolRegion || region,\n\t\t\tuserPoolId,\n\t\t\tidentityPoolId,\n\t\t\trefreshHandlers,\n\t\t\tstorage: this._storage,\n\t\t});\n\n\t\t// initialize cognitoauth client if hosted ui options provided\n\t\t// to keep backward compatibility:\n\t\tconst cognitoHostedUIConfig = oauth\n\t\t\t? isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t? oauth\n\t\t\t\t: (<any>oauth).awsCognito\n\t\t\t: undefined;\n\n\t\tif (cognitoHostedUIConfig) {\n\t\t\tconst cognitoAuthParams = Object.assign(\n\t\t\t\t{\n\t\t\t\t\tcognitoClientId: userPoolWebClientId,\n\t\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\t\tdomain: cognitoHostedUIConfig['domain'],\n\t\t\t\t\tscopes: cognitoHostedUIConfig['scope'],\n\t\t\t\t\tredirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n\t\t\t\t\tredirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n\t\t\t\t\tresponseType: cognitoHostedUIConfig['responseType'],\n\t\t\t\t\tStorage: this._storage,\n\t\t\t\t\turlOpener: cognitoHostedUIConfig['urlOpener'],\n\t\t\t\t\tclientMetadata,\n\t\t\t\t},\n\t\t\t\tcognitoHostedUIConfig['options']\n\t\t\t);\n\n\t\t\tthis._oAuthHandler = new OAuth({\n\t\t\t\tscopes: cognitoAuthParams.scopes,\n\t\t\t\tconfig: cognitoAuthParams,\n\t\t\t\tcognitoClientId: cognitoAuthParams.cognitoClientId,\n\t\t\t});\n\n\t\t\t// **NOTE** - Remove this in a future major release as it is a breaking change\n\t\t\t// Prevents _handleAuthResponse from being called multiple times in Expo\n\t\t\t// See https://github.com/aws-amplify/amplify-js/issues/4388\n\t\t\tconst usedResponseUrls = {};\n\t\t\turlListener(({ url }) => {\n\t\t\t\tif (usedResponseUrls[url]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tusedResponseUrls[url] = true;\n\t\t\t\tthis._handleAuthResponse(url);\n\t\t\t});\n\t\t}\n\n\t\tdispatchAuthEvent(\n\t\t\t'configured',\n\t\t\tnull,\n\t\t\t`The Auth category has been configured successfully`\n\t\t);\n\n\t\tif (\n\t\t\t!this.autoSignInInitiated &&\n\t\t\ttypeof this._storage['getItem'] === 'function'\n\t\t) {\n\t\t\tconst pollingInitiated = this.isTrueStorageValue(\n\t\t\t\t'amplify-polling-started'\n\t\t\t);\n\t\t\tif (pollingInitiated) {\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'autoSignIn_failure',\n\t\t\t\t\tnull,\n\t\t\t\t\tAuthErrorTypes.AutoSignInError\n\t\t\t\t);\n\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t}\n\t\t\tthis._storage.removeItem('amplify-polling-started');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\twrapRefreshSessionCallback = (callback: NodeCallback.Any) => {\n\t\tconst wrapped: NodeCallback.Any = (error, data) => {\n\t\t\tif (data) {\n\t\t\t\tdispatchAuthEvent('tokenRefresh', undefined, `New token retrieved`);\n\t\t\t} else {\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'tokenRefresh_failure',\n\t\t\t\t\terror,\n\t\t\t\t\t`Failed to retrieve new token`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn callback(error, data);\n\t\t};\n\t\treturn wrapped;\n\t} // prettier-ignore\n\n\t/**\n\t * Sign up with username, password and other attributes like phone, email\n\t * @param {String | object} params - The user attributes used for signin\n\t * @param {String[]} restOfAttrs - for the backward compatability\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic signUp(\n\t\tparams: string | SignUpParams,\n\t\t...restOfAttrs: string[]\n\t): Promise<ISignUpResult> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username: string = null;\n\t\tlet password: string = null;\n\t\tconst attributes: CognitoUserAttribute[] = [];\n\t\tlet validationData: CognitoUserAttribute[] = null;\n\t\tlet clientMetadata;\n\t\tlet autoSignIn: AutoSignInOptions = { enabled: false };\n\t\tlet autoSignInValidationData = {};\n\t\tlet autoSignInClientMetaData: ClientMetaData = {};\n\n\t\tif (params && typeof params === 'string') {\n\t\t\tusername = params;\n\t\t\tpassword = restOfAttrs ? restOfAttrs[0] : null;\n\t\t\tconst email: string = restOfAttrs ? restOfAttrs[1] : null;\n\t\t\tconst phone_number: string = restOfAttrs ? restOfAttrs[2] : null;\n\n\t\t\tif (email)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({ Name: 'email', Value: email })\n\t\t\t\t);\n\n\t\t\tif (phone_number)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\t\tValue: phone_number,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t} else if (params && typeof params === 'object') {\n\t\t\tusername = params['username'];\n\t\t\tpassword = params['password'];\n\n\t\t\tif (params && params.clientMetadata) {\n\t\t\t\tclientMetadata = params.clientMetadata;\n\t\t\t} else if (this._config.clientMetadata) {\n\t\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t\t}\n\n\t\t\tconst attrs = params['attributes'];\n\t\t\tif (attrs) {\n\t\t\t\tObject.keys(attrs).map(key => {\n\t\t\t\t\tattributes.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({ Name: key, Value: attrs[key] })\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst validationDataObject = params['validationData'];\n\t\t\tif (validationDataObject) {\n\t\t\t\tvalidationData = [];\n\t\t\t\tObject.keys(validationDataObject).map(key => {\n\t\t\t\t\tvalidationData.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: validationDataObject[key],\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tautoSignIn = params.autoSignIn ?? { enabled: false };\n\t\t\tif (autoSignIn.enabled) {\n\t\t\t\tthis._storage.setItem('amplify-auto-sign-in', 'true');\n\t\t\t\tautoSignInValidationData = autoSignIn.validationData ?? {};\n\t\t\t\tautoSignInClientMetaData = autoSignIn.clientMetaData ?? {};\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.SignUpError);\n\t\t}\n\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tlogger.debug('signUp attrs:', attributes);\n\t\tlogger.debug('signUp validation data:', validationData);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userPool.signUp(\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t\tattributes,\n\t\t\t\tvalidationData,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} failed to signup`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp',\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`${username} has signed up successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (autoSignIn.enabled) {\n\t\t\t\t\t\t\tthis.handleAutoSignIn(\n\t\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t\t\tpassword,\n\t\t\t\t\t\t\t\tautoSignInValidationData,\n\t\t\t\t\t\t\t\tautoSignInClientMetaData,\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate handleAutoSignIn(\n\t\tusername: string,\n\t\tpassword: string,\n\t\tvalidationData: {},\n\t\tclientMetadata: any,\n\t\tdata: any\n\t) {\n\t\tthis.autoSignInInitiated = true;\n\t\tconst authDetails = new AuthenticationDetails({\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t\tValidationData: validationData,\n\t\t\tClientMetadata: clientMetadata,\n\t\t});\n\t\tif (data.userConfirmed) {\n\t\t\tthis.signInAfterUserConfirmed(authDetails);\n\t\t} else if (this._config.signUpVerificationMethod === 'link') {\n\t\t\tthis.handleLinkAutoSignIn(authDetails);\n\t\t} else {\n\t\t\tthis.handleCodeAutoSignIn(authDetails);\n\t\t}\n\t}\n\n\tprivate handleCodeAutoSignIn(authDetails: AuthenticationDetails) {\n\t\tconst listenEvent = ({ payload }) => {\n\t\t\tif (payload.event === 'confirmSignUp') {\n\t\t\t\tthis.signInAfterUserConfirmed(authDetails, listenEvent);\n\t\t\t}\n\t\t};\n\t\tHub.listen('auth', listenEvent);\n\t}\n\n\tprivate handleLinkAutoSignIn(authDetails: AuthenticationDetails) {\n\t\tthis._storage.setItem('amplify-polling-started', 'true');\n\t\tconst start = Date.now();\n\t\tconst autoSignInPollingIntervalId = setInterval(() => {\n\t\t\tif (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {\n\t\t\t\tclearInterval(autoSignInPollingIntervalId);\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'autoSignIn_failure',\n\t\t\t\t\tnull,\n\t\t\t\t\t'Please confirm your account and use your credentials to sign in.'\n\t\t\t\t);\n\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t} else {\n\t\t\t\tthis.signInAfterUserConfirmed(\n\t\t\t\t\tauthDetails,\n\t\t\t\t\tnull,\n\t\t\t\t\tautoSignInPollingIntervalId\n\t\t\t\t);\n\t\t\t}\n\t\t}, 5000);\n\t}\n\n\tprivate async signInAfterUserConfirmed(\n\t\tauthDetails: AuthenticationDetails,\n\t\tlistenEvent?: HubCallback,\n\t\tautoSignInPollingIntervalId?: ReturnType<typeof setInterval>\n\t) {\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\t\ttry {\n\t\t\tawait user.authenticateUser(\n\t\t\t\tauthDetails,\n\t\t\t\tthis.authCallbacks(\n\t\t\t\t\tuser,\n\t\t\t\t\tvalue => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'autoSignIn',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t`${authDetails.getUsername()} has signed in successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (listenEvent) {\n\t\t\t\t\t\t\tHub.remove('auth', listenEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (autoSignInPollingIntervalId) {\n\t\t\t\t\t\t\tclearInterval(autoSignInPollingIntervalId);\n\t\t\t\t\t\t\tthis._storage.removeItem('amplify-polling-started');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tlogger.error(error);\n\t\t\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\t/**\n\t * Send the verification code to confirm sign up\n\t * @param {String} username - The username to be confirmed\n\t * @param {String} code - The verification code\n\t * @param {ConfirmSignUpOptions} options - other options for confirm signup\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic confirmSignUp(\n\t\tusername: string,\n\t\tcode: string,\n\t\toptions?: ConfirmSignUpOptions\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\tconst forceAliasCreation =\n\t\t\toptions && typeof options.forceAliasCreation === 'boolean'\n\t\t\t\t? options.forceAliasCreation\n\t\t\t\t: true;\n\n\t\tlet clientMetadata;\n\t\tif (options && options.clientMetadata) {\n\t\t\tclientMetadata = options.clientMetadata;\n\t\t} else if (this._config.clientMetadata) {\n\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmRegistration(\n\t\t\t\tcode,\n\t\t\t\tforceAliasCreation,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'confirmSignUp',\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`${username} has been confirmed successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst autoSignIn = this.isTrueStorageValue('amplify-auto-sign-in');\n\t\t\t\t\t\tif (autoSignIn && !this.autoSignInInitiated) {\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'autoSignIn_failure',\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tAuthErrorTypes.AutoSignInError\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate isTrueStorageValue(value: string) {\n\t\tconst item = this._storage.getItem(value);\n\t\treturn item ? item === 'true' : false;\n\t}\n\n\t/**\n\t * Resend the verification code\n\t * @param {String} username - The username to be confirmed\n\t * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n\t * @return - A promise resolves code delivery details if successful\n\t */\n\tpublic resendSignUp(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.resendConfirmationCode((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\t\t\t}, clientMetadata);\n\t\t});\n\t}\n\n\t/**\n\t * Sign in\n\t * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n\t * @param {String} pw - The password of the username\n\t * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows\n\t * @return - A promise resolves the CognitoUser\n\t */\n\tpublic signIn(\n\t\tusernameOrSignInOpts: string | SignInOpts,\n\t\tpw?: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username = null;\n\t\tlet password = null;\n\t\tlet validationData = {};\n\n\t\t// for backward compatibility\n\t\tif (typeof usernameOrSignInOpts === 'string') {\n\t\t\tusername = usernameOrSignInOpts;\n\t\t\tpassword = pw;\n\t\t} else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n\t\t\tif (typeof pw !== 'undefined') {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'The password should be defined under the first parameter object!'\n\t\t\t\t);\n\t\t\t}\n\t\t\tusername = usernameOrSignInOpts.username;\n\t\t\tpassword = usernameOrSignInOpts.password;\n\t\t\tvalidationData = usernameOrSignInOpts.validationData;\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tconst authDetails = new AuthenticationDetails({\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t\tValidationData: validationData,\n\t\t\tClientMetadata: clientMetadata,\n\t\t});\n\t\tif (password) {\n\t\t\treturn this.signInWithPassword(authDetails);\n\t\t} else {\n\t\t\treturn this.signInWithoutPassword(authDetails);\n\t\t}\n\t}\n\n\t/**\n\t * Return an object with the authentication callbacks\n\t * @param {CognitoUser} user - the cognito user object\n\t * @param {} resolve - function called when resolving the current step\n\t * @param {} reject - function called when rejecting the current step\n\t * @return - an object with the callback methods for user authentication\n\t */\n\tprivate authCallbacks(\n\t\tuser: CognitoUser,\n\t\tresolve: (value?: CognitoUser | any) => void,\n\t\treject: (value?: any) => void\n\t): IAuthenticationCallback {\n\t\tconst that = this;\n\t\treturn {\n\t\t\tonSuccess: async session => {\n\t\t\t\tlogger.debug(session);\n\t\t\t\tdelete user['challengeName'];\n\t\t\t\tdelete user['challengeParam'];\n\t\t\t\ttry {\n\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// In order to get user attributes and MFA methods\n\t\t\t\t\t\t// We need to trigger currentUserPoolUser again\n\t\t\t\t\t\tconst currentUser = await this.currentUserPoolUser();\n\t\t\t\t\t\tthat.user = currentUser;\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(currentUser);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.error('Failed to get the signed in user', e);\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonFailure: err => {\n\t\t\t\tlogger.debug('signIn failure', err);\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'signIn_failure',\n\t\t\t\t\terr,\n\t\t\t\t\t`${user.getUsername()} failed to signin`\n\t\t\t\t);\n\t\t\t\treject(err);\n\t\t\t},\n\t\t\tcustomChallenge: challengeParam => {\n\t\t\t\tlogger.debug('signIn custom challenge answer required');\n\t\t\t\tuser['challengeName'] = 'CUSTOM_CHALLENGE';\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tnewPasswordRequired: (userAttributes, requiredAttributes) => {\n\t\t\t\tlogger.debug('signIn new password');\n\t\t\t\tuser['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n\t\t\t\tuser['challengeParam'] = {\n\t\t\t\t\tuserAttributes,\n\t\t\t\t\trequiredAttributes,\n\t\t\t\t};\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn totpRequired');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tselectMFAType: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn selectMFAType', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Sign in with a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tif (this.pendingSignIn) {\n\t\t\tthrow new Error('Pending sign-in attempt already in progress');\n\t\t}\n\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\n\t\tthis.pendingSignIn = new Promise((resolve, reject) => {\n\t\t\tuser.authenticateUser(\n\t\t\t\tauthDetails,\n\t\t\t\tthis.authCallbacks(\n\t\t\t\t\tuser,\n\t\t\t\t\tvalue => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\n\t\treturn this.pendingSignIn;\n\t}\n\n\t/**\n\t * Sign in without a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithoutPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\t\tuser.setAuthenticationFlowType('CUSTOM_AUTH');\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.initiateAuth(authDetails, this.authCallbacks(user, resolve, reject));\n\t\t});\n\t}\n\n\t/**\n\t * This was previously used by an authenticated user to get MFAOptions,\n\t * but no longer returns a meaningful response. Refer to the documentation for\n\t * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves the current preferred mfa option if success\n\t */\n\tpublic getMFAOptions(user: CognitoUser | any): Promise<MFAOption[]> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getMFAOptions((err, mfaOptions) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('get MFA Options failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('get MFA options success', mfaOptions);\n\t\t\t\tres(mfaOptions);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * get preferred mfa method\n\t * @param {CognitoUser} user - the current cognito user\n\t * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n\t */\n\tpublic getPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tparams?: GetPreferredMFAOpts\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\t\t\tuser.getUserData(\n\t\t\t\tasync (err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('getting preferred mfa failed', err);\n\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst mfaType = that._getMfaTypeFromUserData(data);\n\t\t\t\t\tif (!mfaType) {\n\t\t\t\t\t\trej('invalid MFA Type');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres(mfaType);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _getMfaTypeFromUserData(data) {\n\t\tlet ret = null;\n\t\tconst preferredMFA = data.PreferredMfaSetting;\n\t\t// if the user has used Auth.setPreferredMFA() to setup the mfa type\n\t\t// then the \"PreferredMfaSetting\" would exist in the response\n\t\tif (preferredMFA) {\n\t\t\tret = preferredMFA;\n\t\t} else {\n\t\t\t// if mfaList exists but empty, then its noMFA\n\t\t\tconst mfaList = data.UserMFASettingList;\n\t\t\tif (!mfaList) {\n\t\t\t\t// if SMS was enabled by using Auth.enableSMS(),\n\t\t\t\t// the response would contain MFAOptions\n\t\t\t\t// as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n\t\t\t\t// if it does not exist, then it should be NOMFA\n\t\t\t\tconst MFAOptions = data.MFAOptions;\n\t\t\t\tif (MFAOptions) {\n\t\t\t\t\tret = 'SMS_MFA';\n\t\t\t\t} else {\n\t\t\t\t\tret = 'NOMFA';\n\t\t\t\t}\n\t\t\t} else if (mfaList.length === 0) {\n\t\t\t\tret = 'NOMFA';\n\t\t\t} else {\n\t\t\t\tlogger.debug('invalid case for getPreferredMFA', data);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate _getUserData(user, params) {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getUserData(async (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tres(data);\n\t\t\t\t}\n\t\t\t}, params);\n\t\t});\n\t}\n\n\t/**\n\t * set preferred MFA method\n\t * @param {CognitoUser} user - the current Cognito user\n\t * @param {string} mfaMethod - preferred mfa method\n\t * @return - A promise resolve if success\n\t */\n\tpublic async setPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tmfaMethod: 'TOTP' | 'SMS' | 'NOMFA' | 'SMS_MFA' | 'SOFTWARE_TOKEN_MFA'\n\t): Promise<string> {\n\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\tconst userData = await this._getUserData(user, {\n\t\t\tbypassCache: true,\n\t\t\tclientMetadata,\n\t\t});\n\t\tlet smsMfaSettings = null;\n\t\tlet totpMfaSettings = null;\n\n\t\tswitch (mfaMethod) {\n\t\t\tcase 'TOTP':\n\t\t\tcase 'SOFTWARE_TOKEN_MFA':\n\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'SMS':\n\t\t\tcase 'SMS_MFA':\n\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'NOMFA':\n\t\t\t\tconst mfaList = userData['UserMFASettingList'];\n\t\t\t\tconst currentMFAType = await this._getMfaTypeFromUserData(userData);\n\t\t\t\tif (currentMFAType === 'NOMFA') {\n\t\t\t\t\treturn Promise.resolve('No change for mfa type');\n\t\t\t\t} else if (currentMFAType === 'SMS_MFA') {\n\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidMFA);\n\t\t\t\t}\n\t\t\t\t// if there is a UserMFASettingList in the response\n\t\t\t\t// we need to disable every mfa type in that list\n\t\t\t\tif (mfaList && mfaList.length !== 0) {\n\t\t\t\t\t// to disable SMS or TOTP if exists in that list\n\t\t\t\t\tmfaList.forEach(mfaType => {\n\t\t\t\t\t\tif (mfaType === 'SMS_MFA') {\n\t\t\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.debug('no validmfa method provided');\n\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoMFA);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise<string>((res, rej) => {\n\t\t\tuser.setUserMfaPreference(\n\t\t\t\tsmsMfaSettings,\n\t\t\t\ttotpMfaSettings,\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Set user mfa preference error', err);\n\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t}\n\t\t\t\t\tlogger.debug('Set user mfa success', result);\n\t\t\t\t\tlogger.debug('Caching the latest user data into local');\n\t\t\t\t\t// cache the latest result into user data\n\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\tasync (err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn res(result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbypassCache: true,\n\t\t\t\t\t\t\tclientMetadata,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * disable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic disableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.disableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('disable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('disable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * enable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic enableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.enableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('enable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('enable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Setup TOTP\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves with the secret code if success\n\t */\n\tpublic setupTOTP(user: CognitoUser | any): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.associateSoftwareToken({\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tassociateSecretCode: secretCode => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken sucess', secretCode);\n\t\t\t\t\tres(secretCode);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * verify TOTP setup\n\t * @param {CognitoUser} user - the current user\n\t * @param {string} challengeAnswer - challenge answer\n\t * @return - A promise resolves is success\n\t */\n\tpublic verifyTotpToken(\n\t\tuser: CognitoUser | any,\n\t\tchallengeAnswer: string\n\t): Promise<CognitoUserSession> {\n\t\tlogger.debug('verification totp token', user, challengeAnswer);\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('verifyTotpToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t);\n\t\t\t\t\tlogger.debug('verifyTotpToken success', data);\n\t\t\t\t\tres(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Send MFA code to confirm sign in\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} code - The confirmation code\n\t */\n\tpublic confirmSignIn(\n\t\tuser: CognitoUser | any,\n\t\tcode: string,\n\t\tmfaType?: 'SMS_MFA' | 'SOFTWARE_TOKEN_MFA' | null,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendMFACode(\n\t\t\t\tcode,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('confirm signIn failure', err);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmfaType,\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic completeNewPassword(\n\t\tuser: CognitoUser | any,\n\t\tpassword: string,\n\t\trequiredAttributes: any = {},\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.completeNewPasswordChallenge(\n\t\t\t\tpassword,\n\t\t\t\trequiredAttributes,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('completeNewPassword failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'completeNewPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${this.user} failed to complete the new password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Send the answer to a custom challenge\n\t * @param {CognitoUser} user - The CognitoUser object\n\t * @param {String} challengeResponses - The confirmation code\n\t */\n\tpublic sendCustomChallengeAnswer(\n\t\tuser: CognitoUser | any,\n\t\tchallengeResponses: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!challengeResponses) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendCustomChallengeAnswer(\n\t\t\t\tchallengeResponses,\n\t\t\t\tthis.authCallbacks(user, resolve, reject),\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Delete an authenticated users' attributes\n\t * @param {CognitoUser} - The currently logged in user object\n\t * @return {Promise}\n\t **/\n\tpublic deleteUserAttributes(\n\t\tuser: CognitoUser | any,\n\t\tattributeNames: string[]\n\t) {\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthat.userSession(user).then(session => {\n\t\t\t\tuser.deleteAttributes(attributeNames, (err, result) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Delete the current authenticated user\n\t * @return {Promise}\n\t **/\n\t// TODO: Check return type void\n\tpublic async deleteUser(): Promise<string | void> {\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow new Error(e);\n\t\t}\n\n\t\tconst isSignedInHostedUI =\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tif (this.userPool) {\n\t\t\t\tconst user = this.userPool.getCurrentUser();\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tlogger.debug('Failed to get user from user pool');\n\t\t\t\t\treturn rej(new Error('No current user.'));\n\t\t\t\t} else {\n\t\t\t\t\tuser.getSession(async (err, session) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('Failed to get the user session', err);\n\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuser.deleteUser((err, result: string) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t\t\t'userDeleted',\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\t'The authenticated user has been deleted.'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tuser.signOut();\n\t\t\t\t\t\t\t\t\tthis.user = null;\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tthis.cleanCachedItems(); // clean aws credentials\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t// TODO: change to rejects in refactor\n\t\t\t\t\t\t\t\t\t\tlogger.debug('failed to clear cached items');\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t\t\t\t'signOut',\n\t\t\t\t\t\t\t\t\t\t\tthis.user,\n\t\t\t\t\t\t\t\t\t\t\t`A user has been signed out`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tres(result);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug('no Congito User pool');\n\t\t\t\trej(new Error('Cognito User pool does not exist'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Update an authenticated users' attributes\n\t * @param {CognitoUser} - The currently logged in user object\n\t * @return {Promise}\n\t **/\n\tpublic updateUserAttributes(\n\t\tuser: CognitoUser | any,\n\t\tattributes: object,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<string> {\n\t\tconst attributeList: ICognitoUserAttributeData[] = [];\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthat.userSession(user).then(session => {\n\t\t\t\tfor (const key in attributes) {\n\t\t\t\t\tif (key !== 'sub' && key.indexOf('_verified') < 0) {\n\t\t\t\t\t\tconst attr: ICognitoUserAttributeData = {\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: attributes[key],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tattributeList.push(attr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tuser.updateAttributes(\n\t\t\t\t\tattributeList,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\t/**\n\t * Return user attributes\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to user attributes if success\n\t */\n\tpublic userAttributes(\n\t\tuser: CognitoUser | any\n\t): Promise<CognitoUserAttribute[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.getUserAttributes((err, attributes) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(attributes);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifiedContact(user: CognitoUser | any) {\n\t\tconst that = this;\n\t\treturn this.userAttributes(user).then(attributes => {\n\t\t\tconst attrs = that.attributesToObject(attributes);\n\t\t\tconst unverified = {};\n\t\t\tconst verified = {};\n\t\t\tif (attrs['email']) {\n\t\t\t\tif (attrs['email_verified']) {\n\t\t\t\t\tverified['email'] = attrs['email'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['email'] = attrs['email'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (attrs['phone_number']) {\n\t\t\t\tif (attrs['phone_number_verified']) {\n\t\t\t\t\tverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tverified,\n\t\t\t\tunverified,\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate isErrorWithMessage(err: any): err is { message: string } {\n\t\treturn (\n\t\t\ttypeof err === 'object' &&\n\t\t\tObject.prototype.hasOwnProperty.call(err, 'message')\n\t\t);\n\t}\n\n\t// Session revoked by another app\n\tprivate isTokenRevokedError(\n\t\terr: any\n\t): err is { message: 'Access Token has been revoked' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) &&\n\t\t\terr.message === 'Access Token has been revoked'\n\t\t);\n\t}\n\n\tprivate isRefreshTokenRevokedError(\n\t\terr: any\n\t): err is { message: 'Refresh Token has been revoked' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) &&\n\t\t\terr.message === 'Refresh Token has been revoked'\n\t\t);\n\t}\n\n\tprivate isUserDisabledError(\n\t\terr: any\n\t): err is { message: 'User is disabled.' } {\n\t\treturn this.isErrorWithMessage(err) && err.message === 'User is disabled.';\n\t}\n\n\tprivate isUserDoesNotExistError(\n\t\terr: any\n\t): err is { message: 'User does not exist.' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) && err.message === 'User does not exist.'\n\t\t);\n\t}\n\n\tprivate isRefreshTokenExpiredError(\n\t\terr: any\n\t): err is { message: 'Refresh Token has expired' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) &&\n\t\t\terr.message === 'Refresh Token has expired'\n\t\t);\n\t}\n\n\tprivate isSignedInHostedUI() {\n\t\treturn (\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true'\n\t\t);\n\t}\n\n\tprivate isSessionInvalid(err: any) {\n\t\treturn (\n\t\t\tthis.isUserDisabledError(err) ||\n\t\t\tthis.isUserDoesNotExistError(err) ||\n\t\t\tthis.isTokenRevokedError(err) ||\n\t\t\tthis.isRefreshTokenRevokedError(err) ||\n\t\t\tthis.isRefreshTokenExpiredError(err)\n\t\t);\n\t}\n\n\tprivate async cleanUpInvalidSession(user: CognitoUser) {\n\t\tuser.signOut();\n\t\tthis.user = null;\n\t\ttry {\n\t\t\tawait this.cleanCachedItems(); // clean aws credentials\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to clear cached items');\n\t\t}\n\t\tif (this.isSignedInHostedUI()) {\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t});\n\t\t} else {\n\t\t\tdispatchAuthEvent('signOut', this.user, `A user has been signed out`);\n\t\t}\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic currentUserPoolUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthis._storageSync\n\t\t\t\t.then(async () => {\n\t\t\t\t\tif (this.isOAuthInProgress()) {\n\t\t\t\t\t\tlogger.debug('OAuth signIn in progress, waiting for resolution...');\n\n\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\tconst timeoutId = setTimeout(() => {\n\t\t\t\t\t\t\t\tlogger.debug('OAuth signIn in progress timeout');\n\n\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t}, OAUTH_FLOW_MS_TIMEOUT);\n\n\t\t\t\t\t\t\tHub.listen('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\tfunction hostedUISignCallback({ payload }) {\n\t\t\t\t\t\t\t\tconst { event } = payload;\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI' ||\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI_failure'\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tlogger.debug(`OAuth signIn resolved: ${event}`);\n\t\t\t\t\t\t\t\t\tclearTimeout(timeoutId);\n\n\t\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = this.userPool.getCurrentUser();\n\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tlogger.debug('Failed to get user from user pool');\n\t\t\t\t\t\trej('No current user');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\t\t// refresh the session if the session expired.\n\t\t\t\t\tuser.getSession(\n\t\t\t\t\t\tasync (err, session) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('Failed to get the user session', err);\n\t\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// get user data from Cognito\n\t\t\t\t\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\n\t\t\t\t\t\t\tif (bypassCache) {\n\t\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\t\t\t\t// validate the token's scope first before calling this function\n\t\t\t\t\t\t\tconst { scope = '' } = session.getAccessToken().decodePayload();\n\t\t\t\t\t\t\tif (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n\t\t\t\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\t\t\t\tasync (err, data) => {\n\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tres(user);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tconst preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n\t\t\t\t\t\t\t\t\t\tconst attributeList = [];\n\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < data.UserAttributes.length; i++) {\n\t\t\t\t\t\t\t\t\t\t\tconst attribute = {\n\t\t\t\t\t\t\t\t\t\t\t\tName: data.UserAttributes[i].Name,\n\t\t\t\t\t\t\t\t\t\t\t\tValue: data.UserAttributes[i].Value,\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tconst userAttribute = new CognitoUserAttribute(attribute);\n\t\t\t\t\t\t\t\t\t\t\tattributeList.push(userAttribute);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst attributes = this.attributesToObject(attributeList);\n\t\t\t\t\t\t\t\t\t\tObject.assign(user, { attributes, preferredMFA });\n\t\t\t\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Unable to get the user data because the ${USER_ADMIN_SCOPE} ` +\n\t\t\t\t\t\t\t\t\t\t`is not in the scopes of the access token`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ clientMetadata }\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\t\t\treturn rej(e);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate isOAuthInProgress(): boolean {\n\t\treturn this.oAuthFlowInProgress;\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @param {CurrentUserOpts} - options for getting the current user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic async currentAuthenticatedUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tlogger.debug('getting current authenticated user');\n\t\tlet federatedUser = null;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\ttry {\n\t\t\tconst federatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t\tif (federatedInfo) {\n\t\t\t\tfederatedUser = {\n\t\t\t\t\t...federatedInfo.user,\n\t\t\t\t\ttoken: federatedInfo.token,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.debug('cannot load federated user from auth storage');\n\t\t}\n\n\t\tif (federatedUser) {\n\t\t\tthis.user = federatedUser;\n\t\t\tlogger.debug('get current authenticated federated user', this.user);\n\t\t\treturn this.user;\n\t\t} else {\n\t\t\tlogger.debug('get current authenticated userpool user');\n\t\t\tlet user = null;\n\t\t\ttry {\n\t\t\t\tuser = await this.currentUserPoolUser(params);\n\t\t\t} catch (e) {\n\t\t\t\tif (e === 'No userPool') {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t'Cannot get the current user because the user pool is missing. ' +\n\t\t\t\t\t\t\t'Please make sure the Auth module is configured with a valid Cognito User Pool ID'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlogger.debug('The user is not authenticated by the error', e);\n\t\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t\t}\n\t\t\tthis.user = user;\n\t\t\treturn this.user;\n\t\t}\n\t}\n\n\t/**\n\t * Get current user's session\n\t * @return - A promise resolves to session object if success\n\t */\n\tpublic currentSession(): Promise<CognitoUserSession> {\n\t\tconst that = this;\n\t\tlogger.debug('Getting current session');\n\t\t// Purposely not calling the reject method here because we don't need a console error\n\t\tif (!this.userPool) {\n\t\t\treturn Promise.reject(new Error('No User Pool in the configuration.'));\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthat\n\t\t\t\t.currentUserPoolUser()\n\t\t\t\t.then(user => {\n\t\t\t\t\tthat\n\t\t\t\t\t\t.userSession(user)\n\t\t\t\t\t\t.then(session => {\n\t\t\t\t\t\t\tres(session);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tlogger.debug('Failed to get the current session', e);\n\t\t\t\t\t\t\trej(e);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to get the current user', e);\n\t\t\t\t\trej(e);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get the corresponding user session\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to the session\n\t */\n\tpublic userSession(user): Promise<CognitoUserSession> {\n\t\tif (!user) {\n\t\t\tlogger.debug('the user is null');\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoUserSession);\n\t\t}\n\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tlogger.debug('Getting the session from this user:', user);\n\t\t\tuser.getSession(\n\t\t\t\tasync (err, session) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to get the session from user', user);\n\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('Succeed to get the user session', session);\n\t\t\t\t\t\tres(session);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ clientMetadata }\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get authenticated credentials of current user.\n\t * @return - A promise resolves to be current user's credentials\n\t */\n\tpublic async currentUserCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('Getting current user credentials');\n\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\t// first to check whether there is federation info in the auth storage\n\t\tlet federatedInfo = null;\n\t\ttry {\n\t\t\tfederatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n\t\t}\n\n\t\tif (federatedInfo) {\n\t\t\t// refresh the jwt token here if necessary\n\t\t\treturn this.Credentials.refreshFederatedToken(federatedInfo);\n\t\t} else {\n\t\t\treturn this.currentSession()\n\t\t\t\t.then(session => {\n\t\t\t\t\tlogger.debug('getting session success', session);\n\t\t\t\t\treturn this.Credentials.set(session, 'session');\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tlogger.debug('getting guest credentials');\n\t\t\t\t\treturn this.Credentials.set(null, 'guest');\n\t\t\t\t});\n\t\t}\n\t}\n\n\tpublic currentCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('getting current credentials');\n\t\treturn this.Credentials.get();\n\t}\n\n\t/**\n\t * Initiate an attribute confirmation request\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attributes to be verified\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttribute(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.getAttributeVerificationCode(\n\t\t\t\tattr,\n\t\t\t\t{\n\t\t\t\t\tonSuccess(success) {\n\t\t\t\t\t\treturn resolve(success);\n\t\t\t\t\t},\n\t\t\t\t\tonFailure(err) {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm an attribute using a confirmation code\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttributeSubmit(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.verifyAttribute(attr, code, {\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tresolve(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonFailure(err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifyCurrentUserAttribute(attr: string): Promise<void> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttribute(user, attr));\n\t}\n\n\t/**\n\t * Confirm current user's attribute using a confirmation code\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tverifyCurrentUserAttributeSubmit(\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttributeSubmit(user, attr, code));\n\t}\n\n\tprivate async cognitoIdentitySignOut(\n\t\topts: SignOutOpts,\n\t\tuser: CognitoUser | any\n\t) {\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tconst isSignedInHostedUI =\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tif (opts && opts.global) {\n\t\t\t\tlogger.debug('user global sign out', user);\n\t\t\t\t// in order to use global signout\n\t\t\t\t// we must validate the user as an authenticated user by using getSession\n\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\tuser.getSession(\n\t\t\t\t\tasync (err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('failed to get the user session', err);\n\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuser.globalSignOut({\n\t\t\t\t\t\t\tonSuccess: data => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out success');\n\t\t\t\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn res();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out failed', err);\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t{ clientMetadata }\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlogger.debug('user sign out', user);\n\t\t\t\tuser.signOut(() => {\n\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate oAuthSignOutRedirect(\n\t\tresolve: () => void,\n\t\treject: (reason?: any) => void\n\t) {\n\t\tconst { isBrowser } = browserOrNode();\n\n\t\tif (isBrowser) {\n\t\t\tthis.oAuthSignOutRedirectOrReject(reject);\n\t\t} else {\n\t\t\tthis.oAuthSignOutAndResolve(resolve);\n\t\t}\n\t}\n\n\tprivate oAuthSignOutAndResolve(resolve: () => void) {\n\t\tthis._oAuthHandler.signOut();\n\t\tresolve();\n\t}\n\n\tprivate oAuthSignOutRedirectOrReject(reject: (reason?: any) => void) {\n\t\tthis._oAuthHandler.signOut(); // this method redirects url\n\n\t\t// App should be redirected to another url otherwise it will reject\n\t\tsetTimeout(() => reject(Error('Signout timeout fail')), 3000);\n\t}\n\n\t/**\n\t * Sign out method\n\t * @\n\t * @return - A promise resolved if success\n\t */\n\tpublic async signOut(opts?: SignOutOpts): Promise<any> {\n\t\ttry {\n\t\t\tawait this.cleanCachedItems();\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to clear cached items');\n\t\t}\n\n\t\tif (this.userPool) {\n\t\t\tconst user = this.userPool.getCurrentUser();\n\t\t\tif (user) {\n\t\t\t\tawait this.cognitoIdentitySignOut(opts, user);\n\t\t\t} else {\n\t\t\t\tlogger.debug('no current Cognito user');\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.debug('no Cognito User pool');\n\t\t}\n\n\t\t/**\n\t\t * Note for future refactor - no reliable way to get username with\n\t\t * Cognito User Pools vs Identity when federating with Social Providers\n\t\t * This is why we need a well structured session object that can be inspected\n\t\t * and information passed back in the message below for Hub dispatch\n\t\t */\n\t\tdispatchAuthEvent('signOut', this.user, `A user has been signed out`);\n\t\tthis.user = null;\n\t}\n\n\tprivate async cleanCachedItems() {\n\t\t// clear cognito cached item\n\t\tawait this.Credentials.clear();\n\t}\n\n\t/**\n\t * Change a password for an authenticated user\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} oldPassword - the current password\n\t * @param {String} newPassword - the requested new password\n\t * @return - A promise resolves if success\n\t */\n\tpublic changePassword(\n\t\tuser: CognitoUser | any,\n\t\toldPassword: string,\n\t\tnewPassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<'SUCCESS'> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.changePassword(\n\t\t\t\t\toldPassword,\n\t\t\t\t\tnewPassword,\n\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('change password failure', err);\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Initiate a forgot password request\n\t * @param {String} username - the username to change password\n\t * @return - A promise resolves if success\n\t */\n\tpublic forgotPassword(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.forgotPassword(\n\t\t\t\t{\n\t\t\t\t\tonSuccess: () => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('forgot password failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPassword failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tinputVerificationCode: data => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} has initiated forgot password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm a new password using a confirmation Code\n\t * @param {String} username - The username\n\t * @param {String} code - The confirmation code\n\t * @param {String} password - The new password\n\t * @return - A promise that resolves if success\n\t */\n\tpublic forgotPasswordSubmit(\n\t\tusername: string,\n\t\tcode: string,\n\t\tpassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<string> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmPassword(\n\t\t\t\tcode,\n\t\t\t\tpassword,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: success => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit successful`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(success);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get user information\n\t * @async\n\t * @return {Object }- current User's information\n\t */\n\tpublic async currentUserInfo() {\n\t\tconst source = this.Credentials.getCredSource();\n\n\t\tif (!source || source === 'aws' || source === 'userPool') {\n\t\t\tconst user = await this.currentUserPoolUser().catch(err =>\n\t\t\t\tlogger.error(err)\n\t\t\t);\n\t\t\tif (!user) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst attributes = await this.userAttributes(user);\n\t\t\t\tconst userAttrs: object = this.attributesToObject(attributes);\n\t\t\t\tlet credentials = null;\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = await this.currentCredentials();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t'Failed to retrieve credentials while getting current user info',\n\t\t\t\t\t\te\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst info = {\n\t\t\t\t\tid: credentials ? credentials.identityId : undefined,\n\t\t\t\t\tusername: user.getUsername(),\n\t\t\t\t\tattributes: userAttrs,\n\t\t\t\t};\n\t\t\t\treturn info;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('currentUserInfo error', err);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\n\t\tif (source === 'federated') {\n\t\t\tconst user = this.user;\n\t\t\treturn user ? user : {};\n\t\t}\n\t}\n\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptions\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tprovider: LegacyProvider,\n\t\tresponse: FederatedResponse,\n\t\tuser: FederatedUser\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptionsCustom\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tproviderOrOptions:\n\t\t\t| LegacyProvider\n\t\t\t| FederatedSignInOptions\n\t\t\t| FederatedSignInOptionsCustom,\n\t\tresponse?: FederatedResponse,\n\t\tuser?: FederatedUser\n\t): Promise<ICredentials> {\n\t\tif (!this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\tthrow new Error(\n\t\t\t\t`Federation requires either a User Pool or Identity Pool in config`\n\t\t\t);\n\t\t}\n\n\t\t// Ensure backwards compatability\n\t\tif (typeof providerOrOptions === 'undefined') {\n\t\t\tif (this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Federation with Identity Pools requires tokens passed as arguments`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tisFederatedSignInOptions(providerOrOptions) ||\n\t\t\tisFederatedSignInOptionsCustom(providerOrOptions) ||\n\t\t\thasCustomState(providerOrOptions) ||\n\t\t\ttypeof providerOrOptions === 'undefined'\n\t\t) {\n\t\t\tconst options = providerOrOptions || {\n\t\t\t\tprovider: CognitoHostedUIIdentityProvider.Cognito,\n\t\t\t};\n\t\t\tconst provider = isFederatedSignInOptions(options)\n\t\t\t\t? options.provider\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customProvider;\n\n\t\t\tconst customState = isFederatedSignInOptions(options)\n\t\t\t\t? options.customState\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customState;\n\n\t\t\tif (this._config.userPoolId) {\n\t\t\t\tconst client_id = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.userPoolWebClientId\n\t\t\t\t\t: this._config.oauth.clientID;\n\t\t\t\t/*Note: Invenstigate automatically adding trailing slash */\n\t\t\t\tconst redirect_uri = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.oauth.redirectSignIn\n\t\t\t\t\t: this._config.oauth.redirectUri;\n\n\t\t\t\tthis._oAuthHandler.oauthSignIn(\n\t\t\t\t\tthis._config.oauth.responseType,\n\t\t\t\t\tthis._config.oauth.domain,\n\t\t\t\t\tredirect_uri,\n\t\t\t\t\tclient_id,\n\t\t\t\t\tprovider,\n\t\t\t\t\tcustomState\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst provider = providerOrOptions;\n\t\t\t// To check if the user is already logged in\n\t\t\ttry {\n\t\t\t\tconst loggedInUser = JSON.stringify(\n\t\t\t\t\tJSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user\n\t\t\t\t);\n\t\t\t\tif (loggedInUser) {\n\t\t\t\t\tlogger.warn(`There is already a signed in user: ${loggedInUser} in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.`);\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\tconst { token, identity_id, expires_at } = response;\n\t\t\t// Because this.Credentials.set would update the user info with identity id\n\t\t\t// So we need to retrieve the user again.\n\t\t\tconst credentials = await this.Credentials.set(\n\t\t\t\t{ provider, token, identity_id, user, expires_at },\n\t\t\t\t'federation'\n\t\t\t);\n\t\t\tconst currentUser = await this.currentAuthenticatedUser();\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'signIn',\n\t\t\t\tcurrentUser,\n\t\t\t\t`A user ${currentUser.username} has been signed in`\n\t\t\t);\n\t\t\tlogger.debug('federated sign in credentials', credentials);\n\t\t\treturn credentials;\n\t\t}\n\t}\n\n\t/**\n\t * Used to complete the OAuth flow with or without the Cognito Hosted UI\n\t * @param {String} URL - optional parameter for customers to pass in the response URL\n\t */\n\tprivate async _handleAuthResponse(URL?: string) {\n\t\tif (this.oAuthFlowInProgress) {\n\t\t\tlogger.debug(`Skipping URL ${URL} current flow in progress`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.oAuthFlowInProgress = true;\n\t\t\tif (!this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`OAuth responses require a User Pool defined in config`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'parsingCallbackUrl',\n\t\t\t\t{ url: URL },\n\t\t\t\t`The callback url is being parsed`\n\t\t\t);\n\n\t\t\tconst currentUrl =\n\t\t\t\tURL || (browserOrNode().isBrowser ? window.location.href : '');\n\n\t\t\tconst hasCodeOrError = !!(parse(currentUrl).query || '')\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'code' || k === 'error');\n\n\t\t\tconst hasTokenOrError = !!(parse(currentUrl).hash || '#')\n\t\t\t\t.substr(1)\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'access_token' || k === 'error');\n\n\t\t\tif (hasCodeOrError || hasTokenOrError) {\n\t\t\t\tthis._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n\t\t\t\ttry {\n\t\t\t\t\tconst { accessToken, idToken, refreshToken, state } =\n\t\t\t\t\t\tawait this._oAuthHandler.handleAuthResponse(currentUrl);\n\t\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: idToken }),\n\t\t\t\t\t\tRefreshToken: new CognitoRefreshToken({\n\t\t\t\t\t\t\tRefreshToken: refreshToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tAccessToken: new CognitoAccessToken({\n\t\t\t\t\t\t\tAccessToken: accessToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\n\t\t\t\t\tlet credentials;\n\t\t\t\t\t// Get AWS Credentials & store if Identity Pool is defined\n\t\t\t\t\tif (this._config.identityPoolId) {\n\t\t\t\t\t\tcredentials = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\tlogger.debug('AWS credentials', credentials);\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\tPrior to the request we do sign the custom state along with the state we set. This check will verify\n\t\t\t\tif there is a dash indicated when setting custom state from the request. If a dash is contained\n\t\t\t\tthen there is custom state present on the state string.\n\t\t\t\t*/\n\t\t\t\t\tconst isCustomStateIncluded = /-/.test(state);\n\n\t\t\t\t\t/*\n\t\t\t\tThe following is to create a user for the Cognito Identity SDK to store the tokens\n\t\t\t\tWhen we remove this SDK later that logic will have to be centralized in our new version\n\t\t\t\t*/\n\t\t\t\t\t//#region\n\t\t\t\t\tconst currentUser = this.createCognitoUser(\n\t\t\t\t\t\tsession.getIdToken().decodePayload()['cognito:username']\n\t\t\t\t\t);\n\n\t\t\t\t\t// This calls cacheTokens() in Cognito SDK\n\t\t\t\t\tcurrentUser.setSignInUserSession(session);\n\n\t\t\t\t\tif (window && typeof window.history !== 'undefined') {\n\t\t\t\t\t\twindow.history.replaceState(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t(this._config.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in via Cognito Hosted UI`\n\t\t\t\t\t);\n\n\t\t\t\t\tif (isCustomStateIncluded) {\n\t\t\t\t\t\tconst customState = state.split('-').splice(1).join('-');\n\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'customOAuthState',\n\t\t\t\t\t\t\turlSafeDecode(customState),\n\t\t\t\t\t\t\t`State for user ${currentUser.getUsername()}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//#endregion\n\n\t\t\t\t\treturn credentials;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('Error in cognito hosted auth response', err);\n\n\t\t\t\t\t// Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n\t\t\t\t\t// Otherwise, reloading the page will throw errors as the `code` has already been spent.\n\t\t\t\t\tif (window && typeof window.history !== 'undefined') {\n\t\t\t\t\t\twindow.history.replaceState(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t(this._config.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`The OAuth response flow failed`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning to the Cognito Hosted UI`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'customState_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning state`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.oAuthFlowInProgress = false;\n\t\t}\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic essentialCredentials(credentials): ICredentials {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n\n\tprivate attributesToObject(attributes) {\n\t\tconst obj = {};\n\t\tif (attributes) {\n\t\t\tattributes.map(attribute => {\n\t\t\t\tif (\n\t\t\t\t\tattribute.Name === 'email_verified' ||\n\t\t\t\t\tattribute.Name === 'phone_number_verified'\n\t\t\t\t) {\n\t\t\t\t\tobj[attribute.Name] =\n\t\t\t\t\t\tthis.isTruthyString(attribute.Value) || attribute.Value === true;\n\t\t\t\t} else {\n\t\t\t\t\tobj[attribute.Name] = attribute.Value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn obj;\n\t}\n\n\tprivate isTruthyString(value: any): boolean {\n\t\treturn (\n\t\t\ttypeof value.toLowerCase === 'function' && value.toLowerCase() === 'true'\n\t\t);\n\t}\n\n\tprivate createCognitoUser(username: string): CognitoUser {\n\t\tconst userData: ICognitoUserData = {\n\t\t\tUsername: username,\n\t\t\tPool: this.userPool,\n\t\t};\n\t\tuserData.Storage = this._storage;\n\n\t\tconst { authenticationFlowType } = this._config;\n\n\t\tconst user = new CognitoUser(userData);\n\t\tif (authenticationFlowType) {\n\t\t\tuser.setAuthenticationFlowType(authenticationFlowType);\n\t\t}\n\t\treturn user;\n\t}\n\n\tprivate _isValidAuthStorage(obj) {\n\t\t// We need to check if the obj has the functions of Storage\n\t\treturn (\n\t\t\t!!obj &&\n\t\t\ttypeof obj.getItem === 'function' &&\n\t\t\ttypeof obj.setItem === 'function' &&\n\t\t\ttypeof obj.removeItem === 'function' &&\n\t\t\ttypeof obj.clear === 'function'\n\t\t);\n\t}\n\n\tprivate noUserPoolErrorHandler(config: AuthOptions): AuthErrorTypes {\n\t\tif (config) {\n\t\t\tif (!config.userPoolId || !config.identityPoolId) {\n\t\t\t\treturn AuthErrorTypes.MissingAuthConfig;\n\t\t\t}\n\t\t}\n\t\treturn AuthErrorTypes.NoConfig;\n\t}\n\n\tprivate rejectAuthError(type: AuthErrorTypes): Promise<never> {\n\t\treturn Promise.reject(new AuthError(type));\n\t}\n\n\tprivate rejectNoUserPool(): Promise<never> {\n\t\tconst type = this.noUserPoolErrorHandler(this._config);\n\t\treturn Promise.reject(new NoUserPoolError(type));\n\t}\n\n\tpublic async rememberDevice(): Promise<string | AuthError> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tcurrUser.setDeviceStatusRemembered({\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tres(data);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async forgetDevice(): Promise<void> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tcurrUser.forgetDevice({\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tres(data);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async fetchDevices(): Promise<IAuthDevice[]> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\tthrow new Error('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tconst cb = {\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tconst deviceList: IAuthDevice[] = data.Devices.map(device => {\n\t\t\t\t\t\tconst deviceName =\n\t\t\t\t\t\t\tdevice.DeviceAttributes.find(\n\t\t\t\t\t\t\t\t({ Name }) => Name === 'device_name'\n\t\t\t\t\t\t\t) || {};\n\n\t\t\t\t\t\tconst deviceInfo: IAuthDevice = {\n\t\t\t\t\t\t\tid: device.DeviceKey,\n\t\t\t\t\t\t\tname: deviceName.Value,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn deviceInfo;\n\t\t\t\t\t});\n\t\t\t\t\tres(deviceList);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t\tcurrUser.listDevices(MAX_DEVICES, null, cb);\n\t\t});\n\t}\n}\n\nexport const Auth = new AuthClass(null);\n\nAmplify.register(Auth);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}