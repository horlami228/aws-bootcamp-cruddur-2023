{"ast":null,"code":"import { __assign, __asyncValues, __awaiter, __extends, __generator, __read, __rest, __spread, __values } from \"tslib\";\nimport { API } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, browserOrNode, BackgroundProcessManager } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ModelRelationship } from '../storage/relationship';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject, isFieldAssociation } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, inMemoryPagination, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, mergePatches } from '../util';\nimport { recursivePredicateFor, predicateFor, internals } from '../predicates/next';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap();\n// stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\nvar modelPatchesMap = new WeakMap();\nvar getModelDefinition = function (modelConstructor) {\n  var e_1, _a, e_2, _b;\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  var definition = namespace ? schema.namespaces[namespace].models[modelConstructor.name] : undefined;\n  // compatibility with legacy/pre-PK codegen for lazy loading to inject\n  // index fields into the model definition.\n  if (definition) {\n    var indexes = schema.namespaces[namespace].relationships[modelConstructor.name].indexes;\n    var indexFields = new Set();\n    try {\n      for (var indexes_1 = __values(indexes), indexes_1_1 = indexes_1.next(); !indexes_1_1.done; indexes_1_1 = indexes_1.next()) {\n        var index = indexes_1_1.value;\n        try {\n          for (var _c = (e_2 = void 0, __values(index[1])), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var indexField = _d.value;\n            indexFields.add(indexField);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (indexes_1_1 && !indexes_1_1.done && (_a = indexes_1.return)) _a.call(indexes_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    definition.fields = __assign(__assign({}, Object.fromEntries(__spread(indexFields.values()).map(function (name) {\n      return [name, {\n        name: name,\n        type: 'ID',\n        isArray: false\n      }];\n    }, []))), definition.fields);\n  }\n  return definition;\n};\nvar getModelPKFieldName = function (modelConstructor) {\n  var _a, _b, _c;\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  return namespace && ((_c = (_b = (_a = schema.namespaces) === null || _a === void 0 ? void 0 : _a[namespace]) === null || _b === void 0 ? void 0 : _b.keys) === null || _c === void 0 ? void 0 : _c[modelConstructor.name].primaryKey) || ['id'];\n};\nvar isValidModelConstructor = function (obj) {\n  if (isModelConstructor(obj) && modelNamespaceMap.has(obj)) {\n    return true;\n  } else {\n    return false;\n  }\n};\nvar namespaceResolver = function (modelConstructor) {\n  var resolver = modelNamespaceMap.get(modelConstructor);\n  if (!resolver) {\n    throw new Error(\"Namespace Resolver for '\" + modelConstructor.name + \"' not found! This is probably a bug in '@amplify-js/datastore'.\");\n  }\n  return resolver;\n};\nvar buildSeedPredicate = function (modelConstructor) {\n  if (!modelConstructor) throw new Error('Missing modelConstructor');\n  var modelSchema = getModelDefinition(modelConstructor);\n  if (!modelSchema) throw new Error('Missing modelSchema');\n  var pks = getModelPKFieldName(modelConstructor);\n  if (!pks) throw new Error('Could not determine PK');\n  return recursivePredicateFor({\n    builder: modelConstructor,\n    schema: modelSchema,\n    pkField: pks\n  });\n};\n// exporting syncClasses for testing outbox.test.ts\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\n/**\n * Maps a model to its related models for memoization/immutability.\n */\nvar modelInstanceAssociationsMap = new WeakMap();\n/**\n * Describes whether and to what a model is attached for lazy loading purposes.\n */\nvar ModelAttachment;\n(function (ModelAttachment) {\n  /**\n   * Model doesn't lazy load from any data source.\n   *\n   * Related entity properties provided at instantiation are returned\n   * via the respective lazy interfaces when their properties are invoked.\n   */\n  ModelAttachment[\"Detached\"] = \"Detached\";\n  /**\n   * Model lazy loads from the global DataStore.\n   */\n  ModelAttachment[\"DataStore\"] = \"DataStore\";\n  /**\n   * Demonstrative. Not yet implemented.\n   */\n  ModelAttachment[\"API\"] = \"API\";\n})(ModelAttachment || (ModelAttachment = {}));\n/**\n * Tells us which data source a model is attached to (lazy loads from).\n *\n * If `Deatched`, the model's lazy properties will only ever return properties\n * from memory provided at construction time.\n */\nvar attachedModelInstances = new WeakMap();\n/**\n * Registers a model instance against a data source (DataStore, API, or\n * Detached/None).\n *\n * The API option is demonstrative. Lazy loading against API is not yet\n * implemented.\n *\n * @param result A model instance or array of instances\n * @param attachment A ModelAttachment data source\n * @returns passes the `result` back through after attachment\n */\nexport function attached(result, attachment) {\n  if (Array.isArray(result)) {\n    result.map(function (record) {\n      return attached(record, attachment);\n    });\n  } else {\n    result && attachedModelInstances.set(result, attachment);\n  }\n  return result;\n}\n/**\n * Determines what source a model instance should lazy load from.\n *\n * If the instace was never explicitly registered, it is detached by default.\n *\n * @param instance A model instance\n */\nexport var getAttachment = function (instance) {\n  return attachedModelInstances.has(instance) ? attachedModelInstances.get(instance) : ModelAttachment.Detached;\n};\nvar initSchema = function (userSchema) {\n  var _a;\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n  checkSchemaCodegenVersion(userSchema.codegenVersion);\n  var internalUserNamespace = __assign({\n    name: USER\n  }, userSchema);\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  var dataStoreNamespace = getNamespace();\n  var storageNamespace = Storage.getNamespace();\n  var syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),\n    version: userSchema.version,\n    codegenVersion: userSchema.codegenVersion\n  };\n  Object.keys(schema.namespaces).forEach(function (namespace) {\n    var e_3, _a;\n    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2),\n      relations = _b[0],\n      keys = _b[1];\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    var modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n      var connectedModels = [];\n      Object.values(model.fields).filter(function (field) {\n        return field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name;\n      }).forEach(function (field) {\n        return connectedModels.push(field.type.model);\n      });\n      modelAssociations.set(model.name, connectedModels);\n      Object.values(model.fields).forEach(function (field) {\n        if (typeof field.type === 'object' && !Object.getOwnPropertyDescriptor(field.type, 'modelConstructor')) {\n          Object.defineProperty(field.type, 'modelConstructor', {\n            get: function () {\n              return {\n                builder: userClasses[field.type.model],\n                schema: schema.namespaces[namespace].models[field.type.model],\n                pkField: getModelPKFieldName(userClasses[field.type.model])\n              };\n            }\n          });\n        }\n      });\n    });\n    var result = new Map();\n    var count = 1000;\n    while (true && count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n      count--;\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n      try {\n        for (var _c = (e_3 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var modelName = _d.value;\n          var parents = modelAssociations.get(modelName);\n          if (parents === null || parents === void 0 ? void 0 : parents.every(function (x) {\n            return result.has(x);\n          })) {\n            result.set(modelName, parents);\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      Array.from(result.keys()).forEach(function (x) {\n        return modelAssociations.delete(x);\n      });\n    }\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nvar checkSchemaInitialized = function () {\n  if (schema === undefined) {\n    var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n    logger.error(message);\n    throw new Error(message);\n  }\n};\n/**\n * Throws an exception if the schema is using a codegen version that is not supported.\n *\n * Set the supported version by setting majorVersion and minorVersion\n * This functions similar to ^ version range.\n * The tested codegenVersion major version must exactly match the set majorVersion\n * The tested codegenVersion minor version must be gt or equal to the set minorVersion\n * Example: For a min supported version of 5.4.0 set majorVersion = 5 and minorVersion = 4\n *\n * This regex will not work when setting a supported range with minor version\n * of 2 or more digits.\n * i.e. minorVersion = 10 will not work\n * The regex will work for testing a codegenVersion with multi digit minor\n * versions as long as the minimum minorVersion is single digit.\n * i.e. codegenVersion = 5.30.1, majorVersion = 5, minorVersion = 4 PASSES\n *\n * @param codegenVersion schema codegenVersion\n */\nvar checkSchemaCodegenVersion = function (codegenVersion) {\n  // TODO: set to correct version when released in codegen\n  var majorVersion = 3;\n  var minorVersion = 2;\n  var isValid = false;\n  try {\n    var versionParts = codegenVersion.split('.');\n    var _a = __read(versionParts, 4),\n      major = _a[0],\n      minor = _a[1],\n      patch = _a[2],\n      patchrevision = _a[3];\n    isValid = Number(major) === majorVersion && Number(minor) >= minorVersion;\n  } catch (err) {\n    console.log(\"Error parsing codegen version: \" + codegenVersion + \"\\n\" + err);\n  }\n  if (!isValid) {\n    var message = \"Models were generated with an unsupported version of codegen. Codegen artifacts are from \" + (codegenVersion || 'an unknown version') + \", whereas ^\" + majorVersion + \".\" + minorVersion + \".0 is required. \" + \"Update to the latest CLI and run 'amplify codegen models'.\";\n    logger.error(message);\n    throw new Error(message);\n  }\n};\nvar createTypeClasses = function (namespace) {\n  var classes = {};\n  Object.entries(namespace.models).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      modelName = _b[0],\n      modelDefinition = _b[1];\n    var clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      typeName = _b[0],\n      typeDefinition = _b[1];\n    var clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nvar instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\nvar validateModelFields = function (modelDefinition) {\n  return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n    if (fieldDefinition !== undefined) {\n      var type_1 = fieldDefinition.type,\n        isRequired_1 = fieldDefinition.isRequired,\n        isArrayNullable = fieldDefinition.isArrayNullable,\n        name_1 = fieldDefinition.name,\n        isArray = fieldDefinition.isArray;\n      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && (v === null || v === undefined)) {\n        throw new Error(\"Field \" + name_1 + \" is required\");\n      }\n      if (isSchemaModelWithAttributes(modelDefinition) && !isIdManaged(modelDefinition)) {\n        var keys = extractPrimaryKeyFieldNames(modelDefinition);\n        if (keys.includes(k) && v === '') {\n          logger.error(errorMessages.idEmptyString, {\n            k: k,\n            value: v\n          });\n          throw new Error(errorMessages.idEmptyString);\n        }\n      }\n      if (isGraphQLScalarType(type_1)) {\n        var jsType_1 = GraphQLScalarType.getJSType(type_1);\n        var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n        if (type_1 === 'AWSJSON') {\n          if (typeof v === jsType_1) {\n            return;\n          }\n          if (typeof v === 'string') {\n            try {\n              JSON.parse(v);\n              return;\n            } catch (error) {\n              throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n            }\n          }\n        }\n        if (isArray) {\n          var errorTypeText = jsType_1;\n          if (!isRequired_1) {\n            errorTypeText = jsType_1 + \" | null | undefined\";\n          }\n          if (!Array.isArray(v) && !isArrayNullable) {\n            throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n          }\n          if (!isNullOrUndefined(v) && v.some(function (e) {\n            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n          })) {\n            var elemTypes = v.map(function (e) {\n              return e === null ? 'null' : typeof e;\n            }).join(',');\n            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n          }\n          if (validateScalar_1 && !isNullOrUndefined(v)) {\n            var validationStatus = v.map(function (e) {\n              if (!isNullOrUndefined(e)) {\n                return validateScalar_1(e);\n              } else if (isNullOrUndefined(e) && !isRequired_1) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n            if (!validationStatus.every(function (s) {\n              return s;\n            })) {\n              throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n            }\n          }\n        } else if (!isRequired_1 && v === undefined) {\n          return;\n        } else if (typeof v !== jsType_1 && v !== null) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n        } else if (!isNullOrUndefined(v) && validateScalar_1 && !validateScalar_1(v) // TODO: why never, TS ... why ...\n        ) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n        }\n      } else if (isNonModelFieldType(type_1)) {\n        // do not check non model fields if undefined or null\n        if (!isNullOrUndefined(v)) {\n          var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n          var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n          if (isArray) {\n            var errorTypeText = type_1.nonModel;\n            if (!isRequired_1) {\n              errorTypeText = type_1.nonModel + \" | null | undefined\";\n            }\n            if (!Array.isArray(v)) {\n              throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n            }\n            v.forEach(function (item) {\n              if (isNullOrUndefined(item) && isRequired_1 || typeof item !== 'object' && typeof item !== 'undefined') {\n                throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n              }\n              if (!isNullOrUndefined(item)) {\n                Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                  modelValidator_1(subKey, item[subKey]);\n                });\n              }\n            });\n          } else {\n            if (typeof v !== 'object') {\n              throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n            }\n            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n              modelValidator_1(subKey, v[subKey]);\n            });\n          }\n        }\n      }\n    }\n  };\n};\nvar castInstanceType = function (modelDefinition, k, v) {\n  var _a = modelDefinition.fields[k] || {},\n    isArray = _a.isArray,\n    type = _a.type;\n  // attempt to parse stringified JSON\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch (_b) {\n      // if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  }\n  // cast from numeric representation of boolean to JS boolean\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n  return v;\n};\nvar initializeInstance = function (init, modelDefinition, draft) {\n  var modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      k = _b[0],\n      v = _b[1];\n    var parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\nvar createModelClass = function (modelDefinition) {\n  var clazz = /** @class */function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, modelDefinition, draft);\n        // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n        var isInternallyInitialized = instancesMetadata.has(init);\n        var modelInstanceMetadata = isInternallyInitialized ? init : {};\n        var _id = modelInstanceMetadata.id;\n        if (isIdManaged(modelDefinition)) {\n          var isInternalModel = _id !== null && _id !== undefined;\n          var id = isInternalModel ? _id : modelDefinition.syncable ? uuid4() : ulid();\n          draft.id = id;\n        } else if (isIdOptionallyManaged(modelDefinition)) {\n          // only auto-populate if the id was not provided\n          draft.id = draft.id || uuid4();\n        }\n        if (!isInternallyInitialized) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n        var _version = modelInstanceMetadata._version,\n          _lastChangedAt = modelInstanceMetadata._lastChangedAt,\n          _deleted = modelInstanceMetadata._deleted;\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      });\n      return instance;\n    }\n    Model.copyOf = function (source, fn) {\n      var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n      if (!isValidModelConstructor(modelConstructor)) {\n        var msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source: source\n        });\n        throw new Error(msg);\n      }\n      var patches;\n      var model = produce(source, function (draft) {\n        fn(draft);\n        var keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n        // Keys are immutable\n        keyNames.forEach(function (key) {\n          return draft[key] = source[key];\n        });\n        var modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(function (_a) {\n          var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n          var parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n      }, function (p) {\n        return patches = p;\n      });\n      var hasExistingPatches = modelPatchesMap.has(source);\n      if (patches.length || hasExistingPatches) {\n        if (hasExistingPatches) {\n          var _a = __read(modelPatchesMap.get(source), 2),\n            existingPatches = _a[0],\n            existingSource = _a[1];\n          var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n          modelPatchesMap.set(model, [mergedPatches, existingSource]);\n          checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n        } else {\n          modelPatchesMap.set(model, [patches, source]);\n          checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n        }\n      }\n      return attached(model, ModelAttachment.DataStore);\n    };\n    // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n    Model.fromJSON = function (json) {\n      var _this = this;\n      if (Array.isArray(json)) {\n        return json.map(function (init) {\n          return _this.fromJSON(init);\n        });\n      }\n      var instance = modelInstanceCreator(clazz, json);\n      var modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(function (_a) {\n        var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n        modelValidator(k, v);\n      });\n      return attached(instance, ModelAttachment.DataStore);\n    };\n    return Model;\n  }();\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  });\n  var _loop_1 = function (field) {\n    if (!isFieldAssociation(modelDefinition, field)) {\n      return \"continue\";\n    }\n    var _a = modelDefinition.fields[field],\n      type = _a.type,\n      localAssociation = _a.association,\n      _b = _a.association,\n      targetName = _b.targetName,\n      targetNames = _b.targetNames;\n    var relationship = new ModelRelationship({\n      builder: clazz,\n      schema: modelDefinition,\n      pkField: extractPrimaryKeyFieldNames(modelDefinition)\n    }, field);\n    Object.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {\n      set: function (model) {\n        if (!model || !(typeof model === 'object')) return;\n        // Avoid validation error when processing AppSync response with nested\n        // selection set. Nested entitites lack version field and can not be validated\n        // TODO: explore a more reliable method to solve this\n        if (model.hasOwnProperty('_version')) {\n          var modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n          if (!isValidModelConstructor(modelConstructor)) {\n            var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not a valid instance of a model\";\n            logger.error(msg, {\n              model: model\n            });\n            throw new Error(msg);\n          }\n          if (modelConstructor.name.toLowerCase() !== relationship.remoteModelConstructor.name.toLowerCase()) {\n            var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not an instance of \" + relationship.remoteModelConstructor.name;\n            logger.error(msg, {\n              model: model\n            });\n            throw new Error(msg);\n          }\n        }\n        if (relationship.isComplete) {\n          for (var i = 0; i < relationship.localJoinFields.length; i++) {\n            this[relationship.localJoinFields[i]] = model[relationship.remoteJoinFields[i]];\n          }\n          var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);\n          instanceMemos[field] = model;\n        }\n      },\n      get: function () {\n        var _this = this;\n        var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);\n        if (!instanceMemos.hasOwnProperty(field)) {\n          if (getAttachment(this) === ModelAttachment.DataStore) {\n            var resultPromise = instance.query(relationship.remoteModelConstructor, function (base) {\n              return base.and(function (q) {\n                return relationship.remoteJoinFields.map(function (field, index) {\n                  return q[field].eq(_this[relationship.localJoinFields[index]]);\n                });\n              });\n            });\n            if (relationship.type === 'HAS_MANY') {\n              instanceMemos[field] = new AsyncCollection(resultPromise);\n            } else {\n              instanceMemos[field] = resultPromise.then(function (rows) {\n                if (rows.length > 1) {\n                  // should never happen for a HAS_ONE or BELONGS_TO.\n                  var err = new Error(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tData integrity error.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tToo many records found for a HAS_ONE/BELONGS_TO field '\" + modelDefinition.name + \".\" + field + \"'\\n\\t\\t\\t\\t\\t\\t\\t\\t\");\n                  console.error(err);\n                  throw err;\n                } else {\n                  return rows[0];\n                }\n              });\n            }\n          } else if (getAttachment(this) === ModelAttachment.API) {\n            throw new Error('Lazy loading from API is not yet supported!');\n          } else {\n            if (relationship.type === 'HAS_MANY') {\n              return new AsyncCollection([]);\n            } else {\n              return Promise.resolve(undefined);\n            }\n          }\n        }\n        return instanceMemos[field];\n      }\n    });\n  };\n  for (var field in modelDefinition.fields) {\n    _loop_1(field);\n  }\n  return clazz;\n};\nvar AsyncItem = /** @class */function (_super) {\n  __extends(AsyncItem, _super);\n  function AsyncItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return AsyncItem;\n}(Promise);\nexport { AsyncItem };\nvar AsyncCollection = /** @class */function () {\n  function AsyncCollection(values) {\n    this.values = values;\n  }\n  AsyncCollection.prototype[Symbol.asyncIterator] = function () {\n    var _this = this;\n    var values;\n    var index = 0;\n    return {\n      next: function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var result;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!!values) return [3 /*break*/, 2];\n                return [4 /*yield*/, this.values];\n              case 1:\n                values = _a.sent();\n                _a.label = 2;\n              case 2:\n                if (index < values.length) {\n                  result = {\n                    value: values[index],\n                    done: false\n                  };\n                  index++;\n                  return [2 /*return*/, result];\n                }\n                return [2 /*return*/, {\n                  value: null,\n                  done: true\n                }];\n            }\n          });\n        });\n      }\n    };\n  };\n  AsyncCollection.prototype.toArray = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).max,\n      max = _b === void 0 ? Number.MAX_SAFE_INTEGER : _b;\n    var e_4, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var output, i, _d, _e, element, e_4_1;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            output = [];\n            i = 0;\n            _f.label = 1;\n          case 1:\n            _f.trys.push([1, 6, 7, 12]);\n            _d = __asyncValues(this);\n            _f.label = 2;\n          case 2:\n            return [4 /*yield*/, _d.next()];\n          case 3:\n            if (!(_e = _f.sent(), !_e.done)) return [3 /*break*/, 5];\n            element = _e.value;\n            if (i < max) {\n              output.push(element);\n              i++;\n            } else {\n              return [3 /*break*/, 5];\n            }\n            _f.label = 4;\n          case 4:\n            return [3 /*break*/, 2];\n          case 5:\n            return [3 /*break*/, 12];\n          case 6:\n            e_4_1 = _f.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 12];\n          case 7:\n            _f.trys.push([7,, 10, 11]);\n            if (!(_e && !_e.done && (_c = _d.return))) return [3 /*break*/, 9];\n            return [4 /*yield*/, _c.call(_d)];\n          case 8:\n            _f.sent();\n            _f.label = 9;\n          case 9:\n            return [3 /*break*/, 11];\n          case 10:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 11:\n            return [7 /*endfinally*/];\n          case 12:\n            return [2 /*return*/, output];\n        }\n      });\n    });\n  };\n  return AsyncCollection;\n}();\nexport { AsyncCollection };\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n  var modelKeys = Object.keys(draft);\n  var fields = modelDefinition.fields;\n  modelKeys.forEach(function (key) {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n  var patchArray = patches.map(function (p) {\n    return [p.path[0], p.value];\n  });\n  var fields = modelDefinition.fields;\n  patchArray.forEach(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      val = _b[1];\n    if (!val || !fields[key]) return;\n    if (fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\nvar createNonModelClass = function (typeDefinition) {\n  var clazz = /** @class */function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n    return Model;\n  }();\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n  var localModel = conflictData.localModel,\n    modelConstructor = conflictData.modelConstructor,\n    remoteModel = conflictData.remoteModel;\n  var _version = remoteModel._version;\n  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), {\n    _version: _version\n  }));\n}\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  var result;\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n    case USER:\n      result = userClasses[modelName];\n      break;\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n    default:\n      throw new Error(\"Invalid namespace: \" + namespaceName);\n  }\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nfunction checkSchemaVersion(storage, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Setting, modelDefinition;\n    var _this = this;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          Setting = dataStoreClasses.Setting;\n          modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n          return [4 /*yield*/, storage.runExclusive(function (s) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, schemaVersionSetting, storedValue;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, s.query(Setting, ModelPredicateCreator.createFromExisting(modelDefinition, function (c) {\n                      return c.key('eq', SETTING_SCHEMA_VERSION);\n                    }), {\n                      page: 0,\n                      limit: 1\n                    })];\n                  case 1:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                    if (!(schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined)) return [3 /*break*/, 4];\n                    storedValue = JSON.parse(schemaVersionSetting.value);\n                    if (!(storedValue !== version)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, s.clear(false)];\n                  case 2:\n                    _b.sent();\n                    _b.label = 3;\n                  case 3:\n                    return [3 /*break*/, 6];\n                  case 4:\n                    return [4 /*yield*/, s.save(modelInstanceCreator(Setting, {\n                      key: SETTING_SCHEMA_VERSION,\n                      value: JSON.stringify(version)\n                    }))];\n                  case 5:\n                    _b.sent();\n                    _b.label = 6;\n                  case 6:\n                    return [2 /*return*/];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nvar syncSubscription;\nfunction getNamespace() {\n  var namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\nvar DataStoreState;\n(function (DataStoreState) {\n  DataStoreState[\"NotRunning\"] = \"Not Running\";\n  DataStoreState[\"Starting\"] = \"Starting\";\n  DataStoreState[\"Running\"] = \"Running\";\n  DataStoreState[\"Stopping\"] = \"Stopping\";\n  DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\nvar DataStore = /** @class */function () {\n  function DataStore() {\n    var _this = this;\n    // reference to configured category instances. Used for preserving SSR context\n    this.Auth = Auth;\n    this.API = API;\n    this.Cache = Cache;\n    // Non-null assertions (bang operator) have been added to most of these properties\n    // to make TS happy. These properties are all expected to be set immediately after\n    // construction.\n    // TODO: Refactor to use proper DI if possible. If not possible, change these to\n    // optionals and implement conditional checks throughout. Rinse/repeat on all\n    // sync engine processors, storage engine, adapters, etc..\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap();\n    // object that gets passed to descendent classes. Allows us to pass these down by reference\n    this.amplifyContext = {\n      Auth: this.Auth,\n      API: this.API,\n      Cache: this.Cache\n    };\n    /**\n     * **IMPORTANT!**\n     *\n     * Accumulator for background things that can **and MUST** be called when\n     * DataStore stops.\n     *\n     * These jobs **MUST** be *idempotent promises* that resolve ONLY\n     * once the intended jobs are completely finished and/or otherwise destroyed\n     * and cleaned up with ZERO outstanding:\n     *\n     * 1. side effects (e.g., state changes)\n     * 1. callbacks\n     * 1. subscriptions\n     * 1. calls to storage\n     * 1. *etc.*\n     *\n     * Methods that create pending promises, subscriptions, callbacks, or any\n     * type of side effect **MUST** be registered with the manager. And, a new\n     * manager must be created after each `exit()`.\n     *\n     * Failure to comply will put DataStore into a highly unpredictable state\n     * when it needs to stop or clear -- which occurs when restarting with new\n     * sync expressions, during testing, and potentially during app code\n     * recovery handling, etc..\n     *\n     * It is up to the discretion of each disposer whether to wait for job\n     * completion or to cancel operations and issue failures *as long as the\n     * disposer returns in a reasonable amount of time.*\n     *\n     * (Reasonable = *seconds*, not minutes.)\n     */\n    this.runningProcesses = new BackgroundProcessManager();\n    /**\n     * Indicates what state DataStore is in.\n     *\n     * Not [yet?] used for actual state management; but for messaging\n     * when errors occur, to help troubleshoot.\n     */\n    this.state = DataStoreState.NotRunning;\n    /**\n     * If not already done:\n     * 1. Attaches and initializes storage.\n     * 1. Loads the schema and records metadata.\n     * 1. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n     * attaches a sync engine, starts it, and subscribes.\n     */\n    this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n              var _this = this;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    this.state = DataStoreState.Starting;\n                    if (!(this.initialized === undefined)) return [3 /*break*/, 1];\n                    logger.debug('Starting DataStore');\n                    this.initialized = new Promise(function (res, rej) {\n                      _this.initResolve = res;\n                      _this.initReject = rej;\n                    });\n                    return [3 /*break*/, 3];\n                  case 1:\n                    return [4 /*yield*/, this.initialized];\n                  case 2:\n                    _b.sent();\n                    return [2 /*return*/];\n                  case 3:\n                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                    return [4 /*yield*/, this.storage.init()];\n                  case 4:\n                    _b.sent();\n                    checkSchemaInitialized();\n                    return [4 /*yield*/, checkSchemaVersion(this.storage, schema.version)];\n                  case 5:\n                    _b.sent();\n                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                    if (!aws_appsync_graphqlEndpoint) return [3 /*break*/, 7];\n                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                    _a = this;\n                    return [4 /*yield*/, this.processSyncExpressions()];\n                  case 6:\n                    _a.syncPredicates = _b.sent();\n                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                    syncSubscription = this.sync.start({\n                      fullSyncInterval: fullSyncIntervalInMilliseconds\n                    }).subscribe({\n                      next: function (_a) {\n                        var type = _a.type,\n                          data = _a.data;\n                        // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                        // In the Browser, we can begin returning data once subscriptions are in place.\n                        var readyType = isNode ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n                        if (type === readyType) {\n                          _this.initResolve();\n                        }\n                        Hub.dispatch('datastore', {\n                          event: type,\n                          data: data\n                        });\n                      },\n                      error: function (err) {\n                        logger.warn('Sync error', err);\n                        _this.initReject();\n                      }\n                    });\n                    return [3 /*break*/, 8];\n                  case 7:\n                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                      config: this.amplifyConfig\n                    });\n                    this.initResolve();\n                    _b.label = 8;\n                  case 8:\n                    return [4 /*yield*/, this.initialized];\n                  case 9:\n                    _b.sent();\n                    this.state = DataStoreState.Running;\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }, 'datastore start').catch(this.handleAddProcError('DataStore.start()'))];\n        });\n      });\n    };\n    this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var result, msg, modelDefinition, pagination, keyFields, msg, predicate, predicate, seedPredicate, predicate, returnOne;\n              var _a;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _b.sent();\n                    if (!this.storage) {\n                      throw new Error('No storage to query');\n                    }\n                    //#region Input validation\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Constructor is not for a valid model';\n                      logger.error(msg, {\n                        modelConstructor: modelConstructor\n                      });\n                      throw new Error(msg);\n                    }\n                    if (typeof identifierOrCriteria === 'string') {\n                      if (paginationProducer !== undefined) {\n                        logger.warn('Pagination is ignored when querying by id');\n                      }\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Invalid model definition provided!');\n                    }\n                    pagination = this.processPagination(modelDefinition, paginationProducer);\n                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                    if (!isQueryOne(identifierOrCriteria)) return [3 /*break*/, 3];\n                    if (keyFields.length > 1) {\n                      msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                      logger.error(msg, {\n                        keyFields: keyFields\n                      });\n                      throw new Error(msg);\n                    }\n                    predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], identifierOrCriteria);\n                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                  case 2:\n                    result = _b.sent();\n                    return [3 /*break*/, 9];\n                  case 3:\n                    if (!isIdentifierObject(identifierOrCriteria, modelDefinition)) return [3 /*break*/, 5];\n                    predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                  case 4:\n                    result = _b.sent();\n                    return [3 /*break*/, 9];\n                  case 5:\n                    if (!(!identifierOrCriteria || isPredicatesAll(identifierOrCriteria))) return [3 /*break*/, 7];\n                    return [4 /*yield*/, (_a = this.storage) === null || _a === void 0 ? void 0 : _a.query(modelConstructor, undefined, pagination)];\n                  case 6:\n                    result = _b.sent();\n                    return [3 /*break*/, 9];\n                  case 7:\n                    seedPredicate = recursivePredicateFor({\n                      builder: modelConstructor,\n                      schema: modelDefinition,\n                      pkField: getModelPKFieldName(modelConstructor)\n                    });\n                    predicate = internals(identifierOrCriteria(seedPredicate));\n                    return [4 /*yield*/, predicate.fetch(this.storage)];\n                  case 8:\n                    result = _b.sent();\n                    result = inMemoryPagination(result, pagination);\n                    _b.label = 9;\n                  case 9:\n                    returnOne = isQueryOne(identifierOrCriteria) || isIdentifierObject(identifierOrCriteria, modelDefinition);\n                    return [2 /*return*/, attached(returnOne ? result[0] : result, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore query').catch(this.handleAddProcError('DataStore.query()'))];\n        });\n      });\n    };\n    this.save = function (model, condition) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var patchesTuple, modelConstructor, msg, modelDefinition, modelMeta, producedCondition, _a, savedModel;\n              var _this = this;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _b.sent();\n                    if (!this.storage) {\n                      throw new Error('No storage to save to');\n                    }\n                    patchesTuple = modelPatchesMap.get(model);\n                    modelConstructor = model ? model.constructor : undefined;\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Model Definition could not be found for model');\n                    }\n                    modelMeta = {\n                      builder: modelConstructor,\n                      schema: modelDefinition,\n                      pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                    };\n                    return [4 /*yield*/, this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var nonHasManyRelationships, nonHasManyRelationships_1, nonHasManyRelationships_1_1, relationship, queryObject, related, e_5_1;\n                        var e_5, _a;\n                        var _b;\n                        return __generator(this, function (_c) {\n                          switch (_c.label) {\n                            case 0:\n                              nonHasManyRelationships = ModelRelationship.allFrom(modelMeta).filter(function (r) {\n                                return r.type === 'BELONGS_TO';\n                              });\n                              _c.label = 1;\n                            case 1:\n                              _c.trys.push([1, 6, 7, 8]);\n                              nonHasManyRelationships_1 = __values(nonHasManyRelationships), nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                              _c.label = 2;\n                            case 2:\n                              if (!!nonHasManyRelationships_1_1.done) return [3 /*break*/, 5];\n                              relationship = nonHasManyRelationships_1_1.value;\n                              queryObject = relationship.createRemoteQueryObject(model);\n                              if (!(queryObject !== null)) return [3 /*break*/, 4];\n                              return [4 /*yield*/, s.query(relationship.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(relationship.remoteDefinition, queryObject))];\n                            case 3:\n                              related = _c.sent();\n                              if (related.length === 0) {\n                                throw new Error([\"Data integrity error. You tried to save a \" + modelDefinition.name + \" (\" + JSON.stringify(model) + \")\", \"but the instance assigned to the \\\"\" + relationship.field + \"\\\" property\", \"does not exist in the local database. If you're trying to create the related\", \"\\\"\" + ((_b = relationship.remoteDefinition) === null || _b === void 0 ? void 0 : _b.name) + \"\\\", you must save it independently first.\"].join(' '));\n                              }\n                              _c.label = 4;\n                            case 4:\n                              nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                              return [3 /*break*/, 2];\n                            case 5:\n                              return [3 /*break*/, 8];\n                            case 6:\n                              e_5_1 = _c.sent();\n                              e_5 = {\n                                error: e_5_1\n                              };\n                              return [3 /*break*/, 8];\n                            case 7:\n                              try {\n                                if (nonHasManyRelationships_1_1 && !nonHasManyRelationships_1_1.done && (_a = nonHasManyRelationships_1.return)) _a.call(nonHasManyRelationships_1);\n                              } finally {\n                                if (e_5) throw e_5.error;\n                              }\n                              return [7 /*endfinally*/];\n                            case 8:\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 2:\n                    _b.sent();\n                    producedCondition = condition ? internals(condition(predicateFor(modelMeta))).toStoragePredicate() : undefined;\n                    return [4 /*yield*/, this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var saved;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4 /*yield*/, s.save(model, producedCondition, undefined, patchesTuple)];\n                            case 1:\n                              saved = _a.sent();\n                              return [2 /*return*/, s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                          }\n                        });\n                      });\n                    })];\n                  case 3:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                    return [2 /*return*/, attached(savedModel, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore save').catch(this.handleAddProcError('DataStore.save()'))];\n        });\n      });\n    };\n    this.setConflictHandler = function (config) {\n      var configDataStore = config.DataStore;\n      var conflictHandlerIsDefault = function () {\n        return _this.conflictHandler === defaultConflictHandler;\n      };\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n      return _this.conflictHandler || defaultConflictHandler;\n    };\n    this.setErrorHandler = function (config) {\n      var configDataStore = config.DataStore;\n      var errorHandlerIsDefault = function () {\n        return _this.errorHandler === defaultErrorHandler;\n      };\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n      return _this.errorHandler || defaultErrorHandler;\n    };\n    this.delete = function (modelOrConstructor, identifierOrCriteria) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n              return __generator(this, function (_d) {\n                switch (_d.label) {\n                  case 0:\n                    return [4 /*yield*/, this.start()];\n                  case 1:\n                    _d.sent();\n                    if (!this.storage) {\n                      throw new Error('No storage to delete from');\n                    }\n                    if (!modelOrConstructor) {\n                      msg = 'Model or Model Constructor required';\n                      logger.error(msg, {\n                        modelOrConstructor: modelOrConstructor\n                      });\n                      throw new Error(msg);\n                    }\n                    if (!isValidModelConstructor(modelOrConstructor)) return [3 /*break*/, 3];\n                    modelConstructor = modelOrConstructor;\n                    if (!identifierOrCriteria) {\n                      msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                      logger.error(msg, {\n                        identifierOrCriteria: identifierOrCriteria\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Could not find model definition for modelConstructor.');\n                    }\n                    if (typeof identifierOrCriteria === 'string') {\n                      keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                      if (keyFields.length > 1) {\n                        msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                        logger.error(msg, {\n                          keyFields: keyFields\n                        });\n                        throw new Error(msg);\n                      }\n                      condition = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], identifierOrCriteria);\n                    } else {\n                      if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                      } else {\n                        condition = internals(identifierOrCriteria(predicateFor({\n                          builder: modelConstructor,\n                          schema: modelDefinition,\n                          pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                        }))).toStoragePredicate();\n                      }\n                      if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n                        msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                        logger.error(msg, {\n                          condition: condition\n                        });\n                        throw new Error(msg);\n                      }\n                    }\n                    return [4 /*yield*/, this.storage.delete(modelConstructor, condition)];\n                  case 2:\n                    _a = __read.apply(void 0, [_d.sent(), 1]), deleted = _a[0];\n                    return [2 /*return*/, attached(deleted, ModelAttachment.DataStore)];\n                  case 3:\n                    model = modelOrConstructor;\n                    modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    if (!modelDefinition) {\n                      throw new Error('Could not find model definition for modelConstructor.');\n                    }\n                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n                    if (identifierOrCriteria) {\n                      if (typeof identifierOrCriteria !== 'function') {\n                        msg = 'Invalid criteria';\n                        logger.error(msg, {\n                          identifierOrCriteria: identifierOrCriteria\n                        });\n                        throw new Error(msg);\n                      }\n                      condition = internals(identifierOrCriteria(predicateFor({\n                        builder: modelConstructor,\n                        schema: modelDefinition,\n                        pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                      }))).toStoragePredicate(pkPredicate);\n                    } else {\n                      condition = pkPredicate;\n                    }\n                    return [4 /*yield*/, this.storage.delete(model, condition)];\n                  case 4:\n                    _b = __read.apply(void 0, [_d.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                    return [2 /*return*/, attached(deleted, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore delete').catch(this.handleAddProcError('DataStore.delete()'))];\n        });\n      });\n    };\n    this.observe = function (modelOrConstructor, identifierOrCriteria) {\n      var executivePredicate;\n      var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n      if (modelOrConstructor && modelConstructor === undefined) {\n        var model = modelOrConstructor;\n        var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n        if (isValidModelConstructor(modelConstructor_1)) {\n          if (identifierOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model: model,\n              identifierOrCriteria: identifierOrCriteria\n            });\n          }\n          return _this.observe(modelConstructor_1, model.id);\n        } else {\n          var msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model: model\n          });\n          throw new Error(msg);\n        }\n      }\n      // observe should not accept object literal syntax\n      if (identifierOrCriteria && modelConstructor && isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n        var msg = errorMessages.observeWithObjectLiteral;\n        logger.error(msg, {\n          objectLiteral: identifierOrCriteria\n        });\n        throw new Error(msg);\n      }\n      if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n        var msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, identifierOrCriteria);\n        throw new Error(msg);\n      }\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        var msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor: modelConstructor\n        });\n        throw new Error(msg);\n      }\n      if (modelConstructor && typeof identifierOrCriteria === 'string') {\n        var buildIdPredicate = function (seed) {\n          return seed.id.eq(identifierOrCriteria);\n        };\n        executivePredicate = internals(buildIdPredicate(buildSeedPredicate(modelConstructor)));\n      } else if (modelConstructor && typeof identifierOrCriteria === 'function') {\n        executivePredicate = internals(identifierOrCriteria(buildSeedPredicate(modelConstructor)));\n      }\n      return new Observable(function (observer) {\n        var source;\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, this.start()];\n                case 1:\n                  _a.sent();\n                  // Filter the events returned by Storage according to namespace,\n                  // append original element data, and subscribe to the observable\n                  source = this.storage.observe(modelConstructor).filter(function (_a) {\n                    var model = _a.model;\n                    return namespaceResolver(model) === USER;\n                  }).subscribe({\n                    next: function (item) {\n                      return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement, _a;\n                          return __generator(this, function (_b) {\n                            switch (_b.label) {\n                              case 0:\n                                message = item;\n                                if (!(item.opType !== 'DELETE')) return [3 /*break*/, 2];\n                                modelDefinition = getModelDefinition(item.model);\n                                keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                return [4 /*yield*/, this.query(item.model, primaryKeysAndValues)];\n                              case 1:\n                                freshElement = _b.sent();\n                                message = __assign(__assign({}, message), {\n                                  element: freshElement\n                                });\n                                _b.label = 2;\n                              case 2:\n                                _a = !executivePredicate;\n                                if (_a) return [3 /*break*/, 4];\n                                return [4 /*yield*/, executivePredicate.matches(message.element)];\n                              case 3:\n                                _a = _b.sent();\n                                _b.label = 4;\n                              case 4:\n                                if (_a) {\n                                  observer.next(message);\n                                }\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      }, 'datastore observe message handler');\n                    },\n                    error: function (err) {\n                      return observer.error(err);\n                    },\n                    complete: function () {\n                      return observer.complete();\n                    }\n                  });\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, 'datastore observe observable initialization').catch(_this.handleAddProcError('DataStore.observe()')).catch(function (error) {\n          observer.error(error);\n        });\n        // better than no cleaner, but if the subscriber is handling the\n        // complete() message async and not registering with the context,\n        // this will still be problematic.\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (source) {\n                source.unsubscribe();\n              }\n              return [2 /*return*/];\n            });\n          });\n        }, 'DataStore.observe() cleanup');\n      });\n    };\n    this.observeQuery = function (model, criteria, options) {\n      return new Observable(function (observer) {\n        var items = new Map();\n        var itemsChanged = new Map();\n        var deletedItemIds = [];\n        var handle;\n        // let predicate: ModelPredicate<T> | undefined;\n        var executivePredicate;\n        /**\n         * As the name suggests, this geneates a snapshot in the form of\n         * \t`{items: T[], isSynced: boolean}`\n         * and sends it to the observer.\n         *\n         * SIDE EFFECT: The underlying generation and emission methods may touch:\n         * `items`, `itemsChanged`, and `deletedItemIds`.\n         *\n         * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n         */\n        var generateAndEmitSnapshot = function () {\n          var snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        };\n        // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n        var limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        var sort = (options || {}).sort;\n        var sortOptions = sort ? {\n          sort: sort\n        } : undefined;\n        var modelDefinition = getModelDefinition(model);\n        if (!modelDefinition) {\n          throw new Error('Could not find model definition.');\n        }\n        if (model && typeof criteria === 'function') {\n          executivePredicate = internals(criteria(buildSeedPredicate(model)));\n        } else if (isPredicatesAll(criteria)) {\n          executivePredicate = undefined;\n        }\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var err_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n                  return [4 /*yield*/, this.query(model, criteria, sortOptions)];\n                case 1:\n                  // first, query and return any locally-available records\n                  _a.sent().forEach(function (item) {\n                    var itemModelDefinition = getModelDefinition(model);\n                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                    items.set(idOrPk, item);\n                  });\n                  // Observe the model and send a stream of updates (debounced).\n                  // We need to post-filter results instead of passing criteria through\n                  // to have visibility into items that move from in-set to out-of-set.\n                  // We need to explicitly remove those items from the existing snapshot.\n                  handle = this.observe(model).subscribe(function (_a) {\n                    var element = _a.element,\n                      model = _a.model,\n                      opType = _a.opType;\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var itemModelDefinition, idOrPk, _a, isSynced, limit;\n                        var _b, _c;\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              itemModelDefinition = getModelDefinition(model);\n                              idOrPk = getIdentifierValue(itemModelDefinition, element);\n                              _a = executivePredicate;\n                              if (!_a) return [3 /*break*/, 2];\n                              return [4 /*yield*/, executivePredicate.matches(element)];\n                            case 1:\n                              _a = !_d.sent();\n                              _d.label = 2;\n                            case 2:\n                              if (_a) {\n                                if (opType === 'UPDATE' && (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                                  // tracking as a \"deleted item\" will include the item in\n                                  // page limit calculations and ensure it is removed from the\n                                  // final items collection, regardless of which collection(s)\n                                  // it is currently in. (I mean, it could be in both, right!?)\n                                  deletedItemIds.push(idOrPk);\n                                } else {\n                                  // ignore updates for irrelevant/filtered items.\n                                  return [2 /*return*/];\n                                }\n                              }\n                              // Flag items which have been recently deleted\n                              // NOTE: Merging of separate operations to the same model instance is handled upstream\n                              // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                              // depends on the LATEST record (for a given id).\n                              if (opType === 'DELETE') {\n                                deletedItemIds.push(idOrPk);\n                              } else {\n                                itemsChanged.set(idOrPk, element);\n                              }\n                              isSynced = (_c = (_b = this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                              limit = itemsChanged.size - deletedItemIds.length >= this.syncPageSize;\n                              if (limit || isSynced) {\n                                limitTimerRace.resolve();\n                              }\n                              // kicks off every subsequent race as results sync down\n                              limitTimerRace.start();\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    }, 'handle observeQuery observed event');\n                  });\n                  // returns a set of initial/locally-available results\n                  generateAndEmitSnapshot();\n                  return [3 /*break*/, 3];\n                case 2:\n                  err_1 = _a.sent();\n                  observer.error(err_1);\n                  return [3 /*break*/, 3];\n                case 3:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        }, 'datastore observequery startup').catch(_this.handleAddProcError('DataStore.observeQuery()')).catch(function (error) {\n          observer.error(error);\n        });\n        /**\n         * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n         * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n         *\n         * SIDE EFFECT: The shared `items` collection is recreated.\n         */\n        var generateSnapshot = function () {\n          var _a, _b;\n          var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n          var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n          if (options === null || options === void 0 ? void 0 : options.sort) {\n            sortItems(itemsArray);\n          }\n          items.clear();\n          itemsArray.forEach(function (item) {\n            var itemModelDefinition = getModelDefinition(model);\n            var idOrPk = getIdentifierValue(itemModelDefinition, item);\n            items.set(idOrPk, item);\n          });\n          // remove deleted items from the final result set\n          deletedItemIds.forEach(function (idOrPk) {\n            return items.delete(idOrPk);\n          });\n          return {\n            items: Array.from(items.values()),\n            isSynced: isSynced\n          };\n        };\n        /**\n         * Emits the list of items to the observer.\n         *\n         * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n         * for the next snapshot.\n         *\n         * @param snapshot The generated items data to emit.\n         */\n        var emitSnapshot = function (snapshot) {\n          // send the generated snapshot to the primary subscription.\n          // NOTE: This observer's handler *could* be async ...\n          observer.next(snapshot);\n          // reset the changed items sets\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n        /**\n         * Sorts an `Array` of `T` according to the sort instructions given in the\n         * original  `observeQuery()` call.\n         *\n         * @param itemsToSort A array of model type.\n         */\n        var sortItems = function (itemsToSort) {\n          var modelDefinition = getModelDefinition(model);\n          var pagination = _this.processPagination(modelDefinition, options);\n          var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n          if (sortPredicates.length) {\n            var compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        };\n        /**\n         * Force one last snapshot when the model is fully synced.\n         *\n         * This reduces latency for that last snapshot, which will otherwise\n         * wait for the configured timeout.\n         *\n         * @param payload The payload from the Hub event.\n         */\n        var hubCallback = function (_a) {\n          var payload = _a.payload;\n          var _b;\n          var event = payload.event,\n            data = payload.data;\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n            generateAndEmitSnapshot();\n            Hub.remove('datastore', hubCallback);\n          }\n        };\n        Hub.listen('datastore', hubCallback);\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (handle) {\n                handle.unsubscribe();\n              }\n              return [2 /*return*/];\n            });\n          });\n        }, 'datastore observequery cleaner');\n      });\n    };\n    this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n      _this.amplifyContext.Auth = _this.Auth;\n      _this.amplifyContext.API = _this.API;\n      _this.amplifyContext.Cache = _this.Cache;\n      var configDataStore = config.DataStore,\n        configAuthModeStrategyType = config.authModeStrategyType,\n        configConflictHandler = config.conflictHandler,\n        configErrorHandler = config.errorHandler,\n        configMaxRecordsToSync = config.maxRecordsToSync,\n        configSyncPageSize = config.syncPageSize,\n        configFullSyncInterval = config.fullSyncInterval,\n        configSyncExpressions = config.syncExpressions,\n        configAuthProviders = config.authProviders,\n        configStorageAdapter = config.storageAdapter,\n        configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n      _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n      _this.conflictHandler = _this.setConflictHandler(config);\n      _this.errorHandler = _this.setErrorHandler(config);\n      var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n          break;\n        case AuthModeStrategyType.DEFAULT:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n        default:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n      }\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      _this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || _this.syncExpressions;\n      _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || _this.maxRecordsToSync || 10000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n      _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || _this.syncPageSize || 1000;\n      // store on config object, so that Sync, Subscription, and Mutation processors can have access\n      _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n      _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || _this.fullSyncInterval || 24 * 60; // 1 day\n      _this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || _this.storageAdapter || undefined;\n      _this.sessionId = _this.retrieveSessionId();\n    };\n  }\n  DataStore.prototype.getModuleName = function () {\n    return 'DataStore';\n  };\n  /**\n   * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n   * more instructive errors for customers.\n   *\n   * @param operation The name of the operation (usually a Datastore method) the customer\n   * tried to call.\n   */\n  DataStore.prototype.handleAddProcError = function (operation) {\n    var _this = this;\n    /**\n     * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n     * and replaced with a friendlier message that instructs the App Developer.\n     *\n     * @param err An error to test.\n     */\n    var handler = function (err) {\n      if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n        throw new Error([\"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\", \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\", 'Ensure all calls to `stop()` and `clear()` have completed first.', 'If this is not possible, retry the operation until it succeeds.'].join('\\n'));\n      } else {\n        throw err;\n      }\n    };\n    return handler;\n  };\n  /**\n   * Clears all data from storage and removes all data, schema info, other\n   * initialization details, and then stops DataStore.\n   *\n   * That said, reinitialization is required after clearing. This can be done\n   * by explicitiliy calling `start()` or any method that implicitly starts\n   * DataStore, such as `query()`, `save()`, or `delete()`.\n   */\n  DataStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            checkSchemaInitialized();\n            this.state = DataStoreState.Clearing;\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            if (!(this.storage === undefined)) return [3 /*break*/, 3];\n            // connect to storage so that it can be cleared without fully starting DataStore\n            this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n            return [4 /*yield*/, this.storage.init()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n            if (!this.sync) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.sync.stop()];\n          case 4:\n            _a.sent();\n            _a.label = 5;\n          case 5:\n            return [4 /*yield*/, this.storage.clear()];\n          case 6:\n            _a.sent();\n            this.initialized = undefined; // Should re-initialize when start() is called.\n            this.storage = undefined;\n            this.sync = undefined;\n            this.syncPredicates = new WeakMap();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 7:\n            _a.sent();\n            this.state = DataStoreState.NotRunning;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Stops all DataStore sync activities.\n   *\n   * TODO: \"Waits for graceful termination of\n   * running queries and terminates subscriptions.\"\n   */\n  DataStore.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.state = DataStoreState.Stopping;\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n            if (!this.sync) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.sync.stop()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            this.initialized = undefined; // Should re-initialize when start() is called.\n            this.sync = undefined;\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 4:\n            _a.sent();\n            this.state = DataStoreState.NotRunning;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Validates given pagination input from a query and creates a pagination\n   * argument for use against the storage layer.\n   *\n   * @param modelDefinition\n   * @param paginationProducer\n   */\n  DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n    var sortPredicate;\n    var _a = paginationProducer || {},\n      limit = _a.limit,\n      page = _a.page,\n      sort = _a.sort;\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, sort);\n    }\n    return {\n      limit: limit,\n      page: page,\n      sort: sortPredicate\n    };\n  };\n  /**\n   * Examines the configured `syncExpressions` and produces a WeakMap of\n   * SchemaModel -> predicate to use during sync.\n   */\n  DataStore.prototype.processSyncExpressions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var syncPredicates;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.syncExpressions || !this.syncExpressions.length) {\n              return [2 /*return*/, new WeakMap()];\n            }\n            return [4 /*yield*/, Promise.all(this.syncExpressions.map(function (syncExpression) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4 /*yield*/, syncExpression];\n                    case 1:\n                      _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                      modelDefinition = getModelDefinition(modelConstructor);\n                      return [4 /*yield*/, this.unwrapPromise(conditionProducer)];\n                    case 2:\n                      condition = _b.sent();\n                      if (isPredicatesAll(condition)) {\n                        return [2 /*return*/, [modelDefinition, null]];\n                      }\n                      predicate = internals(condition(predicateFor({\n                        builder: modelConstructor,\n                        schema: modelDefinition,\n                        pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                      }))).toStoragePredicate();\n                      return [2 /*return*/, [modelDefinition, predicate]];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            syncPredicates = _a.sent();\n            return [2 /*return*/, this.weakMapFromEntries(syncPredicates)];\n        }\n      });\n    });\n  };\n  DataStore.prototype.createFromCondition = function (modelDefinition, condition) {\n    try {\n      return ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n    } catch (error) {\n      logger.error('Error creating Sync Predicate');\n      throw error;\n    }\n  };\n  DataStore.prototype.unwrapPromise = function (conditionProducer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var condition, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, conditionProducer()];\n          case 1:\n            condition = _a.sent();\n            return [2 /*return*/, condition || conditionProducer];\n          case 2:\n            error_1 = _a.sent();\n            if (error_1 instanceof TypeError) {\n              return [2 /*return*/, conditionProducer];\n            }\n            throw error_1;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.weakMapFromEntries = function (entries) {\n    return entries.reduce(function (map, _a) {\n      var _b = __read(_a, 2),\n        modelDefinition = _b[0],\n        predicate = _b[1];\n      if (map.has(modelDefinition)) {\n        var name_2 = modelDefinition.name;\n        logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n        return map;\n      }\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n      return map;\n    }, new WeakMap());\n  };\n  /**\n   * A session ID to allow CMS to open databases against multiple apps.\n   * This session ID is only expected be set by AWS Amplify Studio.\n   */\n  DataStore.prototype.retrieveSessionId = function () {\n    try {\n      var sessionId = sessionStorage.getItem('datastoreSessionId');\n      if (sessionId) {\n        var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n        var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n        var _a = __read(appSyncUrl.split('.'), 1),\n          appSyncId = _a[0];\n        return sessionId + \"-\" + appSyncId;\n      }\n    } catch (_b) {}\n    return undefined;\n  };\n  return DataStore;\n}();\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };","map":{"version":3,"mappings":"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","names":["API","Auth","Cache","Amplify","ConsoleLogger","Logger","Hub","browserOrNode","BackgroundProcessManager","immerable","produce","setAutoFreeze","enablePatches","v4","uuid4","Observable","defaultAuthStrategy","multiAuthStrategy","isPredicatesAll","ModelPredicateCreator","ModelSortPredicateCreator","ExclusiveStorage","Storage","ModelRelationship","ControlMessage","SyncEngine","GraphQLScalarType","isGraphQLScalarType","isSchemaModelWithAttributes","AuthModeStrategyType","isNonModelFieldType","isModelFieldType","isIdentifierObject","isFieldAssociation","DATASTORE","errorMessages","establishRelationAndKeys","isModelConstructor","monotonicUlidFactory","STORAGE","SYNC","USER","isNullOrUndefined","registerNonModelClass","sortCompareFunction","DeferredCallbackResolver","inMemoryPagination","extractPrimaryKeyFieldNames","extractPrimaryKeysAndValues","isIdManaged","isIdOptionallyManaged","mergePatches","recursivePredicateFor","predicateFor","internals","getIdentifierValue","logger","ulid","Date","now","SETTING_SCHEMA_VERSION","schema","modelNamespaceMap","WeakMap","modelPatchesMap","getModelDefinition","modelConstructor","namespace","get","definition","namespaces","models","name","undefined","indexes","relationships","indexFields","Set","index","indexField","add","fields","Object","fromEntries","__spread","values","map","type","isArray","getModelPKFieldName","keys","primaryKey","isValidModelConstructor","obj","has","namespaceResolver","resolver","Error","buildSeedPredicate","modelSchema","pks","builder","pkField","syncClasses","userClasses","dataStoreClasses","storageClasses","modelInstanceAssociationsMap","ModelAttachment","attachedModelInstances","attached","result","attachment","Array","record","set","getAttachment","instance","Detached","initSchema","userSchema","console","warn","log","checkSchemaCodegenVersion","codegenVersion","internalUserNamespace","createTypeClasses","dataStoreNamespace","getNamespace","storageNamespace","syncNamespace","_a","version","forEach","relations","modelAssociations","Map","connectedModels","model","filter","association","field","connectionType","push","getOwnPropertyDescriptor","defineProperty","count","size","from","modelName","parents","every","x","delete","modelTopologicalOrdering","checkSchemaInitialized","message","error","majorVersion","minorVersion","isValid","versionParts","split","major","minor","patch","patchrevision","Number","err","classes","entries","_b","modelDefinition","clazz","createModelClass","nonModels","typeName","typeDefinition","createNonModelClass","instancesMetadata","WeakSet","modelInstanceCreator","init","validateModelFields","k","v","fieldDefinition","isRequired_1","isArrayNullable","name_1","includes","idEmptyString","value","type_1","jsType_1","getJSType","validateScalar_1","getValidationFunction","JSON","parse","errorTypeText","some","e","elemTypes","join","validationStatus","subNonModelDefinition_1","user","nonModel","modelValidator_1","item","subKey","castInstanceType","Boolean","initializeInstance","draft","modelValidator","parsedValue","isInternallyInitialized","modelInstanceMetadata","isInternalModel","_id","id","syncable","checkReadOnlyPropertyOnCreate","_lastChangedAt","_deleted","_version","Model","source","fn","getPrototypeOf","constructor","msg","patches","keyNames","key","p","hasExistingPatches","length","existingPatches","existingSource","mergedPatches","checkReadOnlyPropertyOnUpdate","DataStore","json","fromJSON","localAssociation","targetName","targetNames","relationship","prototype","hasOwnProperty","toLowerCase","remoteModelConstructor","isComplete","i","localJoinFields","remoteJoinFields","instanceMemos","resultPromise","query","and","q","eq","_this","AsyncCollection","then","rows","Promise","resolve","__extends","Symbol","asyncIterator","next","done","max","output","_d","element","modelKeys","isReadOnly","patchArray","path","val","isQueryOne","defaultConflictHandler","conflictData","remoteModel","localModel","defaultErrorHandler","getModelConstructorByModelName","namespaceName","checkSchemaVersion","storage","Setting","runExclusive","s","createFromExisting","page","limit","schemaVersionSetting","storedValue","clear","save","stringify","syncSubscription","enums","pluralName","isRequired","DataStoreState","NotRunning","runningProcesses","state","Starting","initialized","debug","res","rej","initResolve","initReject","storageAdapter","sessionId","aws_appsync_graphqlEndpoint","amplifyConfig","processSyncExpressions","syncPredicates","sync","conflictHandler","errorHandler","authModeStrategy","amplifyContext","connectivityMonitor","fullSyncIntervalInMilliseconds","fullSyncInterval","start","subscribe","data","readyType","isNode","SYNC_ENGINE_SYNC_QUERIES_READY","SYNC_ENGINE_STORAGE_SUBSCRIBED","dispatch","event","config","Running","catch","handleAddProcError","identifierOrCriteria","paginationProducer","pagination","processPagination","keyFields","queryByPkWithCompositeKeyPresent","predicate","createForSingleField","createForPk","seedPredicate","fetch","returnOne","condition","patchesTuple","modelMeta","nonHasManyRelationships","allFrom","nonHasManyRelationships_1","queryObject","createRemoteQueryObject","createFromFlatEqualities","remoteDefinition","related","_c","producedCondition","toStoragePredicate","saved","savedModel","conflictHandlerIsDefault","configDataStore","errorHandlerIsDefault","modelOrConstructor","deleteByPkWithCompositeKeyPresent","isValidPredicate","deleted","pkPredicate","executivePredicate","modelConstructor_1","observe","observeWithObjectLiteral","objectLiteral","buildIdPredicate","isOpen","opType","primaryKeysAndValues","freshElement","matches","observer","complete","addCleaner","unsubscribe","criteria","options","items","itemsChanged","deletedItemIds","handle","generateAndEmitSnapshot","snapshot","generateSnapshot","emitSnapshot","limitTimerRace","callback","maxInterval","sortOptions","sort","itemModelDefinition","idOrPk","isSynced","getModelSyncedStatus","syncPageSize","err_1","itemsArray","sortItems","itemsToSort","sortPredicates","getPredicates","compareFn","hubCallback","payload","SYNC_ENGINE_MODEL_SYNCED","remove","listen","configAuthModeStrategyType","configConflictHandler","configErrorHandler","configMaxRecordsToSync","configSyncPageSize","configFullSyncInterval","configSyncExpressions","configAuthProviders","configStorageAdapter","configFromAmplify","setConflictHandler","setErrorHandler","authModeStrategyType","DEFAULT","MULTI_AUTH","authProviders","syncExpressions","maxRecordsToSync","retrieveSessionId","operation","handler","startsWith","Clearing","close","closed","stop","open","Stopping","sortPredicate","all","syncExpression","conditionProducer","unwrapPromise","weakMapFromEntries","error_1","TypeError","reduce","name_2","sessionStorage","getItem","appSyncUrl","appSyncId","register","DataStoreClass"],"sources":["/frontend-react-js/node_modules/@aws-amplify/datastore/src/datastore/datastore.ts"],"sourcesContent":["import { API } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tHub,\n\tbrowserOrNode,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport {\n\tDraft,\n\timmerable,\n\tproduce,\n\tsetAutoFreeze,\n\tenablePatches,\n\tPatch,\n} from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport {\n\tisPredicatesAll,\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n\tPredicateAll,\n} from '../predicates';\nimport { Adapter } from '../storage/adapter';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ModelRelationship } from '../storage/relationship';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport {\n\tAuthModeStrategy,\n\tConflictHandler,\n\tDataStoreConfig,\n\tGraphQLScalarType,\n\tInternalSchema,\n\tisGraphQLScalarType,\n\tisSchemaModelWithAttributes,\n\tModelFieldType,\n\tModelInit,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tModelField,\n\tSortPredicate,\n\tMutableModel,\n\tNamespaceResolver,\n\tNonModelTypeConstructor,\n\tProducerPaginationInput,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tProducerModelPredicate,\n\tSchema,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tSubscriptionMessage,\n\tDataStoreSnapshot,\n\tSyncConflict,\n\tSyncError,\n\tTypeConstructorMap,\n\tErrorHandler,\n\tSyncExpression,\n\tAuthModeStrategyType,\n\tisNonModelFieldType,\n\tisModelFieldType,\n\tObserveQueryOptions,\n\tManagedIdentifier,\n\tPersistentModelMetaData,\n\tIdentifierFieldOrIdentifierObject,\n\tisIdentifierObject,\n\tAmplifyContext,\n\tisFieldAssociation,\n} from '../types';\n// tslint:disable:no-duplicate-imports\nimport type { __modelMeta__ } from '../types';\n\nimport {\n\tDATASTORE,\n\terrorMessages,\n\testablishRelationAndKeys,\n\tisModelConstructor,\n\tmonotonicUlidFactory,\n\tNAMESPACES,\n\tSTORAGE,\n\tSYNC,\n\tUSER,\n\tisNullOrUndefined,\n\tregisterNonModelClass,\n\tsortCompareFunction,\n\tDeferredCallbackResolver,\n\tinMemoryPagination,\n\textractPrimaryKeyFieldNames,\n\textractPrimaryKeysAndValues,\n\tisIdManaged,\n\tisIdOptionallyManaged,\n\tmergePatches,\n} from '../util';\nimport {\n\tRecursiveModelPredicateExtender,\n\tModelPredicateExtender,\n\trecursivePredicateFor,\n\tpredicateFor,\n\tGroupCondition,\n\tinternals,\n} from '../predicates/next';\nimport { getIdentifierValue } from '../sync/utils';\nimport DataStoreConnectivity from '../sync/datastoreConnectivity';\n\nsetAutoFreeze(true);\nenablePatches();\n\nconst logger = new Logger('DataStore');\n\nconst ulid = monotonicUlidFactory(Date.now());\nconst { isNode } = browserOrNode();\n\ntype SettingMetaData = {\n\tidentifier: ManagedIdentifier<Setting, 'id'>;\n\treadOnlyFields: never;\n};\ndeclare class Setting {\n\tpublic readonly [__modelMeta__]: SettingMetaData;\n\tconstructor(init: ModelInit<Setting, SettingMetaData>);\n\tstatic copyOf(\n\t\tsrc: Setting,\n\t\tmutator: (draft: MutableModel<Setting, SettingMetaData>) => void | Setting\n\t): Setting;\n\tpublic readonly id: string;\n\tpublic readonly key: string;\n\tpublic readonly value: string;\n}\n\nconst SETTING_SCHEMA_VERSION = 'schemaVersion';\n\nlet schema: InternalSchema;\nconst modelNamespaceMap = new WeakMap<\n\tPersistentModelConstructor<any>,\n\tstring\n>();\n// stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\nconst modelPatchesMap = new WeakMap<\n\tPersistentModel,\n\t[Patch[], PersistentModel]\n>();\n\nconst getModelDefinition = (\n\tmodelConstructor: PersistentModelConstructor<any>\n) => {\n\tconst namespace = modelNamespaceMap.get(modelConstructor)!;\n\tconst definition = namespace\n\t\t? schema.namespaces[namespace].models[modelConstructor.name]\n\t\t: undefined;\n\n\t// compatibility with legacy/pre-PK codegen for lazy loading to inject\n\t// index fields into the model definition.\n\tif (definition) {\n\t\tconst indexes =\n\t\t\tschema.namespaces[namespace].relationships![modelConstructor.name]\n\t\t\t\t.indexes;\n\n\t\tconst indexFields = new Set<string>();\n\t\tfor (const index of indexes) {\n\t\t\tfor (const indexField of index[1]) {\n\t\t\t\tindexFields.add(indexField);\n\t\t\t}\n\t\t}\n\n\t\tdefinition.fields = {\n\t\t\t...Object.fromEntries(\n\t\t\t\t[...indexFields.values()].map(\n\t\t\t\t\tname => [\n\t\t\t\t\t\tname,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t[]\n\t\t\t\t)\n\t\t\t),\n\t\t\t...definition.fields,\n\t\t};\n\t}\n\n\treturn definition;\n};\n\nconst getModelPKFieldName = (\n\tmodelConstructor: PersistentModelConstructor<any>\n) => {\n\tconst namespace = modelNamespaceMap.get(modelConstructor);\n\treturn (\n\t\t(namespace &&\n\t\t\tschema.namespaces?.[namespace]?.keys?.[modelConstructor.name]\n\t\t\t\t.primaryKey) || ['id']\n\t);\n};\n\nconst isValidModelConstructor = <T extends PersistentModel>(\n\tobj: any\n): obj is PersistentModelConstructor<T> => {\n\tif (isModelConstructor(obj) && modelNamespaceMap.has(obj)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nconst namespaceResolver: NamespaceResolver = modelConstructor => {\n\tconst resolver = modelNamespaceMap.get(modelConstructor);\n\tif (!resolver) {\n\t\tthrow new Error(\n\t\t\t`Namespace Resolver for '${modelConstructor.name}' not found! This is probably a bug in '@amplify-js/datastore'.`\n\t\t);\n\t}\n\treturn resolver;\n};\n\nconst buildSeedPredicate = <T extends PersistentModel>(\n\tmodelConstructor: PersistentModelConstructor<T>\n) => {\n\tif (!modelConstructor) throw new Error('Missing modelConstructor');\n\n\tconst modelSchema = getModelDefinition(\n\t\tmodelConstructor as PersistentModelConstructor<T>\n\t);\n\tif (!modelSchema) throw new Error('Missing modelSchema');\n\n\tconst pks = getModelPKFieldName(\n\t\tmodelConstructor as PersistentModelConstructor<T>\n\t);\n\tif (!pks) throw new Error('Could not determine PK');\n\n\treturn recursivePredicateFor<T>({\n\t\tbuilder: modelConstructor as PersistentModelConstructor<T>,\n\t\tschema: modelSchema,\n\t\tpkField: pks,\n\t});\n};\n\n// exporting syncClasses for testing outbox.test.ts\nexport let syncClasses: TypeConstructorMap;\nlet userClasses: TypeConstructorMap;\nlet dataStoreClasses: TypeConstructorMap;\nlet storageClasses: TypeConstructorMap;\n\n/**\n * Maps a model to its related models for memoization/immutability.\n */\nconst modelInstanceAssociationsMap = new WeakMap<PersistentModel, object>();\n\n/**\n * Describes whether and to what a model is attached for lazy loading purposes.\n */\nenum ModelAttachment {\n\t/**\n\t * Model doesn't lazy load from any data source.\n\t *\n\t * Related entity properties provided at instantiation are returned\n\t * via the respective lazy interfaces when their properties are invoked.\n\t */\n\tDetached = 'Detached',\n\n\t/**\n\t * Model lazy loads from the global DataStore.\n\t */\n\tDataStore = 'DataStore',\n\n\t/**\n\t * Demonstrative. Not yet implemented.\n\t */\n\tAPI = 'API',\n}\n\n/**\n * Tells us which data source a model is attached to (lazy loads from).\n *\n * If `Deatched`, the model's lazy properties will only ever return properties\n * from memory provided at construction time.\n */\nconst attachedModelInstances = new WeakMap<PersistentModel, ModelAttachment>();\n\n/**\n * Registers a model instance against a data source (DataStore, API, or\n * Detached/None).\n *\n * The API option is demonstrative. Lazy loading against API is not yet\n * implemented.\n *\n * @param result A model instance or array of instances\n * @param attachment A ModelAttachment data source\n * @returns passes the `result` back through after attachment\n */\nexport function attached<T extends PersistentModel | PersistentModel[]>(\n\tresult: T,\n\tattachment: ModelAttachment\n): T {\n\tif (Array.isArray(result)) {\n\t\tresult.map(record => attached(record, attachment)) as T;\n\t} else {\n\t\tresult && attachedModelInstances.set(result, attachment);\n\t}\n\treturn result;\n}\n\n/**\n * Determines what source a model instance should lazy load from.\n *\n * If the instace was never explicitly registered, it is detached by default.\n *\n * @param instance A model instance\n */\nexport const getAttachment = (instance: PersistentModel) => {\n\treturn attachedModelInstances.has(instance)\n\t\t? attachedModelInstances.get(instance)\n\t\t: ModelAttachment.Detached;\n};\n\nconst initSchema = (userSchema: Schema) => {\n\tif (schema !== undefined) {\n\t\tconsole.warn('The schema has already been initialized');\n\n\t\treturn userClasses;\n\t}\n\n\tlogger.log('validating schema', { schema: userSchema });\n\n\tcheckSchemaCodegenVersion(userSchema.codegenVersion);\n\n\tconst internalUserNamespace: SchemaNamespace = {\n\t\tname: USER,\n\t\t...userSchema,\n\t};\n\n\tlogger.log('DataStore', 'Init models');\n\tuserClasses = createTypeClasses(internalUserNamespace);\n\tlogger.log('DataStore', 'Models initialized');\n\n\tconst dataStoreNamespace = getNamespace();\n\tconst storageNamespace = Storage.getNamespace();\n\tconst syncNamespace = SyncEngine.getNamespace();\n\n\tdataStoreClasses = createTypeClasses(dataStoreNamespace);\n\tstorageClasses = createTypeClasses(storageNamespace);\n\tsyncClasses = createTypeClasses(syncNamespace);\n\n\tschema = {\n\t\tnamespaces: {\n\t\t\t[dataStoreNamespace.name]: dataStoreNamespace,\n\t\t\t[internalUserNamespace.name]: internalUserNamespace,\n\t\t\t[storageNamespace.name]: storageNamespace,\n\t\t\t[syncNamespace.name]: syncNamespace,\n\t\t},\n\t\tversion: userSchema.version,\n\t\tcodegenVersion: userSchema.codegenVersion,\n\t};\n\n\tObject.keys(schema.namespaces).forEach(namespace => {\n\t\tconst [relations, keys] = establishRelationAndKeys(\n\t\t\tschema.namespaces[namespace]\n\t\t);\n\n\t\tschema.namespaces[namespace].relationships = relations;\n\t\tschema.namespaces[namespace].keys = keys;\n\n\t\tconst modelAssociations = new Map<string, string[]>();\n\n\t\tObject.values(schema.namespaces[namespace].models).forEach(model => {\n\t\t\tconst connectedModels: string[] = [];\n\n\t\t\tObject.values(model.fields)\n\t\t\t\t.filter(\n\t\t\t\t\tfield =>\n\t\t\t\t\t\tfield.association &&\n\t\t\t\t\t\tfield.association.connectionType === 'BELONGS_TO' &&\n\t\t\t\t\t\t(<ModelFieldType>field.type).model !== model.name\n\t\t\t\t)\n\t\t\t\t.forEach(field =>\n\t\t\t\t\tconnectedModels.push((<ModelFieldType>field.type).model)\n\t\t\t\t);\n\n\t\t\tmodelAssociations.set(model.name, connectedModels);\n\n\t\t\tObject.values(model.fields).forEach(field => {\n\t\t\t\tif (\n\t\t\t\t\ttypeof field.type === 'object' &&\n\t\t\t\t\t!Object.getOwnPropertyDescriptor(\n\t\t\t\t\t\t<ModelFieldType>field.type,\n\t\t\t\t\t\t'modelConstructor'\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tObject.defineProperty(field.type, 'modelConstructor', {\n\t\t\t\t\t\tget: () => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tbuilder: userClasses[(<ModelFieldType>field.type).model],\n\t\t\t\t\t\t\t\tschema:\n\t\t\t\t\t\t\t\t\tschema.namespaces[namespace].models[\n\t\t\t\t\t\t\t\t\t\t(<ModelFieldType>field.type).model\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tpkField: getModelPKFieldName(\n\t\t\t\t\t\t\t\t\tuserClasses[\n\t\t\t\t\t\t\t\t\t\t(<ModelFieldType>field.type).model\n\t\t\t\t\t\t\t\t\t] as PersistentModelConstructor<any>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst result = new Map<string, string[]>();\n\n\t\tlet count = 1000;\n\t\twhile (true && count > 0) {\n\t\t\tif (modelAssociations.size === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount--;\n\t\t\tif (count === 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Models are not topologically sortable. Please verify your schema.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const modelName of Array.from(modelAssociations.keys())) {\n\t\t\t\tconst parents = modelAssociations.get(modelName);\n\n\t\t\t\tif (parents?.every(x => result.has(x))) {\n\t\t\t\t\tresult.set(modelName, parents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tArray.from(result.keys()).forEach(x => modelAssociations.delete(x));\n\t\t}\n\n\t\tschema.namespaces[namespace].modelTopologicalOrdering = result;\n\t});\n\n\treturn userClasses;\n};\n\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nconst checkSchemaInitialized = () => {\n\tif (schema === undefined) {\n\t\tconst message =\n\t\t\t'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n\t\tlogger.error(message);\n\t\tthrow new Error(message);\n\t}\n};\n\n/**\n * Throws an exception if the schema is using a codegen version that is not supported.\n *\n * Set the supported version by setting majorVersion and minorVersion\n * This functions similar to ^ version range.\n * The tested codegenVersion major version must exactly match the set majorVersion\n * The tested codegenVersion minor version must be gt or equal to the set minorVersion\n * Example: For a min supported version of 5.4.0 set majorVersion = 5 and minorVersion = 4\n *\n * This regex will not work when setting a supported range with minor version\n * of 2 or more digits.\n * i.e. minorVersion = 10 will not work\n * The regex will work for testing a codegenVersion with multi digit minor\n * versions as long as the minimum minorVersion is single digit.\n * i.e. codegenVersion = 5.30.1, majorVersion = 5, minorVersion = 4 PASSES\n *\n * @param codegenVersion schema codegenVersion\n */\nconst checkSchemaCodegenVersion = (codegenVersion: string) => {\n\t// TODO: set to correct version when released in codegen\n\tconst majorVersion = 3;\n\tconst minorVersion = 2;\n\tlet isValid = false;\n\n\ttry {\n\t\tconst versionParts = codegenVersion.split('.');\n\t\tconst [major, minor, patch, patchrevision] = versionParts;\n\t\tisValid = Number(major) === majorVersion && Number(minor) >= minorVersion;\n\t} catch (err) {\n\t\tconsole.log(`Error parsing codegen version: ${codegenVersion}\\n${err}`);\n\t}\n\n\tif (!isValid) {\n\t\tconst message =\n\t\t\t`Models were generated with an unsupported version of codegen. Codegen artifacts are from ${\n\t\t\t\tcodegenVersion || 'an unknown version'\n\t\t\t}, whereas ^${majorVersion}.${minorVersion}.0 is required. ` +\n\t\t\t\"Update to the latest CLI and run 'amplify codegen models'.\";\n\t\tlogger.error(message);\n\t\tthrow new Error(message);\n\t}\n};\n\nconst createTypeClasses: (\n\tnamespace: SchemaNamespace\n) => TypeConstructorMap = namespace => {\n\tconst classes: TypeConstructorMap = {};\n\n\tObject.entries(namespace.models).forEach(([modelName, modelDefinition]) => {\n\t\tconst clazz = createModelClass(modelDefinition);\n\t\tclasses[modelName] = clazz;\n\n\t\tmodelNamespaceMap.set(clazz, namespace.name);\n\t});\n\n\tObject.entries(namespace.nonModels || {}).forEach(\n\t\t([typeName, typeDefinition]) => {\n\t\t\tconst clazz = createNonModelClass(typeDefinition) as any;\n\t\t\tclasses[typeName] = clazz;\n\t\t}\n\t);\n\n\treturn classes;\n};\n\n/**\n * Constructs a model and records it with its metadata in a weakset. Allows for\n * the separate storage of core model fields and Amplify/DataStore metadata\n * fields that the customer app does not want exposed.\n *\n * @param modelConstructor The model constructor.\n * @param init Init data that would normally be passed to the constructor.\n * @returns The initialized model.\n */\nexport declare type ModelInstanceCreator = typeof modelInstanceCreator;\n\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nconst instancesMetadata = new WeakSet<ModelInit<any, any>>();\n\nfunction modelInstanceCreator<T extends PersistentModel>(\n\tmodelConstructor: PersistentModelConstructor<T>,\n\tinit: Partial<T>\n): T {\n\tinstancesMetadata.add(init);\n\n\treturn new modelConstructor(<ModelInit<T, PersistentModelMetaData<T>>>init);\n}\n\nconst validateModelFields =\n\t(modelDefinition: SchemaModel | SchemaNonModel) => (k: string, v: any) => {\n\t\tconst fieldDefinition = modelDefinition.fields[k];\n\n\t\tif (fieldDefinition !== undefined) {\n\t\t\tconst { type, isRequired, isArrayNullable, name, isArray } =\n\t\t\t\tfieldDefinition;\n\n\t\t\tif (\n\t\t\t\t((!isArray && isRequired) || (isArray && !isArrayNullable)) &&\n\t\t\t\t(v === null || v === undefined)\n\t\t\t) {\n\t\t\t\tthrow new Error(`Field ${name} is required`);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tisSchemaModelWithAttributes(modelDefinition) &&\n\t\t\t\t!isIdManaged(modelDefinition)\n\t\t\t) {\n\t\t\t\tconst keys = extractPrimaryKeyFieldNames(modelDefinition);\n\t\t\t\tif (keys.includes(k) && v === '') {\n\t\t\t\t\tlogger.error(errorMessages.idEmptyString, { k, value: v });\n\t\t\t\t\tthrow new Error(errorMessages.idEmptyString);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isGraphQLScalarType(type)) {\n\t\t\t\tconst jsType = GraphQLScalarType.getJSType(type);\n\t\t\t\tconst validateScalar = GraphQLScalarType.getValidationFunction(type);\n\n\t\t\t\tif (type === 'AWSJSON') {\n\t\t\t\t\tif (typeof v === jsType) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof v === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tJSON.parse(v);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new Error(`Field ${name} is an invalid JSON object. ${v}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isArray) {\n\t\t\t\t\tlet errorTypeText: string = jsType;\n\t\t\t\t\tif (!isRequired) {\n\t\t\t\t\t\terrorTypeText = `${jsType} | null | undefined`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!Array.isArray(v) && !isArrayNullable) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isNullOrUndefined(v) &&\n\t\t\t\t\t\t(<[]>v).some(e =>\n\t\t\t\t\t\t\tisNullOrUndefined(e) ? isRequired : typeof e !== jsType\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst elemTypes = (<[]>v)\n\t\t\t\t\t\t\t.map(e => (e === null ? 'null' : typeof e))\n\t\t\t\t\t\t\t.join(',');\n\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`All elements in the ${name} array should be of type ${errorTypeText}, [${elemTypes}] received. ${v}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (validateScalar && !isNullOrUndefined(v)) {\n\t\t\t\t\t\tconst validationStatus = (<[]>v).map(e => {\n\t\t\t\t\t\t\tif (!isNullOrUndefined(e)) {\n\t\t\t\t\t\t\t\treturn validateScalar(e);\n\t\t\t\t\t\t\t} else if (isNullOrUndefined(e) && !isRequired) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!validationStatus.every(s => s)) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`All elements in the ${name} array should be of type ${type}, validation failed for one or more elements. ${v}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (!isRequired && v === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (typeof v !== jsType && v !== null) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Field ${name} should be of type ${jsType}, ${typeof v} received. ${v}`\n\t\t\t\t\t);\n\t\t\t\t} else if (\n\t\t\t\t\t!isNullOrUndefined(v) &&\n\t\t\t\t\tvalidateScalar &&\n\t\t\t\t\t!validateScalar(v as never) // TODO: why never, TS ... why ...\n\t\t\t\t) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Field ${name} should be of type ${type}, validation failed. ${v}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (isNonModelFieldType(type)) {\n\t\t\t\t// do not check non model fields if undefined or null\n\t\t\t\tif (!isNullOrUndefined(v)) {\n\t\t\t\t\tconst subNonModelDefinition =\n\t\t\t\t\t\tschema.namespaces.user.nonModels![type.nonModel];\n\t\t\t\t\tconst modelValidator = validateModelFields(subNonModelDefinition);\n\n\t\t\t\t\tif (isArray) {\n\t\t\t\t\t\tlet errorTypeText: string = type.nonModel;\n\t\t\t\t\t\tif (!isRequired) {\n\t\t\t\t\t\t\terrorTypeText = `${type.nonModel} | null | undefined`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!Array.isArray(v)) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tv.forEach(item => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(isNullOrUndefined(item) && isRequired) ||\n\t\t\t\t\t\t\t\t(typeof item !== 'object' && typeof item !== 'undefined')\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`All elements in the ${name} array should be of type ${\n\t\t\t\t\t\t\t\t\t\ttype.nonModel\n\t\t\t\t\t\t\t\t\t}, [${typeof item}] received. ${item}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!isNullOrUndefined(item)) {\n\t\t\t\t\t\t\t\tObject.keys(subNonModelDefinition.fields).forEach(subKey => {\n\t\t\t\t\t\t\t\t\tmodelValidator(subKey, item[subKey]);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (typeof v !== 'object') {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Field ${name} should be of type ${\n\t\t\t\t\t\t\t\t\ttype.nonModel\n\t\t\t\t\t\t\t\t}, ${typeof v} recieved. ${v}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.keys(subNonModelDefinition.fields).forEach(subKey => {\n\t\t\t\t\t\t\tmodelValidator(subKey, v[subKey]);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\nconst castInstanceType = (\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tk: string,\n\tv: any\n) => {\n\tconst { isArray, type } = modelDefinition.fields[k] || {};\n\t// attempt to parse stringified JSON\n\tif (\n\t\ttypeof v === 'string' &&\n\t\t(isArray ||\n\t\t\ttype === 'AWSJSON' ||\n\t\t\tisNonModelFieldType(type) ||\n\t\t\tisModelFieldType(type))\n\t) {\n\t\ttry {\n\t\t\treturn JSON.parse(v);\n\t\t} catch {\n\t\t\t// if JSON is invalid, don't throw and let modelValidator handle it\n\t\t}\n\t}\n\n\t// cast from numeric representation of boolean to JS boolean\n\tif (typeof v === 'number' && type === 'Boolean') {\n\t\treturn Boolean(v);\n\t}\n\n\treturn v;\n};\n\nconst initializeInstance = <T extends PersistentModel>(\n\tinit: ModelInit<T>,\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tdraft: Draft<T & ModelInstanceMetadata>\n) => {\n\tconst modelValidator = validateModelFields(modelDefinition);\n\tObject.entries(init).forEach(([k, v]) => {\n\t\tconst parsedValue = castInstanceType(modelDefinition, k, v);\n\n\t\tmodelValidator(k, parsedValue);\n\t\t(<any>draft)[k] = parsedValue;\n\t});\n};\n\nconst createModelClass = <T extends PersistentModel>(\n\tmodelDefinition: SchemaModel\n) => {\n\tconst clazz = <PersistentModelConstructor<T>>(<unknown>class Model {\n\t\tconstructor(init: ModelInit<T>) {\n\t\t\tconst instance = produce(\n\t\t\t\tthis,\n\t\t\t\t(draft: Draft<T & ModelInstanceMetadata>) => {\n\t\t\t\t\tinitializeInstance(init, modelDefinition, draft);\n\n\t\t\t\t\t// model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n\t\t\t\t\tconst isInternallyInitialized = instancesMetadata.has(init);\n\n\t\t\t\t\tconst modelInstanceMetadata: ModelInstanceMetadata =\n\t\t\t\t\t\tisInternallyInitialized\n\t\t\t\t\t\t\t? <ModelInstanceMetadata>(<unknown>init)\n\t\t\t\t\t\t\t: <ModelInstanceMetadata>{};\n\n\t\t\t\t\ttype ModelWithIDIdentifier = { id: string };\n\n\t\t\t\t\tconst { id: _id } =\n\t\t\t\t\t\tmodelInstanceMetadata as unknown as ModelWithIDIdentifier;\n\n\t\t\t\t\tif (isIdManaged(modelDefinition)) {\n\t\t\t\t\t\tconst isInternalModel = _id !== null && _id !== undefined;\n\n\t\t\t\t\t\tconst id = isInternalModel\n\t\t\t\t\t\t\t? _id\n\t\t\t\t\t\t\t: modelDefinition.syncable\n\t\t\t\t\t\t\t? uuid4()\n\t\t\t\t\t\t\t: ulid();\n\n\t\t\t\t\t\t(<ModelWithIDIdentifier>(<unknown>draft)).id = id;\n\t\t\t\t\t} else if (isIdOptionallyManaged(modelDefinition)) {\n\t\t\t\t\t\t// only auto-populate if the id was not provided\n\t\t\t\t\t\t(<ModelWithIDIdentifier>(<unknown>draft)).id = draft.id || uuid4();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!isInternallyInitialized) {\n\t\t\t\t\t\tcheckReadOnlyPropertyOnCreate(draft, modelDefinition);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { _version, _lastChangedAt, _deleted } = modelInstanceMetadata;\n\n\t\t\t\t\tif (modelDefinition.syncable) {\n\t\t\t\t\t\tdraft._version = _version;\n\t\t\t\t\t\tdraft._lastChangedAt = _lastChangedAt;\n\t\t\t\t\t\tdraft._deleted = _deleted;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn instance;\n\t\t}\n\n\t\tstatic copyOf(source: T, fn: (draft: MutableModel<T>) => T) {\n\t\t\tconst modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\tconst msg = 'The source object is not a valid model';\n\t\t\t\tlogger.error(msg, { source });\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\tlet patches;\n\t\t\tconst model = produce(\n\t\t\t\tsource,\n\t\t\t\tdraft => {\n\t\t\t\t\tfn(<MutableModel<T>>draft);\n\n\t\t\t\t\tconst keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n\t\t\t\t\t// Keys are immutable\n\t\t\t\t\tkeyNames.forEach(key => ((draft as Object)[key] = source[key]));\n\n\t\t\t\t\tconst modelValidator = validateModelFields(modelDefinition);\n\t\t\t\t\tObject.entries(draft).forEach(([k, v]) => {\n\t\t\t\t\t\tconst parsedValue = castInstanceType(modelDefinition, k, v);\n\n\t\t\t\t\t\tmodelValidator(k, parsedValue);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tp => (patches = p)\n\t\t\t);\n\n\t\t\tconst hasExistingPatches = modelPatchesMap.has(source);\n\n\t\t\tif (patches.length || hasExistingPatches) {\n\t\t\t\tif (hasExistingPatches) {\n\t\t\t\t\tconst [existingPatches, existingSource] =\n\t\t\t\t\t\tmodelPatchesMap.get(source)!;\n\t\t\t\t\tconst mergedPatches = mergePatches(\n\t\t\t\t\t\texistingSource,\n\t\t\t\t\t\texistingPatches,\n\t\t\t\t\t\tpatches\n\t\t\t\t\t);\n\t\t\t\t\tmodelPatchesMap.set(model, [mergedPatches, existingSource]);\n\t\t\t\t\tcheckReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n\t\t\t\t} else {\n\t\t\t\t\tmodelPatchesMap.set(model, [patches, source]);\n\t\t\t\t\tcheckReadOnlyPropertyOnUpdate(patches, modelDefinition);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn attached(model, ModelAttachment.DataStore);\n\t\t}\n\n\t\t// \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n\t\t// to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n\t\tstatic fromJSON(json: T | T[]) {\n\t\t\tif (Array.isArray(json)) {\n\t\t\t\treturn json.map(init => this.fromJSON(init));\n\t\t\t}\n\n\t\t\tconst instance = modelInstanceCreator(clazz, json);\n\n\t\t\tconst modelValidator = validateModelFields(modelDefinition);\n\n\t\t\tObject.entries(instance).forEach(([k, v]) => {\n\t\t\t\tmodelValidator(k, v);\n\t\t\t});\n\n\t\t\treturn attached(instance, ModelAttachment.DataStore);\n\t\t}\n\t});\n\n\tclazz[immerable] = true;\n\n\tObject.defineProperty(clazz, 'name', { value: modelDefinition.name });\n\n\tfor (const field in modelDefinition.fields) {\n\t\tif (!isFieldAssociation(modelDefinition, field)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst {\n\t\t\ttype,\n\t\t\tassociation: localAssociation,\n\t\t\tassociation: { targetName, targetNames },\n\t\t} = modelDefinition.fields[field] as Required<ModelField>;\n\n\t\tconst relationship = new ModelRelationship(\n\t\t\t{\n\t\t\t\tbuilder: clazz,\n\t\t\t\tschema: modelDefinition,\n\t\t\t\tpkField: extractPrimaryKeyFieldNames(modelDefinition),\n\t\t\t},\n\t\t\tfield\n\t\t);\n\n\t\tObject.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {\n\t\t\tset(model: PersistentModel) {\n\t\t\t\tif (!model || !(typeof model === 'object')) return;\n\n\t\t\t\t// Avoid validation error when processing AppSync response with nested\n\t\t\t\t// selection set. Nested entitites lack version field and can not be validated\n\t\t\t\t// TODO: explore a more reliable method to solve this\n\t\t\t\tif (model.hasOwnProperty('_version')) {\n\t\t\t\t\tconst modelConstructor = Object.getPrototypeOf(model || {})\n\t\t\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\t\t\tconst msg = `Value passed to ${modelDefinition.name}.${field} is not a valid instance of a model`;\n\t\t\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tmodelConstructor.name.toLowerCase() !==\n\t\t\t\t\t\trelationship.remoteModelConstructor.name.toLowerCase()\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst msg = `Value passed to ${modelDefinition.name}.${field} is not an instance of ${relationship.remoteModelConstructor.name}`;\n\t\t\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (relationship.isComplete) {\n\t\t\t\t\tfor (let i = 0; i < relationship.localJoinFields.length; i++) {\n\t\t\t\t\t\tthis[relationship.localJoinFields[i]] =\n\t\t\t\t\t\t\tmodel[relationship.remoteJoinFields[i]];\n\t\t\t\t\t}\n\t\t\t\t\tconst instanceMemos = modelInstanceAssociationsMap.has(this)\n\t\t\t\t\t\t? modelInstanceAssociationsMap.get(this)!\n\t\t\t\t\t\t: modelInstanceAssociationsMap.set(this, {}).get(this)!;\n\t\t\t\t\tinstanceMemos[field] = model;\n\t\t\t\t}\n\t\t\t},\n\t\t\tget() {\n\t\t\t\tconst instanceMemos = modelInstanceAssociationsMap.has(this)\n\t\t\t\t\t? modelInstanceAssociationsMap.get(this)!\n\t\t\t\t\t: modelInstanceAssociationsMap.set(this, {}).get(this)!;\n\n\t\t\t\tif (!instanceMemos.hasOwnProperty(field)) {\n\t\t\t\t\tif (getAttachment(this) === ModelAttachment.DataStore) {\n\t\t\t\t\t\tconst resultPromise = instance.query(\n\t\t\t\t\t\t\trelationship.remoteModelConstructor as PersistentModelConstructor<T>,\n\t\t\t\t\t\t\tbase =>\n\t\t\t\t\t\t\t\tbase.and(q => {\n\t\t\t\t\t\t\t\t\treturn relationship.remoteJoinFields.map((field, index) => {\n\t\t\t\t\t\t\t\t\t\treturn (q[field] as any).eq(\n\t\t\t\t\t\t\t\t\t\t\tthis[relationship.localJoinFields[index]]\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (relationship.type === 'HAS_MANY') {\n\t\t\t\t\t\t\tinstanceMemos[field] = new AsyncCollection(resultPromise);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinstanceMemos[field] = resultPromise.then(rows => {\n\t\t\t\t\t\t\t\tif (rows.length > 1) {\n\t\t\t\t\t\t\t\t\t// should never happen for a HAS_ONE or BELONGS_TO.\n\t\t\t\t\t\t\t\t\tconst err = new Error(`\n\t\t\t\t\t\t\t\t\tData integrity error.\n\t\t\t\t\t\t\t\t\tToo many records found for a HAS_ONE/BELONGS_TO field '${modelDefinition.name}.${field}'\n\t\t\t\t\t\t\t\t`);\n\t\t\t\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn rows[0];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (getAttachment(this) === ModelAttachment.API) {\n\t\t\t\t\t\tthrow new Error('Lazy loading from API is not yet supported!');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (relationship.type === 'HAS_MANY') {\n\t\t\t\t\t\t\treturn new AsyncCollection([]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn instanceMemos[field];\n\t\t\t},\n\t\t});\n\t}\n\n\treturn clazz;\n};\n\nexport class AsyncItem<T> extends Promise<T> {}\n\nexport class AsyncCollection<T> implements AsyncIterable<T> {\n\tprivate values: Array<any> | Promise<Array<any>>;\n\n\tconstructor(values: Array<any> | Promise<Array<any>>) {\n\t\tthis.values = values;\n\t}\n\n\t[Symbol.asyncIterator](): AsyncIterator<T> {\n\t\tlet values;\n\t\tlet index = 0;\n\t\treturn {\n\t\t\tnext: async () => {\n\t\t\t\tif (!values) values = await this.values;\n\t\t\t\tif (index < values.length) {\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\tvalue: values[index],\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t};\n\t\t\t\t\tindex++;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tdone: true,\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\n\tasync toArray({\n\t\tmax = Number.MAX_SAFE_INTEGER,\n\t}: { max?: number } = {}): Promise<T[]> {\n\t\tconst output: T[] = [];\n\t\tlet i = 0;\n\t\tfor await (const element of this) {\n\t\t\tif (i < max) {\n\t\t\t\toutput.push(element);\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n}\n\nconst checkReadOnlyPropertyOnCreate = <T extends PersistentModel>(\n\tdraft: T,\n\tmodelDefinition: SchemaModel\n) => {\n\tconst modelKeys = Object.keys(draft);\n\tconst { fields } = modelDefinition;\n\n\tmodelKeys.forEach(key => {\n\t\tif (fields[key] && fields[key].isReadOnly) {\n\t\t\tthrow new Error(`${key} is read-only.`);\n\t\t}\n\t});\n};\n\nconst checkReadOnlyPropertyOnUpdate = (\n\tpatches: Patch[],\n\tmodelDefinition: SchemaModel\n) => {\n\tconst patchArray = patches.map(p => [p.path[0], p.value]);\n\tconst { fields } = modelDefinition;\n\n\tpatchArray.forEach(([key, val]) => {\n\t\tif (!val || !fields[key]) return;\n\n\t\tif (fields[key].isReadOnly) {\n\t\t\tthrow new Error(`${key} is read-only.`);\n\t\t}\n\t});\n};\n\nconst createNonModelClass = <T extends PersistentModel>(\n\ttypeDefinition: SchemaNonModel\n) => {\n\tconst clazz = <NonModelTypeConstructor<T>>(<unknown>class Model {\n\t\tconstructor(init: ModelInit<T>) {\n\t\t\tconst instance = produce(\n\t\t\t\tthis,\n\t\t\t\t(draft: Draft<T & ModelInstanceMetadata>) => {\n\t\t\t\t\tinitializeInstance(init, typeDefinition, draft);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn instance;\n\t\t}\n\t});\n\n\tclazz[immerable] = true;\n\n\tObject.defineProperty(clazz, 'name', { value: typeDefinition.name });\n\n\tregisterNonModelClass(clazz);\n\n\treturn clazz;\n};\n\nfunction isQueryOne(obj: any): obj is string {\n\treturn typeof obj === 'string';\n}\n\nfunction defaultConflictHandler(conflictData: SyncConflict): PersistentModel {\n\tconst { localModel, modelConstructor, remoteModel } = conflictData;\n\tconst { _version } = remoteModel;\n\treturn modelInstanceCreator(modelConstructor, { ...localModel, _version });\n}\n\nfunction defaultErrorHandler(error: SyncError<PersistentModel>): void {\n\tlogger.warn(error);\n}\n\nfunction getModelConstructorByModelName(\n\tnamespaceName: NAMESPACES,\n\tmodelName: string\n): PersistentModelConstructor<any> {\n\tlet result: PersistentModelConstructor<any> | NonModelTypeConstructor<any>;\n\n\tswitch (namespaceName) {\n\t\tcase DATASTORE:\n\t\t\tresult = dataStoreClasses[modelName];\n\t\t\tbreak;\n\t\tcase USER:\n\t\t\tresult = userClasses[modelName];\n\t\t\tbreak;\n\t\tcase SYNC:\n\t\t\tresult = syncClasses[modelName];\n\t\t\tbreak;\n\t\tcase STORAGE:\n\t\t\tresult = storageClasses[modelName];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid namespace: ${namespaceName}`);\n\t}\n\n\tif (isValidModelConstructor(result)) {\n\t\treturn result;\n\t} else {\n\t\tconst msg = `Model name is not valid for namespace. modelName: ${modelName}, namespace: ${namespaceName}`;\n\t\tlogger.error(msg);\n\n\t\tthrow new Error(msg);\n\t}\n}\n\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nasync function checkSchemaVersion(\n\tstorage: Storage,\n\tversion: string\n): Promise<void> {\n\tconst Setting =\n\t\tdataStoreClasses.Setting as PersistentModelConstructor<Setting>;\n\n\tconst modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n\n\tawait storage.runExclusive(async s => {\n\t\tconst [schemaVersionSetting] = await s.query(\n\t\t\tSetting,\n\t\t\tModelPredicateCreator.createFromExisting(modelDefinition, c =>\n\t\t\t\tc.key('eq', SETTING_SCHEMA_VERSION)\n\t\t\t),\n\t\t\t{ page: 0, limit: 1 }\n\t\t);\n\n\t\tif (\n\t\t\tschemaVersionSetting !== undefined &&\n\t\t\tschemaVersionSetting.value !== undefined\n\t\t) {\n\t\t\tconst storedValue = JSON.parse(schemaVersionSetting.value);\n\n\t\t\tif (storedValue !== version) {\n\t\t\t\tawait s.clear(false);\n\t\t\t}\n\t\t} else {\n\t\t\tawait s.save(\n\t\t\t\tmodelInstanceCreator(Setting, {\n\t\t\t\t\tkey: SETTING_SCHEMA_VERSION,\n\t\t\t\t\tvalue: JSON.stringify(version),\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t});\n}\n\nlet syncSubscription: ZenObservable.Subscription;\n\nfunction getNamespace(): SchemaNamespace {\n\tconst namespace: SchemaNamespace = {\n\t\tname: DATASTORE,\n\t\trelationships: {},\n\t\tenums: {},\n\t\tnonModels: {},\n\t\tmodels: {\n\t\t\tSetting: {\n\t\t\t\tname: 'Setting',\n\t\t\t\tpluralName: 'Settings',\n\t\t\t\tsyncable: false,\n\t\t\t\tfields: {\n\t\t\t\t\tid: {\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t\tkey: {\n\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\treturn namespace;\n}\n\nenum DataStoreState {\n\tNotRunning = 'Not Running',\n\tStarting = 'Starting',\n\tRunning = 'Running',\n\tStopping = 'Stopping',\n\tClearing = 'Clearing',\n}\n\nclass DataStore {\n\t// reference to configured category instances. Used for preserving SSR context\n\tprivate Auth = Auth;\n\tprivate API = API;\n\tprivate Cache = Cache;\n\n\t// Non-null assertions (bang operator) have been added to most of these properties\n\t// to make TS happy. These properties are all expected to be set immediately after\n\t// construction.\n\n\t// TODO: Refactor to use proper DI if possible. If not possible, change these to\n\t// optionals and implement conditional checks throughout. Rinse/repeat on all\n\t// sync engine processors, storage engine, adapters, etc..\n\n\tprivate amplifyConfig: Record<string, any> = {};\n\tprivate authModeStrategy!: AuthModeStrategy;\n\tprivate conflictHandler!: ConflictHandler;\n\tprivate errorHandler!: (error: SyncError<PersistentModel>) => void;\n\tprivate fullSyncInterval!: number;\n\tprivate initialized?: Promise<void>;\n\tprivate initReject!: Function;\n\tprivate initResolve!: Function;\n\tprivate maxRecordsToSync!: number;\n\tprivate storage?: Storage;\n\tprivate sync?: SyncEngine;\n\tprivate syncPageSize!: number;\n\tprivate syncExpressions!: SyncExpression[];\n\tprivate syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>> =\n\t\tnew WeakMap<SchemaModel, ModelPredicate<any>>();\n\tprivate sessionId?: string;\n\tprivate storageAdapter!: Adapter;\n\t// object that gets passed to descendent classes. Allows us to pass these down by reference\n\tprivate amplifyContext: AmplifyContext = {\n\t\tAuth: this.Auth,\n\t\tAPI: this.API,\n\t\tCache: this.Cache,\n\t};\n\tprivate connectivityMonitor?: DataStoreConnectivity;\n\n\t/**\n\t * **IMPORTANT!**\n\t *\n\t * Accumulator for background things that can **and MUST** be called when\n\t * DataStore stops.\n\t *\n\t * These jobs **MUST** be *idempotent promises* that resolve ONLY\n\t * once the intended jobs are completely finished and/or otherwise destroyed\n\t * and cleaned up with ZERO outstanding:\n\t *\n\t * 1. side effects (e.g., state changes)\n\t * 1. callbacks\n\t * 1. subscriptions\n\t * 1. calls to storage\n\t * 1. *etc.*\n\t *\n\t * Methods that create pending promises, subscriptions, callbacks, or any\n\t * type of side effect **MUST** be registered with the manager. And, a new\n\t * manager must be created after each `exit()`.\n\t *\n\t * Failure to comply will put DataStore into a highly unpredictable state\n\t * when it needs to stop or clear -- which occurs when restarting with new\n\t * sync expressions, during testing, and potentially during app code\n\t * recovery handling, etc..\n\t *\n\t * It is up to the discretion of each disposer whether to wait for job\n\t * completion or to cancel operations and issue failures *as long as the\n\t * disposer returns in a reasonable amount of time.*\n\t *\n\t * (Reasonable = *seconds*, not minutes.)\n\t */\n\tprivate runningProcesses = new BackgroundProcessManager();\n\n\t/**\n\t * Indicates what state DataStore is in.\n\t *\n\t * Not [yet?] used for actual state management; but for messaging\n\t * when errors occur, to help troubleshoot.\n\t */\n\tprivate state: DataStoreState = DataStoreState.NotRunning;\n\n\tgetModuleName() {\n\t\treturn 'DataStore';\n\t}\n\n\t/**\n\t * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n\t * more instructive errors for customers.\n\t *\n\t * @param operation The name of the operation (usually a Datastore method) the customer\n\t * tried to call.\n\t */\n\thandleAddProcError(operation: string) {\n\t\t/**\n\t\t * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n\t\t * and replaced with a friendlier message that instructs the App Developer.\n\t\t *\n\t\t * @param err An error to test.\n\t\t */\n\t\tconst handler = (err: Error) => {\n\t\t\tif (err.message.startsWith('BackgroundManagerNotOpenError')) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t[\n\t\t\t\t\t\t`DataStoreStateError: Tried to execute \\`${operation}\\` while DataStore was \"${this.state}\".`,\n\t\t\t\t\t\t`This can only be done while DataStore is \"Started\" or \"Stopped\". To remedy:`,\n\t\t\t\t\t\t'Ensure all calls to `stop()` and `clear()` have completed first.',\n\t\t\t\t\t\t'If this is not possible, retry the operation until it succeeds.',\n\t\t\t\t\t].join('\\n')\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t};\n\n\t\treturn handler;\n\t}\n\n\t/**\n\t * If not already done:\n\t * 1. Attaches and initializes storage.\n\t * 1. Loads the schema and records metadata.\n\t * 1. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n\t * attaches a sync engine, starts it, and subscribes.\n\t */\n\tstart = async (): Promise<void> => {\n\t\treturn this.runningProcesses\n\t\t\t.add(async () => {\n\t\t\t\tthis.state = DataStoreState.Starting;\n\t\t\t\tif (this.initialized === undefined) {\n\t\t\t\t\tlogger.debug('Starting DataStore');\n\t\t\t\t\tthis.initialized = new Promise((res, rej) => {\n\t\t\t\t\t\tthis.initResolve = res;\n\t\t\t\t\t\tthis.initReject = rej;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tawait this.initialized;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.storage = new Storage(\n\t\t\t\t\tschema,\n\t\t\t\t\tnamespaceResolver,\n\t\t\t\t\tgetModelConstructorByModelName,\n\t\t\t\t\tmodelInstanceCreator,\n\t\t\t\t\tthis.storageAdapter,\n\t\t\t\t\tthis.sessionId\n\t\t\t\t);\n\n\t\t\t\tawait this.storage.init();\n\t\t\t\tcheckSchemaInitialized();\n\t\t\t\tawait checkSchemaVersion(this.storage, schema.version);\n\t\t\t\tconst { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n\n\t\t\t\tif (aws_appsync_graphqlEndpoint) {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t'GraphQL endpoint available',\n\t\t\t\t\t\taws_appsync_graphqlEndpoint\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.syncPredicates = await this.processSyncExpressions();\n\n\t\t\t\t\tthis.sync = new SyncEngine(\n\t\t\t\t\t\tschema,\n\t\t\t\t\t\tnamespaceResolver,\n\t\t\t\t\t\tsyncClasses,\n\t\t\t\t\t\tuserClasses,\n\t\t\t\t\t\tthis.storage,\n\t\t\t\t\t\tmodelInstanceCreator,\n\t\t\t\t\t\tthis.conflictHandler,\n\t\t\t\t\t\tthis.errorHandler,\n\t\t\t\t\t\tthis.syncPredicates,\n\t\t\t\t\t\tthis.amplifyConfig,\n\t\t\t\t\t\tthis.authModeStrategy,\n\t\t\t\t\t\tthis.amplifyContext,\n\t\t\t\t\t\tthis.connectivityMonitor\n\t\t\t\t\t);\n\n\t\t\t\t\tconst fullSyncIntervalInMilliseconds =\n\t\t\t\t\t\tthis.fullSyncInterval * 1000 * 60; // fullSyncInterval from param is in minutes\n\t\t\t\t\tsyncSubscription = this.sync\n\t\t\t\t\t\t.start({ fullSyncInterval: fullSyncIntervalInMilliseconds })\n\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\tnext: ({ type, data }) => {\n\t\t\t\t\t\t\t\t// In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n\t\t\t\t\t\t\t\t// In the Browser, we can begin returning data once subscriptions are in place.\n\t\t\t\t\t\t\t\tconst readyType = isNode\n\t\t\t\t\t\t\t\t\t? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n\t\t\t\t\t\t\t\t\t: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n\n\t\t\t\t\t\t\t\tif (type === readyType) {\n\t\t\t\t\t\t\t\t\tthis.initResolve();\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tHub.dispatch('datastore', {\n\t\t\t\t\t\t\t\t\tevent: type,\n\t\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: err => {\n\t\t\t\t\t\t\t\tlogger.warn('Sync error', err);\n\t\t\t\t\t\t\t\tthis.initReject();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconfig: this.amplifyConfig,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.initResolve();\n\t\t\t\t}\n\n\t\t\t\tawait this.initialized;\n\t\t\t\tthis.state = DataStoreState.Running;\n\t\t\t}, 'datastore start')\n\t\t\t.catch(this.handleAddProcError('DataStore.start()'));\n\t};\n\n\tquery: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tidentifier: IdentifierFieldOrIdentifierObject<\n\t\t\t\tT,\n\t\t\t\tPersistentModelMetaData<T>\n\t\t\t>\n\t\t): Promise<T | undefined>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?:\n\t\t\t\t| RecursiveModelPredicateExtender<T>\n\t\t\t\t| typeof PredicateAll\n\t\t\t\t| null,\n\t\t\tpaginationProducer?: ProducerPaginationInput<T>\n\t\t): Promise<T[]>;\n\t} = async <T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tidentifierOrCriteria?:\n\t\t\t| IdentifierFieldOrIdentifierObject<T, PersistentModelMetaData<T>>\n\t\t\t| RecursiveModelPredicateExtender<T>\n\t\t\t| typeof PredicateAll\n\t\t\t| null,\n\t\tpaginationProducer?: ProducerPaginationInput<T>\n\t): Promise<T | T[] | undefined> => {\n\t\treturn this.runningProcesses\n\t\t\t.add(async () => {\n\t\t\t\tawait this.start();\n\n\t\t\t\tlet result: T[];\n\n\t\t\t\tif (!this.storage) {\n\t\t\t\t\tthrow new Error('No storage to query');\n\t\t\t\t}\n\n\t\t\t\t//#region Input validation\n\n\t\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\t\tconst msg = 'Constructor is not for a valid model';\n\t\t\t\t\tlogger.error(msg, { modelConstructor });\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tif (typeof identifierOrCriteria === 'string') {\n\t\t\t\t\tif (paginationProducer !== undefined) {\n\t\t\t\t\t\tlogger.warn('Pagination is ignored when querying by id');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\t\t\t\tif (!modelDefinition) {\n\t\t\t\t\tthrow new Error('Invalid model definition provided!');\n\t\t\t\t}\n\n\t\t\t\tconst pagination = this.processPagination(\n\t\t\t\t\tmodelDefinition,\n\t\t\t\t\tpaginationProducer\n\t\t\t\t);\n\n\t\t\t\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\n\t\t\t\tif (isQueryOne(identifierOrCriteria)) {\n\t\t\t\t\tif (keyFields.length > 1) {\n\t\t\t\t\t\tconst msg = errorMessages.queryByPkWithCompositeKeyPresent;\n\t\t\t\t\t\tlogger.error(msg, { keyFields });\n\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst predicate = ModelPredicateCreator.createForSingleField<T>(\n\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\tkeyFields[0],\n\t\t\t\t\t\tidentifierOrCriteria\n\t\t\t\t\t);\n\n\t\t\t\t\tresult = await this.storage.query<T>(\n\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\tpredicate,\n\t\t\t\t\t\tpagination\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Object is being queried using object literal syntax\n\t\t\t\t\tif (isIdentifierObject(<T>identifierOrCriteria, modelDefinition)) {\n\t\t\t\t\t\tconst predicate = ModelPredicateCreator.createForPk<T>(\n\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t<T>identifierOrCriteria\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresult = await this.storage.query<T>(\n\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\tpredicate,\n\t\t\t\t\t\t\tpagination\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t!identifierOrCriteria ||\n\t\t\t\t\t\tisPredicatesAll(identifierOrCriteria)\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult = await this.storage?.query<T>(\n\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tpagination\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst seedPredicate = recursivePredicateFor<T>({\n\t\t\t\t\t\t\tbuilder: modelConstructor,\n\t\t\t\t\t\t\tschema: modelDefinition,\n\t\t\t\t\t\t\tpkField: getModelPKFieldName(modelConstructor),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst predicate = internals(\n\t\t\t\t\t\t\t(identifierOrCriteria as RecursiveModelPredicateExtender<T>)(\n\t\t\t\t\t\t\t\tseedPredicate\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresult = (await predicate.fetch(this.storage)) as T[];\n\t\t\t\t\t\tresult = inMemoryPagination(result, pagination);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//#endregion\n\n\t\t\t\tconst returnOne =\n\t\t\t\t\tisQueryOne(identifierOrCriteria) ||\n\t\t\t\t\tisIdentifierObject(identifierOrCriteria, modelDefinition);\n\n\t\t\t\treturn attached(\n\t\t\t\t\treturnOne ? result[0] : result,\n\t\t\t\t\tModelAttachment.DataStore\n\t\t\t\t);\n\t\t\t}, 'datastore query')\n\t\t\t.catch(this.handleAddProcError('DataStore.query()'));\n\t};\n\n\tsave = async <T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicateExtender<T>\n\t): Promise<T> => {\n\t\treturn this.runningProcesses\n\t\t\t.add(async () => {\n\t\t\t\tawait this.start();\n\n\t\t\t\tif (!this.storage) {\n\t\t\t\t\tthrow new Error('No storage to save to');\n\t\t\t\t}\n\n\t\t\t\t// Immer patches for constructing a correct update mutation input\n\t\t\t\t// Allows us to only include changed fields for updates\n\t\t\t\tconst patchesTuple = modelPatchesMap.get(model);\n\n\t\t\t\tconst modelConstructor: PersistentModelConstructor<T> | undefined =\n\t\t\t\t\tmodel ? <PersistentModelConstructor<T>>model.constructor : undefined;\n\n\t\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\t\tconst msg = 'Object is not an instance of a valid model';\n\t\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\t\t\t\tif (!modelDefinition) {\n\t\t\t\t\tthrow new Error('Model Definition could not be found for model');\n\t\t\t\t}\n\n\t\t\t\tconst modelMeta = {\n\t\t\t\t\tbuilder: modelConstructor as PersistentModelConstructor<T>,\n\t\t\t\t\tschema: modelDefinition,\n\t\t\t\t\tpkField: extractPrimaryKeyFieldNames(modelDefinition),\n\t\t\t\t};\n\n\t\t\t\tawait this.storage.runExclusive(async s => {\n\t\t\t\t\t// no enforcement for HAS_MANY on save, because the ~related~ entities\n\t\t\t\t\t// hold the FK in that case.\n\t\t\t\t\tconst nonHasManyRelationships = ModelRelationship.allFrom(\n\t\t\t\t\t\tmodelMeta\n\t\t\t\t\t).filter(r => r.type === 'BELONGS_TO');\n\t\t\t\t\tfor (const relationship of nonHasManyRelationships) {\n\t\t\t\t\t\tconst queryObject = relationship.createRemoteQueryObject(model);\n\t\t\t\t\t\tif (queryObject !== null) {\n\t\t\t\t\t\t\t// console.log({ queryObject });\n\t\t\t\t\t\t\tconst related = await s.query(\n\t\t\t\t\t\t\t\trelationship.remoteModelConstructor,\n\t\t\t\t\t\t\t\tModelPredicateCreator.createFromFlatEqualities(\n\t\t\t\t\t\t\t\t\trelationship.remoteDefinition!,\n\t\t\t\t\t\t\t\t\tqueryObject\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (related.length === 0) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t`Data integrity error. You tried to save a ${\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition.name\n\t\t\t\t\t\t\t\t\t\t} (${JSON.stringify(model)})`,\n\t\t\t\t\t\t\t\t\t\t`but the instance assigned to the \"${relationship.field}\" property`,\n\t\t\t\t\t\t\t\t\t\t`does not exist in the local database. If you're trying to create the related`,\n\t\t\t\t\t\t\t\t\t\t`\"${relationship.remoteDefinition?.name}\", you must save it independently first.`,\n\t\t\t\t\t\t\t\t\t].join(' ')\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst producedCondition = condition\n\t\t\t\t\t? internals(\n\t\t\t\t\t\t\tcondition(predicateFor(modelMeta))\n\t\t\t\t\t  ).toStoragePredicate<T>()\n\t\t\t\t\t: undefined;\n\n\t\t\t\tconst [savedModel] = await this.storage.runExclusive(async s => {\n\t\t\t\t\tconst saved = await s.save(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tproducedCondition,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tpatchesTuple\n\t\t\t\t\t);\n\t\t\t\t\treturn s.query<T>(\n\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\tModelPredicateCreator.createForPk(modelDefinition, model)\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\treturn attached(savedModel, ModelAttachment.DataStore);\n\t\t\t}, 'datastore save')\n\t\t\t.catch(this.handleAddProcError('DataStore.save()'));\n\t};\n\n\tsetConflictHandler = (config: DataStoreConfig): ConflictHandler => {\n\t\tconst { DataStore: configDataStore } = config;\n\n\t\tconst conflictHandlerIsDefault: () => boolean = () =>\n\t\t\tthis.conflictHandler === defaultConflictHandler;\n\n\t\tif (configDataStore && configDataStore.conflictHandler) {\n\t\t\treturn configDataStore.conflictHandler;\n\t\t}\n\t\tif (conflictHandlerIsDefault() && config.conflictHandler) {\n\t\t\treturn config.conflictHandler;\n\t\t}\n\n\t\treturn this.conflictHandler || defaultConflictHandler;\n\t};\n\n\tsetErrorHandler = (config: DataStoreConfig): ErrorHandler => {\n\t\tconst { DataStore: configDataStore } = config;\n\n\t\tconst errorHandlerIsDefault: () => boolean = () =>\n\t\t\tthis.errorHandler === defaultErrorHandler;\n\n\t\tif (configDataStore && configDataStore.errorHandler) {\n\t\t\treturn configDataStore.errorHandler;\n\t\t}\n\t\tif (errorHandlerIsDefault() && config.errorHandler) {\n\t\t\treturn config.errorHandler;\n\t\t}\n\n\t\treturn this.errorHandler || defaultErrorHandler;\n\t};\n\n\tdelete: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tidentifier: IdentifierFieldOrIdentifierObject<\n\t\t\t\tT,\n\t\t\t\tPersistentModelMetaData<T>\n\t\t\t>\n\t\t): Promise<T[]>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcondition: ModelPredicateExtender<T> | typeof PredicateAll\n\t\t): Promise<T[]>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodel: T,\n\t\t\tcondition?: ModelPredicateExtender<T>\n\t\t): Promise<T>;\n\t} = async <T extends PersistentModel>(\n\t\tmodelOrConstructor: T | PersistentModelConstructor<T>,\n\t\tidentifierOrCriteria?:\n\t\t\t| IdentifierFieldOrIdentifierObject<T, PersistentModelMetaData<T>>\n\t\t\t| ModelPredicateExtender<T>\n\t\t\t| typeof PredicateAll\n\t): Promise<T | T[]> => {\n\t\treturn this.runningProcesses\n\t\t\t.add(async () => {\n\t\t\t\tawait this.start();\n\n\t\t\t\tif (!this.storage) {\n\t\t\t\t\tthrow new Error('No storage to delete from');\n\t\t\t\t}\n\n\t\t\t\tlet condition: ModelPredicate<T> | undefined;\n\n\t\t\t\tif (!modelOrConstructor) {\n\t\t\t\t\tconst msg = 'Model or Model Constructor required';\n\t\t\t\t\tlogger.error(msg, { modelOrConstructor });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tif (isValidModelConstructor<T>(modelOrConstructor)) {\n\t\t\t\t\tconst modelConstructor = modelOrConstructor;\n\n\t\t\t\t\tif (!identifierOrCriteria) {\n\t\t\t\t\t\tconst msg =\n\t\t\t\t\t\t\t'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n\t\t\t\t\t\tlogger.error(msg, { identifierOrCriteria });\n\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\t\t\t\tif (!modelDefinition) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Could not find model definition for modelConstructor.'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof identifierOrCriteria === 'string') {\n\t\t\t\t\t\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\n\t\t\t\t\t\tif (keyFields.length > 1) {\n\t\t\t\t\t\t\tconst msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n\t\t\t\t\t\t\tlogger.error(msg, { keyFields });\n\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcondition = ModelPredicateCreator.createForSingleField<T>(\n\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\tkeyFields[0],\n\t\t\t\t\t\t\tidentifierOrCriteria\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n\t\t\t\t\t\t\tcondition = ModelPredicateCreator.createForPk<T>(\n\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t<T>identifierOrCriteria\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcondition = internals(\n\t\t\t\t\t\t\t\t(identifierOrCriteria as ModelPredicateExtender<T>)(\n\t\t\t\t\t\t\t\t\tpredicateFor({\n\t\t\t\t\t\t\t\t\t\tbuilder: modelConstructor as PersistentModelConstructor<T>,\n\t\t\t\t\t\t\t\t\t\tschema: modelDefinition,\n\t\t\t\t\t\t\t\t\t\tpkField: extractPrimaryKeyFieldNames(modelDefinition),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t).toStoragePredicate<T>();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!condition ||\n\t\t\t\t\t\t\t!ModelPredicateCreator.isValidPredicate(condition)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst msg =\n\t\t\t\t\t\t\t\t'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n\t\t\t\t\t\t\tlogger.error(msg, { condition });\n\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst [deleted] = await this.storage.delete(\n\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\tcondition\n\t\t\t\t\t);\n\n\t\t\t\t\treturn attached(deleted, ModelAttachment.DataStore);\n\t\t\t\t} else {\n\t\t\t\t\tconst model = modelOrConstructor;\n\t\t\t\t\tconst modelConstructor = Object.getPrototypeOf(model || {})\n\t\t\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\t\t\tconst msg = 'Object is not an instance of a valid model';\n\t\t\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\t\t\t\tif (!modelDefinition) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Could not find model definition for modelConstructor.'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst pkPredicate = ModelPredicateCreator.createForPk<T>(\n\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\tmodel\n\t\t\t\t\t);\n\n\t\t\t\t\tif (identifierOrCriteria) {\n\t\t\t\t\t\tif (typeof identifierOrCriteria !== 'function') {\n\t\t\t\t\t\t\tconst msg = 'Invalid criteria';\n\t\t\t\t\t\t\tlogger.error(msg, { identifierOrCriteria });\n\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcondition = internals(\n\t\t\t\t\t\t\t(identifierOrCriteria as ModelPredicateExtender<T>)(\n\t\t\t\t\t\t\t\tpredicateFor({\n\t\t\t\t\t\t\t\t\tbuilder: modelConstructor as PersistentModelConstructor<T>,\n\t\t\t\t\t\t\t\t\tschema: modelDefinition,\n\t\t\t\t\t\t\t\t\tpkField: extractPrimaryKeyFieldNames(modelDefinition),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t).toStoragePredicate<T>(pkPredicate);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcondition = pkPredicate;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst [[deleted]] = await this.storage.delete(model, condition);\n\n\t\t\t\t\treturn attached(deleted, ModelAttachment.DataStore);\n\t\t\t\t}\n\t\t\t}, 'datastore delete')\n\t\t\t.catch(this.handleAddProcError('DataStore.delete()'));\n\t};\n\n\tobserve: {\n\t\t(): Observable<SubscriptionMessage<PersistentModel>>;\n\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tidentifier: string\n\t\t): Observable<SubscriptionMessage<T>>;\n\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: RecursiveModelPredicateExtender<T> | typeof PredicateAll\n\t\t): Observable<SubscriptionMessage<T>>;\n\n\t\t<T extends PersistentModel>(model: T): Observable<SubscriptionMessage<T>>;\n\t} = <T extends PersistentModel>(\n\t\tmodelOrConstructor?: T | PersistentModelConstructor<T>,\n\t\tidentifierOrCriteria?:\n\t\t\t| string\n\t\t\t| RecursiveModelPredicateExtender<T>\n\t\t\t| typeof PredicateAll\n\t): Observable<SubscriptionMessage<T>> => {\n\t\tlet executivePredicate: GroupCondition;\n\n\t\tconst modelConstructor: PersistentModelConstructor<T> | undefined =\n\t\t\tmodelOrConstructor && isValidModelConstructor<T>(modelOrConstructor)\n\t\t\t\t? modelOrConstructor\n\t\t\t\t: undefined;\n\n\t\tif (modelOrConstructor && modelConstructor === undefined) {\n\t\t\tconst model = <T>modelOrConstructor;\n\t\t\tconst modelConstructor =\n\t\t\t\tmodel && (<Object>Object.getPrototypeOf(model)).constructor;\n\n\t\t\tif (isValidModelConstructor<T>(modelConstructor)) {\n\t\t\t\tif (identifierOrCriteria) {\n\t\t\t\t\tlogger.warn('idOrCriteria is ignored when using a model instance', {\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tidentifierOrCriteria,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.observe(modelConstructor, model.id);\n\t\t\t} else {\n\t\t\t\tconst msg =\n\t\t\t\t\t'The model is not an instance of a PersistentModelConstructor';\n\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\t// observe should not accept object literal syntax\n\t\tif (\n\t\t\tidentifierOrCriteria &&\n\t\t\tmodelConstructor &&\n\t\t\tisIdentifierObject(\n\t\t\t\tidentifierOrCriteria,\n\t\t\t\tgetModelDefinition(modelConstructor!)!\n\t\t\t)\n\t\t) {\n\t\t\tconst msg = errorMessages.observeWithObjectLiteral;\n\t\t\tlogger.error(msg, { objectLiteral: identifierOrCriteria });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n\t\t\tconst msg = 'Cannot provide criteria without a modelConstructor';\n\t\t\tlogger.error(msg, identifierOrCriteria);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n\t\t\tconst msg = 'Constructor is not for a valid model';\n\t\t\tlogger.error(msg, { modelConstructor });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (modelConstructor && typeof identifierOrCriteria === 'string') {\n\t\t\tconst buildIdPredicate = seed => seed.id.eq(identifierOrCriteria);\n\t\t\texecutivePredicate = internals(\n\t\t\t\tbuildIdPredicate(buildSeedPredicate(modelConstructor))\n\t\t\t);\n\t\t} else if (modelConstructor && typeof identifierOrCriteria === 'function') {\n\t\t\texecutivePredicate = internals(\n\t\t\t\t(identifierOrCriteria as RecursiveModelPredicateExtender<T>)(\n\t\t\t\t\tbuildSeedPredicate(modelConstructor) as any\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\treturn new Observable<SubscriptionMessage<T>>(observer => {\n\t\t\tlet source: ZenObservable.Subscription;\n\n\t\t\tthis.runningProcesses\n\t\t\t\t.add(async () => {\n\t\t\t\t\tawait this.start();\n\n\t\t\t\t\t// Filter the events returned by Storage according to namespace,\n\t\t\t\t\t// append original element data, and subscribe to the observable\n\t\t\t\t\tsource = this.storage!.observe(modelConstructor)\n\t\t\t\t\t\t.filter(({ model }) => namespaceResolver(model) === USER)\n\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\tnext: item =>\n\t\t\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\t// the `element` doesn't necessarily contain all item details or\n\t\t\t\t\t\t\t\t\t// have related records attached consistently with that of a query()\n\t\t\t\t\t\t\t\t\t// result item. for consistency, we attach them here.\n\n\t\t\t\t\t\t\t\t\tlet message = item;\n\n\t\t\t\t\t\t\t\t\t// as long as we're not dealing with a DELETE, we need to fetch a fresh\n\t\t\t\t\t\t\t\t\t// item from storage to ensure it's fully populated.\n\t\t\t\t\t\t\t\t\tif (item.opType !== 'DELETE') {\n\t\t\t\t\t\t\t\t\t\tconst modelDefinition = getModelDefinition(item.model);\n\t\t\t\t\t\t\t\t\t\tconst keyFields = extractPrimaryKeyFieldNames(\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition!\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconst primaryKeysAndValues = extractPrimaryKeysAndValues(\n\t\t\t\t\t\t\t\t\t\t\titem.element,\n\t\t\t\t\t\t\t\t\t\t\tkeyFields\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconst freshElement = await this.query(\n\t\t\t\t\t\t\t\t\t\t\titem.model,\n\t\t\t\t\t\t\t\t\t\t\tprimaryKeysAndValues\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tmessage = {\n\t\t\t\t\t\t\t\t\t\t\t...message,\n\t\t\t\t\t\t\t\t\t\t\telement: freshElement as T,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t!executivePredicate ||\n\t\t\t\t\t\t\t\t\t\t(await executivePredicate.matches(message.element))\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tobserver.next(message as SubscriptionMessage<T>);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, 'datastore observe message handler'),\n\t\t\t\t\t\t\terror: err => observer.error(err),\n\t\t\t\t\t\t\tcomplete: () => observer.complete(),\n\t\t\t\t\t\t});\n\t\t\t\t}, 'datastore observe observable initialization')\n\t\t\t\t.catch(this.handleAddProcError('DataStore.observe()'))\n\t\t\t\t.catch(error => {\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\n\t\t\t// better than no cleaner, but if the subscriber is handling the\n\t\t\t// complete() message async and not registering with the context,\n\t\t\t// this will still be problematic.\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tif (source) {\n\t\t\t\t\tsource.unsubscribe();\n\t\t\t\t}\n\t\t\t}, 'DataStore.observe() cleanup');\n\t\t});\n\t};\n\n\tobserveQuery: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: RecursiveModelPredicateExtender<T> | typeof PredicateAll,\n\t\t\tpaginationProducer?: ObserveQueryOptions<T>\n\t\t): Observable<DataStoreSnapshot<T>>;\n\t} = <T extends PersistentModel>(\n\t\tmodel: PersistentModelConstructor<T>,\n\t\tcriteria?: RecursiveModelPredicateExtender<T> | typeof PredicateAll,\n\t\toptions?: ObserveQueryOptions<T>\n\t): Observable<DataStoreSnapshot<T>> => {\n\t\treturn new Observable<DataStoreSnapshot<T>>(observer => {\n\t\t\tconst items = new Map<string, T>();\n\t\t\tconst itemsChanged = new Map<string, T>();\n\t\t\tlet deletedItemIds: string[] = [];\n\t\t\tlet handle: ZenObservable.Subscription;\n\t\t\t// let predicate: ModelPredicate<T> | undefined;\n\t\t\tlet executivePredicate: GroupCondition | undefined;\n\n\t\t\t/**\n\t\t\t * As the name suggests, this geneates a snapshot in the form of\n\t\t\t * \t`{items: T[], isSynced: boolean}`\n\t\t\t * and sends it to the observer.\n\t\t\t *\n\t\t\t * SIDE EFFECT: The underlying generation and emission methods may touch:\n\t\t\t * `items`, `itemsChanged`, and `deletedItemIds`.\n\t\t\t *\n\t\t\t * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n\t\t\t */\n\t\t\tconst generateAndEmitSnapshot = (): void => {\n\t\t\t\tconst snapshot = generateSnapshot();\n\t\t\t\temitSnapshot(snapshot);\n\t\t\t};\n\n\t\t\t// a mechanism to return data after X amount of seconds OR after the\n\t\t\t// \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n\t\t\tconst limitTimerRace = new DeferredCallbackResolver({\n\t\t\t\tcallback: generateAndEmitSnapshot,\n\t\t\t\terrorHandler: observer.error,\n\t\t\t\tmaxInterval: 2000,\n\t\t\t});\n\n\t\t\tconst { sort } = options || {};\n\t\t\tconst sortOptions = sort ? { sort } : undefined;\n\n\t\t\tconst modelDefinition = getModelDefinition(model);\n\t\t\tif (!modelDefinition) {\n\t\t\t\tthrow new Error('Could not find model definition.');\n\t\t\t}\n\n\t\t\tif (model && typeof criteria === 'function') {\n\t\t\t\texecutivePredicate = internals(\n\t\t\t\t\t(criteria as RecursiveModelPredicateExtender<T>)(\n\t\t\t\t\t\tbuildSeedPredicate(model)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else if (isPredicatesAll(criteria)) {\n\t\t\t\texecutivePredicate = undefined;\n\t\t\t}\n\n\t\t\tthis.runningProcesses\n\t\t\t\t.add(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// first, query and return any locally-available records\n\t\t\t\t\t\t(await this.query(model, criteria, sortOptions)).forEach(item => {\n\t\t\t\t\t\t\tconst itemModelDefinition = getModelDefinition(model);\n\t\t\t\t\t\t\tconst idOrPk = getIdentifierValue(itemModelDefinition!, item);\n\t\t\t\t\t\t\titems.set(idOrPk, item);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Observe the model and send a stream of updates (debounced).\n\t\t\t\t\t\t// We need to post-filter results instead of passing criteria through\n\t\t\t\t\t\t// to have visibility into items that move from in-set to out-of-set.\n\t\t\t\t\t\t// We need to explicitly remove those items from the existing snapshot.\n\t\t\t\t\t\thandle = this.observe(model).subscribe(\n\t\t\t\t\t\t\t({ element, model, opType }) =>\n\t\t\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\tconst itemModelDefinition = getModelDefinition(model)!;\n\t\t\t\t\t\t\t\t\tconst idOrPk = getIdentifierValue(\n\t\t\t\t\t\t\t\t\t\titemModelDefinition,\n\t\t\t\t\t\t\t\t\t\telement\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\texecutivePredicate &&\n\t\t\t\t\t\t\t\t\t\t!(await executivePredicate.matches(element))\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\topType === 'UPDATE' &&\n\t\t\t\t\t\t\t\t\t\t\t(items.has(idOrPk) || itemsChanged.has(idOrPk))\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t// tracking as a \"deleted item\" will include the item in\n\t\t\t\t\t\t\t\t\t\t\t// page limit calculations and ensure it is removed from the\n\t\t\t\t\t\t\t\t\t\t\t// final items collection, regardless of which collection(s)\n\t\t\t\t\t\t\t\t\t\t\t// it is currently in. (I mean, it could be in both, right!?)\n\t\t\t\t\t\t\t\t\t\t\tdeletedItemIds.push(idOrPk);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// ignore updates for irrelevant/filtered items.\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Flag items which have been recently deleted\n\t\t\t\t\t\t\t\t\t// NOTE: Merging of separate operations to the same model instance is handled upstream\n\t\t\t\t\t\t\t\t\t// in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n\t\t\t\t\t\t\t\t\t// depends on the LATEST record (for a given id).\n\t\t\t\t\t\t\t\t\tif (opType === 'DELETE') {\n\t\t\t\t\t\t\t\t\t\tdeletedItemIds.push(idOrPk);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\titemsChanged.set(idOrPk, element);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst isSynced =\n\t\t\t\t\t\t\t\t\t\tthis.sync?.getModelSyncedStatus(model) ?? false;\n\n\t\t\t\t\t\t\t\t\tconst limit =\n\t\t\t\t\t\t\t\t\t\titemsChanged.size - deletedItemIds.length >=\n\t\t\t\t\t\t\t\t\t\tthis.syncPageSize;\n\n\t\t\t\t\t\t\t\t\tif (limit || isSynced) {\n\t\t\t\t\t\t\t\t\t\tlimitTimerRace.resolve();\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// kicks off every subsequent race as results sync down\n\t\t\t\t\t\t\t\t\tlimitTimerRace.start();\n\t\t\t\t\t\t\t\t}, 'handle observeQuery observed event')\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// returns a set of initial/locally-available results\n\t\t\t\t\t\tgenerateAndEmitSnapshot();\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tobserver.error(err);\n\t\t\t\t\t}\n\t\t\t\t}, 'datastore observequery startup')\n\t\t\t\t.catch(this.handleAddProcError('DataStore.observeQuery()'))\n\t\t\t\t.catch(error => {\n\t\t\t\t\tobserver.error(error);\n\t\t\t\t});\n\n\t\t\t/**\n\t\t\t * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n\t\t\t * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n\t\t\t *\n\t\t\t * SIDE EFFECT: The shared `items` collection is recreated.\n\t\t\t */\n\t\t\tconst generateSnapshot = (): DataStoreSnapshot<T> => {\n\t\t\t\tconst isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n\t\t\t\tconst itemsArray = [\n\t\t\t\t\t...Array.from(items.values()),\n\t\t\t\t\t...Array.from(itemsChanged.values()),\n\t\t\t\t];\n\n\t\t\t\tif (options?.sort) {\n\t\t\t\t\tsortItems(itemsArray);\n\t\t\t\t}\n\n\t\t\t\titems.clear();\n\t\t\t\titemsArray.forEach(item => {\n\t\t\t\t\tconst itemModelDefinition = getModelDefinition(model);\n\t\t\t\t\tconst idOrPk = getIdentifierValue(itemModelDefinition!, item);\n\t\t\t\t\titems.set(idOrPk, item);\n\t\t\t\t});\n\n\t\t\t\t// remove deleted items from the final result set\n\t\t\t\tdeletedItemIds.forEach(idOrPk => items.delete(idOrPk));\n\n\t\t\t\treturn {\n\t\t\t\t\titems: Array.from(items.values()),\n\t\t\t\t\tisSynced,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Emits the list of items to the observer.\n\t\t\t *\n\t\t\t * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n\t\t\t * for the next snapshot.\n\t\t\t *\n\t\t\t * @param snapshot The generated items data to emit.\n\t\t\t */\n\t\t\tconst emitSnapshot = (snapshot: DataStoreSnapshot<T>): void => {\n\t\t\t\t// send the generated snapshot to the primary subscription.\n\t\t\t\t// NOTE: This observer's handler *could* be async ...\n\n\t\t\t\tobserver.next(snapshot);\n\n\t\t\t\t// reset the changed items sets\n\t\t\t\titemsChanged.clear();\n\t\t\t\tdeletedItemIds = [];\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Sorts an `Array` of `T` according to the sort instructions given in the\n\t\t\t * original  `observeQuery()` call.\n\t\t\t *\n\t\t\t * @param itemsToSort A array of model type.\n\t\t\t */\n\t\t\tconst sortItems = (itemsToSort: T[]): void => {\n\t\t\t\tconst modelDefinition = getModelDefinition(model);\n\t\t\t\tconst pagination = this.processPagination(modelDefinition!, options);\n\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination!.sort!\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\titemsToSort.sort(compareFn);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Force one last snapshot when the model is fully synced.\n\t\t\t *\n\t\t\t * This reduces latency for that last snapshot, which will otherwise\n\t\t\t * wait for the configured timeout.\n\t\t\t *\n\t\t\t * @param payload The payload from the Hub event.\n\t\t\t */\n\t\t\tconst hubCallback = ({ payload }): void => {\n\t\t\t\tconst { event, data } = payload;\n\t\t\t\tif (\n\t\t\t\t\tevent === ControlMessage.SYNC_ENGINE_MODEL_SYNCED &&\n\t\t\t\t\tdata?.model?.name === model.name\n\t\t\t\t) {\n\t\t\t\t\tgenerateAndEmitSnapshot();\n\t\t\t\t\tHub.remove('datastore', hubCallback);\n\t\t\t\t}\n\t\t\t};\n\t\t\tHub.listen('datastore', hubCallback);\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.unsubscribe();\n\t\t\t\t}\n\t\t\t}, 'datastore observequery cleaner');\n\t\t});\n\t};\n\n\tconfigure = (config: DataStoreConfig = {}) => {\n\t\tthis.amplifyContext.Auth = this.Auth;\n\t\tthis.amplifyContext.API = this.API;\n\t\tthis.amplifyContext.Cache = this.Cache;\n\n\t\tconst {\n\t\t\tDataStore: configDataStore,\n\t\t\tauthModeStrategyType: configAuthModeStrategyType,\n\t\t\tconflictHandler: configConflictHandler,\n\t\t\terrorHandler: configErrorHandler,\n\t\t\tmaxRecordsToSync: configMaxRecordsToSync,\n\t\t\tsyncPageSize: configSyncPageSize,\n\t\t\tfullSyncInterval: configFullSyncInterval,\n\t\t\tsyncExpressions: configSyncExpressions,\n\t\t\tauthProviders: configAuthProviders,\n\t\t\tstorageAdapter: configStorageAdapter,\n\t\t\t...configFromAmplify\n\t\t} = config;\n\n\t\tthis.amplifyConfig = {\n\t\t\t...configFromAmplify,\n\t\t\t...this.amplifyConfig,\n\t\t};\n\n\t\tthis.conflictHandler = this.setConflictHandler(config);\n\t\tthis.errorHandler = this.setErrorHandler(config);\n\n\t\tconst authModeStrategyType =\n\t\t\t(configDataStore && configDataStore.authModeStrategyType) ||\n\t\t\tconfigAuthModeStrategyType ||\n\t\t\tAuthModeStrategyType.DEFAULT;\n\n\t\tswitch (authModeStrategyType) {\n\t\t\tcase AuthModeStrategyType.MULTI_AUTH:\n\t\t\t\tthis.authModeStrategy = multiAuthStrategy(this.amplifyContext);\n\t\t\t\tbreak;\n\t\t\tcase AuthModeStrategyType.DEFAULT:\n\t\t\t\tthis.authModeStrategy = defaultAuthStrategy;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.authModeStrategy = defaultAuthStrategy;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.authProviders =\n\t\t\t(configDataStore && configDataStore.authProviders) || configAuthProviders;\n\n\t\tthis.syncExpressions =\n\t\t\t(configDataStore && configDataStore.syncExpressions) ||\n\t\t\tconfigSyncExpressions ||\n\t\t\tthis.syncExpressions;\n\n\t\tthis.maxRecordsToSync =\n\t\t\t(configDataStore && configDataStore.maxRecordsToSync) ||\n\t\t\tconfigMaxRecordsToSync ||\n\t\t\tthis.maxRecordsToSync ||\n\t\t\t10000;\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.maxRecordsToSync = this.maxRecordsToSync;\n\n\t\tthis.syncPageSize =\n\t\t\t(configDataStore && configDataStore.syncPageSize) ||\n\t\t\tconfigSyncPageSize ||\n\t\t\tthis.syncPageSize ||\n\t\t\t1000;\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.syncPageSize = this.syncPageSize;\n\n\t\tthis.fullSyncInterval =\n\t\t\t(configDataStore && configDataStore.fullSyncInterval) ||\n\t\t\tconfigFullSyncInterval ||\n\t\t\tthis.fullSyncInterval ||\n\t\t\t24 * 60; // 1 day\n\n\t\tthis.storageAdapter =\n\t\t\t(configDataStore && configDataStore.storageAdapter) ||\n\t\t\tconfigStorageAdapter ||\n\t\t\tthis.storageAdapter ||\n\t\t\tundefined;\n\n\t\tthis.sessionId = this.retrieveSessionId()!;\n\t};\n\n\t/**\n\t * Clears all data from storage and removes all data, schema info, other\n\t * initialization details, and then stops DataStore.\n\t *\n\t * That said, reinitialization is required after clearing. This can be done\n\t * by explicitiliy calling `start()` or any method that implicitly starts\n\t * DataStore, such as `query()`, `save()`, or `delete()`.\n\t */\n\tasync clear() {\n\t\tcheckSchemaInitialized();\n\t\tthis.state = DataStoreState.Clearing;\n\t\tawait this.runningProcesses.close();\n\t\tif (this.storage === undefined) {\n\t\t\t// connect to storage so that it can be cleared without fully starting DataStore\n\t\t\tthis.storage = new Storage(\n\t\t\t\tschema,\n\t\t\t\tnamespaceResolver,\n\t\t\t\tgetModelConstructorByModelName,\n\t\t\t\tmodelInstanceCreator,\n\t\t\t\tthis.storageAdapter,\n\t\t\t\tthis.sessionId\n\t\t\t);\n\t\t\tawait this.storage.init();\n\t\t}\n\n\t\tif (syncSubscription && !syncSubscription.closed) {\n\t\t\tsyncSubscription.unsubscribe();\n\t\t}\n\n\t\tif (this.sync) {\n\t\t\tawait this.sync.stop();\n\t\t}\n\n\t\tawait this.storage!.clear();\n\n\t\tthis.initialized = undefined; // Should re-initialize when start() is called.\n\t\tthis.storage = undefined;\n\t\tthis.sync = undefined;\n\t\tthis.syncPredicates = new WeakMap<SchemaModel, ModelPredicate<any>>();\n\n\t\tawait this.runningProcesses.open();\n\t\tthis.state = DataStoreState.NotRunning;\n\t}\n\n\t/**\n\t * Stops all DataStore sync activities.\n\t *\n\t * TODO: \"Waits for graceful termination of\n\t * running queries and terminates subscriptions.\"\n\t */\n\tasync stop(this: InstanceType<typeof DataStore>) {\n\t\tthis.state = DataStoreState.Stopping;\n\n\t\tawait this.runningProcesses.close();\n\n\t\tif (syncSubscription && !syncSubscription.closed) {\n\t\t\tsyncSubscription.unsubscribe();\n\t\t}\n\n\t\tif (this.sync) {\n\t\t\tawait this.sync.stop();\n\t\t}\n\n\t\tthis.initialized = undefined; // Should re-initialize when start() is called.\n\t\tthis.sync = undefined;\n\t\tawait this.runningProcesses.open();\n\t\tthis.state = DataStoreState.NotRunning;\n\t}\n\n\t/**\n\t * Validates given pagination input from a query and creates a pagination\n\t * argument for use against the storage layer.\n\t *\n\t * @param modelDefinition\n\t * @param paginationProducer\n\t */\n\tprivate processPagination<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tpaginationProducer?: ProducerPaginationInput<T>\n\t): PaginationInput<T> | undefined {\n\t\tlet sortPredicate: SortPredicate<T> | undefined;\n\t\tconst { limit, page, sort } = paginationProducer || {};\n\n\t\tif (limit === undefined && page === undefined && sort === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (page !== undefined && limit === undefined) {\n\t\t\tthrow new Error('Limit is required when requesting a page');\n\t\t}\n\n\t\tif (page !== undefined) {\n\t\t\tif (typeof page !== 'number') {\n\t\t\t\tthrow new Error('Page should be a number');\n\t\t\t}\n\n\t\t\tif (page < 0) {\n\t\t\t\tthrow new Error(\"Page can't be negative\");\n\t\t\t}\n\t\t}\n\n\t\tif (limit !== undefined) {\n\t\t\tif (typeof limit !== 'number') {\n\t\t\t\tthrow new Error('Limit should be a number');\n\t\t\t}\n\n\t\t\tif (limit < 0) {\n\t\t\t\tthrow new Error(\"Limit can't be negative\");\n\t\t\t}\n\t\t}\n\n\t\tif (sort) {\n\t\t\tsortPredicate = ModelSortPredicateCreator.createFromExisting(\n\t\t\t\tmodelDefinition,\n\t\t\t\tsort\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tlimit,\n\t\t\tpage,\n\t\t\tsort: sortPredicate,\n\t\t};\n\t}\n\n\t/**\n\t * Examines the configured `syncExpressions` and produces a WeakMap of\n\t * SchemaModel -> predicate to use during sync.\n\t */\n\tprivate async processSyncExpressions(): Promise<\n\t\tWeakMap<SchemaModel, ModelPredicate<any>>\n\t> {\n\t\tif (!this.syncExpressions || !this.syncExpressions.length) {\n\t\t\treturn new WeakMap<SchemaModel, ModelPredicate<any>>();\n\t\t}\n\n\t\tconst syncPredicates = await Promise.all(\n\t\t\tthis.syncExpressions.map(\n\t\t\t\tasync (\n\t\t\t\t\tsyncExpression: SyncExpression\n\t\t\t\t): Promise<[SchemaModel, ModelPredicate<any>]> => {\n\t\t\t\t\tconst { modelConstructor, conditionProducer } = await syncExpression;\n\t\t\t\t\tconst modelDefinition = getModelDefinition(modelConstructor)!;\n\n\t\t\t\t\t// conditionProducer is either a predicate, e.g. (c) => c.field.eq(1)\n\t\t\t\t\t// OR a function/promise that returns a predicate\n\t\t\t\t\tconst condition = await this.unwrapPromise(conditionProducer);\n\t\t\t\t\tif (isPredicatesAll(condition)) {\n\t\t\t\t\t\treturn [modelDefinition as any, null as any];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst predicate = internals(\n\t\t\t\t\t\tcondition(\n\t\t\t\t\t\t\tpredicateFor({\n\t\t\t\t\t\t\t\tbuilder: modelConstructor,\n\t\t\t\t\t\t\t\tschema: modelDefinition,\n\t\t\t\t\t\t\t\tpkField: extractPrimaryKeyFieldNames(modelDefinition),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t).toStoragePredicate<any>();\n\n\t\t\t\t\treturn [modelDefinition as any, predicate as any];\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\treturn this.weakMapFromEntries(syncPredicates);\n\t}\n\n\tprivate createFromCondition(\n\t\tmodelDefinition: SchemaModel,\n\t\tcondition: ProducerModelPredicate<PersistentModel>\n\t) {\n\t\ttry {\n\t\t\treturn ModelPredicateCreator.createFromExisting(\n\t\t\t\tmodelDefinition,\n\t\t\t\tcondition\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogger.error('Error creating Sync Predicate');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async unwrapPromise<T extends PersistentModel>(\n\t\tconditionProducer\n\t): Promise<ModelPredicateExtender<T>> {\n\t\ttry {\n\t\t\tconst condition = await conditionProducer();\n\t\t\treturn condition || conditionProducer;\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\treturn conditionProducer;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate weakMapFromEntries(\n\t\tentries: [SchemaModel, ModelPredicate<any>][]\n\t): WeakMap<SchemaModel, ModelPredicate<any>> {\n\t\treturn entries.reduce((map, [modelDefinition, predicate]) => {\n\t\t\tif (map.has(modelDefinition)) {\n\t\t\t\tconst { name } = modelDefinition;\n\t\t\t\tlogger.warn(\n\t\t\t\t\t`You can only utilize one Sync Expression per model.\n          Subsequent sync expressions for the ${name} model will be ignored.`\n\t\t\t\t);\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\tif (predicate) {\n\t\t\t\tmap.set(modelDefinition, predicate);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}, new WeakMap<SchemaModel, ModelPredicate<any>>());\n\t}\n\n\t/**\n\t * A session ID to allow CMS to open databases against multiple apps.\n\t * This session ID is only expected be set by AWS Amplify Studio.\n\t */\n\tprivate retrieveSessionId(): string | undefined {\n\t\ttry {\n\t\t\tconst sessionId = sessionStorage.getItem('datastoreSessionId');\n\n\t\t\tif (sessionId) {\n\t\t\t\tconst { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n\n\t\t\t\tconst appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n\t\t\t\tconst [appSyncId] = appSyncUrl.split('.');\n\n\t\t\t\treturn `${sessionId}-${appSyncId}`;\n\t\t\t}\n\t\t} catch {}\n\n\t\treturn undefined;\n\t}\n}\n\nconst instance = new DataStore();\nAmplify.register(instance);\n\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}