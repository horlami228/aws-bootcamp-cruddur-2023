{"ast":null,"code":"import { __awaiter, __extends, __generator, __read } from \"tslib\";\nimport { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { AbstractInterpretPredictionsProvider } from '../types/Providers';\nimport { InterpretTextCategories } from '../types';\nimport { ComprehendClient, DetectSyntaxCommand, DetectEntitiesCommand, DetectDominantLanguageCommand, DetectKeyPhrasesCommand, DetectSentimentCommand } from '@aws-sdk/client-comprehend';\nvar AmazonAIInterpretPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIInterpretPredictionsProvider, _super);\n  function AmazonAIInterpretPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n  AmazonAIInterpretPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIInterpretPredictionsProvider';\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.interpretText = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, interpretTypeConfig, _f, _g, _h, _j, text, _k, interpretType, _l, _m, _o, language, comprehendClient, doAll, languagePromise, languageDetectionParams, entitiesPromise, LanguageCode, _p, entitiesDetectionParams, sentimentPromise, LanguageCode, _q, sentimentParams, syntaxPromise, LanguageCode, _r, syntaxParams, keyPhrasesPromise, LanguageCode, _s, keyPhrasesParams, results, err_1;\n        return __generator(this, function (_t) {\n          switch (_t.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _t.sent();\n              if (!credentials) return [2 /*return*/, rej('No credentials')];\n              _a = this._config.interpretText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, interpretTypeConfig = _e === void 0 ? '' : _e;\n              _f = input.text, _g = _f === void 0 ? {} : _f, _h = _g.source, _j = (_h === void 0 ? {} : _h).text, text = _j === void 0 ? '' : _j, _k = _g.type, interpretType = _k === void 0 ? interpretTypeConfig : _k;\n              _l = input.text, _m = (_l === void 0 ? {} : _l).source, _o = (_m === void 0 ? {} : _m).language, language = _o === void 0 ? undefined : _o;\n              comprehendClient = new ComprehendClient({\n                credentials: credentials,\n                region: region,\n                customUserAgent: getAmplifyUserAgent()\n              });\n              doAll = interpretType === InterpretTextCategories.ALL;\n              if (doAll || interpretType === InterpretTextCategories.LANGUAGE) {\n                languageDetectionParams = {\n                  Text: text\n                };\n                languagePromise = this.detectLanguage(languageDetectionParams, comprehendClient);\n              }\n              if (!(doAll || interpretType === InterpretTextCategories.ENTITIES)) return [3 /*break*/, 4];\n              _p = language;\n              if (_p) return [3 /*break*/, 3];\n              return [4 /*yield*/, languagePromise];\n            case 2:\n              _p = _t.sent();\n              _t.label = 3;\n            case 3:\n              LanguageCode = _p;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              entitiesDetectionParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              entitiesPromise = this.detectEntities(entitiesDetectionParams, comprehendClient);\n              _t.label = 4;\n            case 4:\n              if (!(doAll || interpretType === InterpretTextCategories.SENTIMENT)) return [3 /*break*/, 7];\n              _q = language;\n              if (_q) return [3 /*break*/, 6];\n              return [4 /*yield*/, languagePromise];\n            case 5:\n              _q = _t.sent();\n              _t.label = 6;\n            case 6:\n              LanguageCode = _q;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              sentimentParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              sentimentPromise = this.detectSentiment(sentimentParams, comprehendClient);\n              _t.label = 7;\n            case 7:\n              if (!(doAll || interpretType === InterpretTextCategories.SYNTAX)) return [3 /*break*/, 10];\n              _r = language;\n              if (_r) return [3 /*break*/, 9];\n              return [4 /*yield*/, languagePromise];\n            case 8:\n              _r = _t.sent();\n              _t.label = 9;\n            case 9:\n              LanguageCode = _r;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              syntaxParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              syntaxPromise = this.detectSyntax(syntaxParams, comprehendClient);\n              _t.label = 10;\n            case 10:\n              if (!(doAll || interpretType === InterpretTextCategories.KEY_PHRASES)) return [3 /*break*/, 13];\n              _s = language;\n              if (_s) return [3 /*break*/, 12];\n              return [4 /*yield*/, languagePromise];\n            case 11:\n              _s = _t.sent();\n              _t.label = 12;\n            case 12:\n              LanguageCode = _s;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              keyPhrasesParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              keyPhrasesPromise = this.detectKeyPhrases(keyPhrasesParams, comprehendClient);\n              _t.label = 13;\n            case 13:\n              _t.trys.push([13, 15,, 16]);\n              return [4 /*yield*/, Promise.all([languagePromise, entitiesPromise, sentimentPromise, syntaxPromise, keyPhrasesPromise])];\n            case 14:\n              results = _t.sent();\n              res({\n                textInterpretation: {\n                  keyPhrases: results[4] || [],\n                  language: results[0] || '',\n                  sentiment: results[2],\n                  syntax: results[3] || [],\n                  textEntities: results[1] || []\n                }\n              });\n              return [3 /*break*/, 16];\n            case 15:\n              err_1 = _t.sent();\n              rej(err_1);\n              return [3 /*break*/, 16];\n            case 16:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectKeyPhrases = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectKeyPhrasesCommand, data, _a, KeyPhrases, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            detectKeyPhrasesCommand = new DetectKeyPhrasesCommand(params);\n            return [4 /*yield*/, comprehend.send(detectKeyPhrasesCommand)];\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).KeyPhrases, KeyPhrases = _a === void 0 ? [] : _a;\n            return [2 /*return*/, KeyPhrases.map(function (_a) {\n              var text = _a.Text;\n              return {\n                text: text\n              };\n            })];\n          case 2:\n            err_2 = _b.sent();\n            if (err_2.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_2.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectSyntax = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectSyntaxCommand, data, _a, SyntaxTokens, err_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            detectSyntaxCommand = new DetectSyntaxCommand(params);\n            return [4 /*yield*/, comprehend.send(detectSyntaxCommand)];\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).SyntaxTokens, SyntaxTokens = _a === void 0 ? [] : _a;\n            return [2 /*return*/, this.serializeSyntaxFromComprehend(SyntaxTokens)];\n          case 2:\n            err_3 = _b.sent();\n            if (err_3.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_3.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.serializeSyntaxFromComprehend = function (tokens) {\n    var response = [];\n    if (tokens && Array.isArray(tokens)) {\n      response = tokens.map(function (_a) {\n        var _b = _a.Text,\n          text = _b === void 0 ? '' : _b,\n          _c = _a.PartOfSpeech,\n          _d = (_c === void 0 ? {} : _c).Tag,\n          syntax = _d === void 0 ? '' : _d;\n        return {\n          text: text,\n          syntax: syntax\n        };\n      });\n    }\n    return response;\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectSentiment = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectSentimentCommand, data, _a, _b, predominant, _c, _d, _e, positive, _f, negative, _g, neutral, _h, mixed, err_4;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            _j.trys.push([0, 2,, 3]);\n            detectSentimentCommand = new DetectSentimentCommand(params);\n            return [4 /*yield*/, comprehend.send(detectSentimentCommand)];\n          case 1:\n            data = _j.sent();\n            _a = data, _b = _a.Sentiment, predominant = _b === void 0 ? '' : _b, _c = _a.SentimentScore, _d = _c === void 0 ? {} : _c, _e = _d.Positive, positive = _e === void 0 ? 0 : _e, _f = _d.Negative, negative = _f === void 0 ? 0 : _f, _g = _d.Neutral, neutral = _g === void 0 ? 0 : _g, _h = _d.Mixed, mixed = _h === void 0 ? 0 : _h;\n            return [2 /*return*/, {\n              predominant: predominant,\n              positive: positive,\n              negative: negative,\n              neutral: neutral,\n              mixed: mixed\n            }];\n          case 2:\n            err_4 = _j.sent();\n            if (err_4.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_4.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectEntities = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectEntitiesCommand, data, _a, Entities, err_5;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            detectEntitiesCommand = new DetectEntitiesCommand(params);\n            return [4 /*yield*/, comprehend.send(detectEntitiesCommand)];\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).Entities, Entities = _a === void 0 ? [] : _a;\n            return [2 /*return*/, this.serializeEntitiesFromComprehend(Entities)];\n          case 2:\n            err_5 = _b.sent();\n            if (err_5.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_5.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.serializeEntitiesFromComprehend = function (data) {\n    var response = [];\n    if (data && Array.isArray(data)) {\n      response = data.map(function (_a) {\n        var type = _a.Type,\n          text = _a.Text;\n        return {\n          type: type,\n          text: text\n        };\n      });\n    }\n    return response;\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectLanguage = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectDominantLanguageCommand, data, _a, _b, LanguageCode, err_6;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2,, 3]);\n            detectDominantLanguageCommand = new DetectDominantLanguageCommand(params);\n            return [4 /*yield*/, comprehend.send(detectDominantLanguageCommand)];\n          case 1:\n            data = _c.sent();\n            _a = (data || {}).Languages, _b = __read(_a === void 0 ? [''] : _a, 1), LanguageCode = _b[0].LanguageCode;\n            if (!LanguageCode) {\n              Promise.reject('Language not detected');\n            }\n            return [2 /*return*/, data.Languages[0].LanguageCode];\n          case 2:\n            err_6 = _c.sent();\n            if (err_6.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_6.message);\n            }\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return AmazonAIInterpretPredictionsProvider;\n}(AbstractInterpretPredictionsProvider);\nexport { AmazonAIInterpretPredictionsProvider };","map":{"version":3,"mappings":"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","names":["Credentials","getAmplifyUserAgent","AbstractInterpretPredictionsProvider","InterpretTextCategories","ComprehendClient","DetectSyntaxCommand","DetectEntitiesCommand","DetectDominantLanguageCommand","DetectKeyPhrasesCommand","DetectSentimentCommand","__extends","_super","AmazonAIInterpretPredictionsProvider","input","Promise","res","rej","get","credentials","_t","_a","_config","_b","_c","region","_d","_e","interpretTypeConfig","_f","text","_g","_h","_j","_k","interpretType","_l","_m","_o","language","undefined","comprehendClient","customUserAgent","doAll","ALL","LANGUAGE","languageDetectionParams","Text","languagePromise","detectLanguage","ENTITIES","_p","LanguageCode","entitiesDetectionParams","entitiesPromise","detectEntities","SENTIMENT","_q","sentimentParams","sentimentPromise","detectSentiment","SYNTAX","_r","syntaxParams","syntaxPromise","detectSyntax","KEY_PHRASES","_s","keyPhrasesParams","keyPhrasesPromise","detectKeyPhrases","all","results","textInterpretation","keyPhrases","sentiment","syntax","textEntities","err_1","params","comprehend","detectKeyPhrasesCommand","send","data","KeyPhrases","map","err_2","code","reject","message","detectSyntaxCommand","SyntaxTokens","serializeSyntaxFromComprehend","err_3","tokens","response","Array","isArray","detectSentimentCommand","predominant","positive","negative","neutral","mixed","err_4","detectEntitiesCommand","Entities","serializeEntitiesFromComprehend","err_5","type","detectDominantLanguageCommand","Languages","err_6"],"sources":["/frontend-react-js/node_modules/@aws-amplify/predictions/src/Providers/AmazonAIInterpretPredictionsProvider.ts"],"sourcesContent":["import { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { AbstractInterpretPredictionsProvider } from '../types/Providers';\n\nimport {\n\tInterpretTextInput,\n\tInterpretTextOutput,\n\tInterpretTextCategories,\n\tTextEntities,\n\tTextSentiment,\n\tTextSyntax,\n\tKeyPhrases,\n} from '../types';\nimport {\n\tComprehendClient,\n\tDetectSyntaxCommand,\n\tDetectEntitiesCommand,\n\tDetectDominantLanguageCommand,\n\tDetectKeyPhrasesCommand,\n\tDetectSentimentCommand,\n} from '@aws-sdk/client-comprehend';\n\nexport class AmazonAIInterpretPredictionsProvider extends AbstractInterpretPredictionsProvider {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIInterpretPredictionsProvider';\n\t}\n\n\tinterpretText(input: InterpretTextInput): Promise<InterpretTextOutput> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return rej('No credentials');\n\t\t\tconst {\n\t\t\t\tinterpretText: {\n\t\t\t\t\tregion = '',\n\t\t\t\t\tdefaults: { type: interpretTypeConfig = '' } = {},\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tconst {\n\t\t\t\ttext: {\n\t\t\t\t\tsource: { text = '' } = {},\n\t\t\t\t\ttype: interpretType = interpretTypeConfig,\n\t\t\t\t} = {},\n\t\t\t} = ({} = input);\n\n\t\t\tconst { text: { source: { language = undefined } = {} } = {} } = ({} =\n\t\t\t\tinput as any); // language is only required for specific interpret types\n\n\t\t\tconst comprehendClient = new ComprehendClient({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\t});\n\n\t\t\tconst doAll = interpretType === InterpretTextCategories.ALL;\n\n\t\t\tlet languagePromise: Promise<string>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.LANGUAGE) {\n\t\t\t\tconst languageDetectionParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t};\n\t\t\t\tlanguagePromise = this.detectLanguage(\n\t\t\t\t\tlanguageDetectionParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet entitiesPromise: Promise<Array<TextEntities>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.ENTITIES) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst entitiesDetectionParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tentitiesPromise = this.detectEntities(\n\t\t\t\t\tentitiesDetectionParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet sentimentPromise: Promise<TextSentiment>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.SENTIMENT) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst sentimentParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tsentimentPromise = this.detectSentiment(\n\t\t\t\t\tsentimentParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet syntaxPromise: Promise<Array<TextSyntax>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.SYNTAX) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst syntaxParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tsyntaxPromise = this.detectSyntax(syntaxParams, comprehendClient);\n\t\t\t}\n\n\t\t\tlet keyPhrasesPromise: Promise<Array<KeyPhrases>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.KEY_PHRASES) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst keyPhrasesParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tkeyPhrasesPromise = this.detectKeyPhrases(\n\t\t\t\t\tkeyPhrasesParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst results = await Promise.all([\n\t\t\t\t\tlanguagePromise,\n\t\t\t\t\tentitiesPromise,\n\t\t\t\t\tsentimentPromise,\n\t\t\t\t\tsyntaxPromise,\n\t\t\t\t\tkeyPhrasesPromise,\n\t\t\t\t]);\n\t\t\t\tres({\n\t\t\t\t\ttextInterpretation: {\n\t\t\t\t\t\tkeyPhrases: results[4] || [],\n\t\t\t\t\t\tlanguage: results[0] || '',\n\t\t\t\t\t\tsentiment: results[2],\n\t\t\t\t\t\tsyntax: <TextSyntax[]>results[3] || [],\n\t\t\t\t\t\ttextEntities: <TextEntities[]>results[1] || [],\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\trej(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async detectKeyPhrases(\n\t\tparams,\n\t\tcomprehend\n\t): Promise<Array<KeyPhrases>> {\n\t\ttry {\n\t\t\tconst detectKeyPhrasesCommand = new DetectKeyPhrasesCommand(params);\n\t\t\tconst data = await comprehend.send(detectKeyPhrasesCommand);\n\t\t\tconst { KeyPhrases = [] } = data || {};\n\t\t\treturn KeyPhrases.map(({ Text: text }) => {\n\t\t\t\treturn { text };\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async detectSyntax(params, comprehend): Promise<Array<TextSyntax>> {\n\t\ttry {\n\t\t\tconst detectSyntaxCommand = new DetectSyntaxCommand(params);\n\t\t\tconst data = await comprehend.send(detectSyntaxCommand);\n\t\t\tconst { SyntaxTokens = [] } = data || {};\n\t\t\treturn this.serializeSyntaxFromComprehend(SyntaxTokens);\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate serializeSyntaxFromComprehend(tokens): Array<TextSyntax> {\n\t\tlet response = [];\n\t\tif (tokens && Array.isArray(tokens)) {\n\t\t\tresponse = tokens.map(\n\t\t\t\t({ Text: text = '', PartOfSpeech: { Tag: syntax = '' } = {} }) => {\n\t\t\t\t\treturn { text, syntax };\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async detectSentiment(params, comprehend): Promise<TextSentiment> {\n\t\ttry {\n\t\t\tconst detectSentimentCommand = new DetectSentimentCommand(params);\n\t\t\tconst data = await comprehend.send(detectSentimentCommand);\n\t\t\tconst {\n\t\t\t\tSentiment: predominant = '',\n\t\t\t\tSentimentScore: {\n\t\t\t\t\tPositive: positive = 0,\n\t\t\t\t\tNegative: negative = 0,\n\t\t\t\t\tNeutral: neutral = 0,\n\t\t\t\t\tMixed: mixed = 0,\n\t\t\t\t} = {},\n\t\t\t} = ({} = data);\n\t\t\treturn { predominant, positive, negative, neutral, mixed };\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async detectEntities(\n\t\tparams,\n\t\tcomprehend\n\t): Promise<Array<TextEntities>> {\n\t\ttry {\n\t\t\tconst detectEntitiesCommand = new DetectEntitiesCommand(params);\n\t\t\tconst data = await comprehend.send(detectEntitiesCommand);\n\t\t\tconst { Entities = [] } = data || {};\n\t\t\treturn this.serializeEntitiesFromComprehend(Entities);\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate serializeEntitiesFromComprehend(data): Array<TextEntities> {\n\t\tlet response = [];\n\t\tif (data && Array.isArray(data)) {\n\t\t\tresponse = data.map(({ Type: type, Text: text }) => {\n\t\t\t\treturn { type, text };\n\t\t\t});\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async detectLanguage(params, comprehend): Promise<string> {\n\t\ttry {\n\t\t\tconst detectDominantLanguageCommand = new DetectDominantLanguageCommand(\n\t\t\t\tparams\n\t\t\t);\n\t\t\tconst data = await comprehend.send(detectDominantLanguageCommand);\n\t\t\tconst { Languages: [{ LanguageCode }] = [''] } = ({} = data || {});\n\t\t\tif (!LanguageCode) {\n\t\t\t\tPromise.reject('Language not detected');\n\t\t\t}\n\t\t\treturn data.Languages[0].LanguageCode;\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}