{"ast":null,"code":"import { __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { browserOrNode, ConsoleLogger as Logger, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType } from '../types';\nimport { getNow, SYNC, USER } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, getIdentifierValue, predicateToGraphQLCondition } from './utils';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nexport var ControlMessage;\n(function (ControlMessage) {\n  ControlMessage[\"SYNC_ENGINE_STORAGE_SUBSCRIBED\"] = \"storageSubscribed\";\n  ControlMessage[\"SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\"] = \"subscriptionsEstablished\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_STARTED\"] = \"syncQueriesStarted\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_READY\"] = \"syncQueriesReady\";\n  ControlMessage[\"SYNC_ENGINE_MODEL_SYNCED\"] = \"modelSynced\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED\"] = \"outboxMutationEnqueued\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED\"] = \"outboxMutationProcessed\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_STATUS\"] = \"outboxStatus\";\n  ControlMessage[\"SYNC_ENGINE_NETWORK_STATUS\"] = \"networkStatus\";\n  ControlMessage[\"SYNC_ENGINE_READY\"] = \"ready\";\n})(ControlMessage || (ControlMessage = {}));\nvar SyncEngine = /** @class */function () {\n  function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, conflictHandler, errorHandler, syncPredicates, amplifyConfig, authModeStrategy, amplifyContext, connectivityMonitor) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.modelClasses = modelClasses;\n    this.userModelClasses = userModelClasses;\n    this.storage = storage;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.amplifyContext = amplifyContext;\n    this.connectivityMonitor = connectivityMonitor;\n    this.online = false;\n    this.modelSyncedStatus = new WeakMap();\n    this.runningProcesses = new BackgroundProcessManager();\n    var MutationEvent = this.modelClasses['MutationEvent'];\n    this.outbox = new MutationEventOutbox(this.schema, MutationEvent, modelInstanceCreator, ownSymbol);\n    this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n    this.syncQueriesProcessor = new SyncProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n    this.subscriptionsProcessor = new SubscriptionProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n    this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, this.amplifyConfig, this.authModeStrategy, errorHandler, conflictHandler, this.amplifyContext);\n    this.datastoreConnectivity = this.connectivityMonitor || new DataStoreConnectivity();\n  }\n  SyncEngine.prototype.getModelSyncedStatus = function (modelConstructor) {\n    return this.modelSyncedStatus.get(modelConstructor);\n  };\n  SyncEngine.prototype.start = function (params) {\n    var _this = this;\n    return new Observable(function (observer) {\n      logger.log('starting sync engine...');\n      var subscriptions = [];\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var err_1, startPromise, hasMutationsInOutbox;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, this.setupModels(params)];\n              case 1:\n                _a.sent();\n                return [3 /*break*/, 3];\n              case 2:\n                err_1 = _a.sent();\n                observer.error(err_1);\n                return [2 /*return*/];\n              case 3:\n                startPromise = new Promise(function (doneStarting, failedStarting) {\n                  _this.datastoreConnectivity.status().subscribe(function (_a) {\n                    var online = _a.online;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var _this = this;\n                      return __generator(this, function (_b) {\n                        return [2 /*return*/, this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var ctlSubsObservable_1, dataSubsObservable, err_2, error_1;\n                            var _a;\n                            var _this = this;\n                            return __generator(this, function (_b) {\n                              switch (_b.label) {\n                                case 0:\n                                  if (!(online && !this.online)) return [3 /*break*/, 10];\n                                  this.online = online;\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                    data: {\n                                      active: this.online\n                                    }\n                                  });\n                                  dataSubsObservable = void 0;\n                                  if (!isNode) return [3 /*break*/, 1];\n                                  logger.warn('Realtime disabled when in a server-side environment');\n                                  return [3 /*break*/, 6];\n                                case 1:\n                                  //#region GraphQL Subscriptions\n                                  _a = __read(this.subscriptionsProcessor.start(), 2), ctlSubsObservable_1 = _a[0], dataSubsObservable = _a[1];\n                                  _b.label = 2;\n                                case 2:\n                                  _b.trys.push([2, 4,, 5]);\n                                  return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                    onTerminate.then(reject);\n                                    var ctlSubsSubscription = ctlSubsObservable_1.subscribe({\n                                      next: function (msg) {\n                                        if (msg === CONTROL_MSG.CONNECTED) {\n                                          resolve();\n                                        }\n                                      },\n                                      error: function (err) {\n                                        reject(err);\n                                        var handleDisconnect = _this.disconnectionHandler();\n                                        handleDisconnect(err);\n                                      }\n                                    });\n                                    subscriptions.push(ctlSubsSubscription);\n                                  })];\n                                case 3:\n                                  _b.sent();\n                                  return [3 /*break*/, 5];\n                                case 4:\n                                  err_2 = _b.sent();\n                                  observer.error(err_2);\n                                  failedStarting();\n                                  return [2 /*return*/];\n                                case 5:\n                                  logger.log('Realtime ready');\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\n                                  });\n                                  _b.label = 6;\n                                case 6:\n                                  _b.trys.push([6, 8,, 9]);\n                                  return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                    var syncQuerySubscription = _this.syncQueriesObservable().subscribe({\n                                      next: function (message) {\n                                        var type = message.type;\n                                        if (type === ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY) {\n                                          resolve();\n                                        }\n                                        observer.next(message);\n                                      },\n                                      complete: function () {\n                                        resolve();\n                                      },\n                                      error: function (error) {\n                                        reject(error);\n                                      }\n                                    });\n                                    if (syncQuerySubscription) {\n                                      subscriptions.push(syncQuerySubscription);\n                                    }\n                                  })];\n                                case 7:\n                                  _b.sent();\n                                  return [3 /*break*/, 9];\n                                case 8:\n                                  error_1 = _b.sent();\n                                  observer.error(error_1);\n                                  failedStarting();\n                                  return [2 /*return*/];\n                                case 9:\n                                  //#endregion\n                                  //#region process mutations (outbox)\n                                  subscriptions.push(this.mutationsProcessor.start().subscribe(function (_a) {\n                                    var modelDefinition = _a.modelDefinition,\n                                      item = _a.model,\n                                      hasMore = _a.hasMore;\n                                    return _this.runningProcesses.add(function () {\n                                      return __awaiter(_this, void 0, void 0, function () {\n                                        var modelConstructor, model;\n                                        var _this = this;\n                                        return __generator(this, function (_a) {\n                                          switch (_a.label) {\n                                            case 0:\n                                              modelConstructor = this.userModelClasses[modelDefinition.name];\n                                              model = this.modelInstanceCreator(modelConstructor, item);\n                                              return [4 /*yield*/, this.storage.runExclusive(function (storage) {\n                                                return _this.modelMerger.merge(storage, model, modelDefinition);\n                                              })];\n                                            case 1:\n                                              _a.sent();\n                                              observer.next({\n                                                type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n                                                data: {\n                                                  model: modelConstructor,\n                                                  element: model\n                                                }\n                                              });\n                                              observer.next({\n                                                type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                                data: {\n                                                  isEmpty: !hasMore\n                                                }\n                                              });\n                                              return [2 /*return*/];\n                                          }\n                                        });\n                                      });\n                                    }, 'mutation processor event');\n                                  }));\n                                  //#endregion\n                                  //#region Merge subscriptions buffer\n                                  // TODO: extract to function\n                                  if (!isNode) {\n                                    subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                      var _b = __read(_a, 3),\n                                        _transformerMutationType = _b[0],\n                                        modelDefinition = _b[1],\n                                        item = _b[2];\n                                      return _this.runningProcesses.add(function () {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var modelConstructor, model;\n                                          var _this = this;\n                                          return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                              case 0:\n                                                modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                model = this.modelInstanceCreator(modelConstructor, item);\n                                                return [4 /*yield*/, this.storage.runExclusive(function (storage) {\n                                                  return _this.modelMerger.merge(storage, model, modelDefinition);\n                                                })];\n                                              case 1:\n                                                _a.sent();\n                                                return [2 /*return*/];\n                                            }\n                                          });\n                                        });\n                                      }, 'subscription dataSubsObservable event');\n                                    }));\n                                  }\n                                  return [3 /*break*/, 11];\n                                case 10:\n                                  if (!online) {\n                                    this.online = online;\n                                    observer.next({\n                                      type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                      data: {\n                                        active: this.online\n                                      }\n                                    });\n                                    subscriptions.forEach(function (sub) {\n                                      return sub.unsubscribe();\n                                    });\n                                    subscriptions = [];\n                                  }\n                                  _b.label = 11;\n                                case 11:\n                                  doneStarting();\n                                  return [2 /*return*/];\n                              }\n                            });\n                          });\n                        }, 'datastore connectivity event')];\n                      });\n                    });\n                  });\n                });\n                this.storage.observe(null, null, ownSymbol).filter(function (_a) {\n                  var model = _a.model;\n                  var modelDefinition = _this.getModelDefinition(model);\n                  return modelDefinition.syncable === true;\n                }).subscribe({\n                  next: function (_a) {\n                    var opType = _a.opType,\n                      model = _a.model,\n                      element = _a.element,\n                      condition = _a.condition;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var _this = this;\n                      return __generator(this, function (_b) {\n                        return [2 /*return*/, this.runningProcesses.add(function () {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var namespace, MutationEventConstructor, modelDefinition, graphQLCondition, mutationEvent;\n                            return __generator(this, function (_a) {\n                              switch (_a.label) {\n                                case 0:\n                                  namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                                  MutationEventConstructor = this.modelClasses['MutationEvent'];\n                                  modelDefinition = this.getModelDefinition(model);\n                                  graphQLCondition = predicateToGraphQLCondition(condition, modelDefinition);\n                                  mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                                  return [4 /*yield*/, this.outbox.enqueue(this.storage, mutationEvent)];\n                                case 1:\n                                  _a.sent();\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n                                    data: {\n                                      model: model,\n                                      element: element\n                                    }\n                                  });\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                    data: {\n                                      isEmpty: false\n                                    }\n                                  });\n                                  return [4 /*yield*/, startPromise];\n                                case 2:\n                                  _a.sent();\n                                  if (this.online) {\n                                    this.mutationsProcessor.resume();\n                                  }\n                                  return [2 /*return*/];\n                              }\n                            });\n                          });\n                        }, 'storage event')];\n                      });\n                    });\n                  }\n                });\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED\n                });\n                return [4 /*yield*/, this.outbox.peek(this.storage)];\n              case 4:\n                hasMutationsInOutbox = _a.sent() === undefined;\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                  data: {\n                    isEmpty: hasMutationsInOutbox\n                  }\n                });\n                return [4 /*yield*/, startPromise];\n              case 5:\n                _a.sent();\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_READY\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, 'sync start');\n    });\n  };\n  SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelLastSync, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = Map.bind;\n            return [4 /*yield*/, this.runningProcesses.add(function () {\n              return _this.getModelsMetadata();\n            }, 'sync/index getModelsMetadataWithNextFullSync')];\n          case 1:\n            modelLastSync = new (_a.apply(Map, [void 0, _b.sent().map(function (_a) {\n              var namespace = _a.namespace,\n                model = _a.model,\n                lastSync = _a.lastSync,\n                lastFullSync = _a.lastFullSync,\n                fullSyncInterval = _a.fullSyncInterval,\n                lastSyncPredicate = _a.lastSyncPredicate;\n              var nextFullSync = lastFullSync + fullSyncInterval;\n              var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp ? 0 // perform full sync if expired\n              : lastSync; // perform delta sync\n              return [_this.schema.namespaces[namespace].models[model], [namespace, syncFrom]];\n            })]))();\n            return [2 /*return*/, modelLastSync];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.syncQueriesObservable = function () {\n    var _this = this;\n    if (!this.online) {\n      return Observable.of();\n    }\n    return new Observable(function (observer) {\n      var syncQueriesSubscription;\n      _this.runningProcesses.isOpen && _this.runningProcesses.add(function (onTerminate) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var terminated, _loop_1, this_1;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                terminated = false;\n                _loop_1 = function () {\n                  var count, modelLastSync, paginatingModels, newestFullSyncStartedAt, theInterval, start, duration, newestStartedAt, msNextFullSync;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        count = new WeakMap();\n                        return [4 /*yield*/, this_1.getModelsMetadataWithNextFullSync(Date.now())];\n                      case 1:\n                        modelLastSync = _a.sent();\n                        paginatingModels = new Set(modelLastSync.keys());\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                          if (!_this.runningProcesses.isOpen) resolve();\n                          onTerminate.then(function () {\n                            return resolve();\n                          });\n                          syncQueriesSubscription = _this.syncQueriesProcessor.start(modelLastSync).subscribe({\n                            next: function (_a) {\n                              var namespace = _a.namespace,\n                                modelDefinition = _a.modelDefinition,\n                                items = _a.items,\n                                done = _a.done,\n                                startedAt = _a.startedAt,\n                                isFullSync = _a.isFullSync;\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var modelConstructor, modelName, modelMetadata_1, lastFullSync, fullSyncInterval, counts;\n                                var _this = this;\n                                return __generator(this, function (_b) {\n                                  switch (_b.label) {\n                                    case 0:\n                                      modelConstructor = this.userModelClasses[modelDefinition.name];\n                                      if (!count.has(modelConstructor)) {\n                                        count.set(modelConstructor, {\n                                          new: 0,\n                                          updated: 0,\n                                          deleted: 0\n                                        });\n                                        start = getNow();\n                                        newestStartedAt = newestStartedAt === undefined ? startedAt : Math.max(newestStartedAt, startedAt);\n                                      }\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n                                      return [4 /*yield*/, this.storage.runExclusive(function (storage) {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var idsInOutbox, oneByOne, page, opTypeCount, oneByOne_1, oneByOne_1_1, item, opType, e_1_1, _a, _b, _c, counts;\n                                          var e_1, _d;\n                                          return __generator(this, function (_e) {\n                                            switch (_e.label) {\n                                              case 0:\n                                                return [4 /*yield*/, this.outbox.getModelIds(storage)];\n                                              case 1:\n                                                idsInOutbox = _e.sent();\n                                                oneByOne = [];\n                                                page = items.filter(function (item) {\n                                                  var itemId = getIdentifierValue(modelDefinition, item);\n                                                  if (!idsInOutbox.has(itemId)) {\n                                                    return true;\n                                                  }\n                                                  oneByOne.push(item);\n                                                  return false;\n                                                });\n                                                opTypeCount = [];\n                                                _e.label = 2;\n                                              case 2:\n                                                _e.trys.push([2, 7, 8, 9]);\n                                                oneByOne_1 = __values(oneByOne), oneByOne_1_1 = oneByOne_1.next();\n                                                _e.label = 3;\n                                              case 3:\n                                                if (!!oneByOne_1_1.done) return [3 /*break*/, 6];\n                                                item = oneByOne_1_1.value;\n                                                return [4 /*yield*/, this.modelMerger.merge(storage, item, modelDefinition)];\n                                              case 4:\n                                                opType = _e.sent();\n                                                if (opType !== undefined) {\n                                                  opTypeCount.push([item, opType]);\n                                                }\n                                                _e.label = 5;\n                                              case 5:\n                                                oneByOne_1_1 = oneByOne_1.next();\n                                                return [3 /*break*/, 3];\n                                              case 6:\n                                                return [3 /*break*/, 9];\n                                              case 7:\n                                                e_1_1 = _e.sent();\n                                                e_1 = {\n                                                  error: e_1_1\n                                                };\n                                                return [3 /*break*/, 9];\n                                              case 8:\n                                                try {\n                                                  if (oneByOne_1_1 && !oneByOne_1_1.done && (_d = oneByOne_1.return)) _d.call(oneByOne_1);\n                                                } finally {\n                                                  if (e_1) throw e_1.error;\n                                                }\n                                                return [7 /*endfinally*/];\n                                              case 9:\n                                                _b = (_a = opTypeCount.push).apply;\n                                                _c = [opTypeCount];\n                                                return [4 /*yield*/, this.modelMerger.mergePage(storage, modelConstructor, page, modelDefinition)];\n                                              case 10:\n                                                _b.apply(_a, _c.concat([__spread.apply(void 0, [_e.sent()])]));\n                                                counts = count.get(modelConstructor);\n                                                opTypeCount.forEach(function (_a) {\n                                                  var _b = __read(_a, 2),\n                                                    opType = _b[1];\n                                                  switch (opType) {\n                                                    case OpType.INSERT:\n                                                      counts.new++;\n                                                      break;\n                                                    case OpType.UPDATE:\n                                                      counts.updated++;\n                                                      break;\n                                                    case OpType.DELETE:\n                                                      counts.deleted++;\n                                                      break;\n                                                    default:\n                                                      throw new Error(\"Invalid opType \" + opType);\n                                                  }\n                                                });\n                                                return [2 /*return*/];\n                                            }\n                                          });\n                                        });\n                                      })];\n\n                                    case 1:\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n                                      _b.sent();\n                                      if (!done) return [3 /*break*/, 4];\n                                      modelName = modelDefinition.name;\n                                      return [4 /*yield*/, this.getModelMetadata(namespace, modelName)];\n                                    case 2:\n                                      modelMetadata_1 = _b.sent();\n                                      lastFullSync = modelMetadata_1.lastFullSync, fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                      theInterval = fullSyncInterval;\n                                      newestFullSyncStartedAt = newestFullSyncStartedAt === undefined ? lastFullSync : Math.max(newestFullSyncStartedAt, isFullSync ? startedAt : lastFullSync);\n                                      modelMetadata_1 = this.modelClasses.ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                        draft.lastSync = startedAt;\n                                        draft.lastFullSync = isFullSync ? startedAt : modelMetadata_1.lastFullSync;\n                                      });\n                                      return [4 /*yield*/, this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n                                    case 3:\n                                      _b.sent();\n                                      counts = count.get(modelConstructor);\n                                      this.modelSyncedStatus.set(modelConstructor, true);\n                                      observer.next({\n                                        type: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n                                        data: {\n                                          model: modelConstructor,\n                                          isFullSync: isFullSync,\n                                          isDeltaSync: !isFullSync,\n                                          counts: counts\n                                        }\n                                      });\n                                      paginatingModels.delete(modelDefinition);\n                                      if (paginatingModels.size === 0) {\n                                        duration = getNow() - start;\n                                        resolve();\n                                        observer.next({\n                                          type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                        });\n                                        syncQueriesSubscription.unsubscribe();\n                                      }\n                                      _b.label = 4;\n                                    case 4:\n                                      return [2 /*return*/];\n                                  }\n                                });\n                              });\n                            },\n\n                            error: function (error) {\n                              observer.error(error);\n                            }\n                          });\n                          observer.next({\n                            type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n                            data: {\n                              models: Array.from(paginatingModels).map(function (_a) {\n                                var name = _a.name;\n                                return name;\n                              })\n                            }\n                          });\n                        })];\n                      case 2:\n                        _a.sent();\n                        msNextFullSync = newestFullSyncStartedAt + theInterval - (newestStartedAt + duration);\n                        logger.debug(\"Next fullSync in \" + msNextFullSync / 1000 + \" seconds. (\" + new Date(Date.now() + msNextFullSync) + \")\");\n                        // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                        // a lot of thought into what that contract looks like to\n                        //  support possible use-cases:\n                        //\n                        //  1. non-cancelable\n                        //  2. cancelable, unsleep on exit()\n                        //  3. cancelable, throw Error on exit()\n                        //  4. cancelable, callback first on exit()?\n                        //  5. ... etc. ? ...\n                        //\n                        // TLDR; this is a lot of complexity here for a sleep(),\n                        // but, it's not clear to me yet how to support an\n                        // extensible, centralized cancelable `sleep()` elegantly.\n                        return [4 /*yield*/, this_1.runningProcesses.add(function (onTerminate) {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var sleepTimer, unsleep, sleep;\n                            return __generator(this, function (_a) {\n                              sleep = new Promise(function (_unsleep) {\n                                unsleep = _unsleep;\n                                sleepTimer = setTimeout(unsleep, msNextFullSync);\n                              });\n                              onTerminate.then(function () {\n                                terminated = true;\n                                unsleep();\n                              });\n                              return [2 /*return*/, sleep];\n                            });\n                          });\n                        }, 'syncQueriesObservable sleep')];\n                      case 3:\n                        // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                        // a lot of thought into what that contract looks like to\n                        //  support possible use-cases:\n                        //\n                        //  1. non-cancelable\n                        //  2. cancelable, unsleep on exit()\n                        //  3. cancelable, throw Error on exit()\n                        //  4. cancelable, callback first on exit()?\n                        //  5. ... etc. ? ...\n                        //\n                        // TLDR; this is a lot of complexity here for a sleep(),\n                        // but, it's not clear to me yet how to support an\n                        // extensible, centralized cancelable `sleep()` elegantly.\n                        _a.sent();\n                        return [2 /*return*/];\n                    }\n                  });\n                };\n\n                this_1 = this;\n                _a.label = 1;\n              case 1:\n                if (!(!observer.closed && !terminated)) return [3 /*break*/, 3];\n                return [5 /*yield**/, _loop_1()];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 1];\n              case 3:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, 'syncQueriesObservable main');\n    });\n  };\n  SyncEngine.prototype.disconnectionHandler = function () {\n    var _this = this;\n    return function (msg) {\n      // This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n      if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg || PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n        _this.datastoreConnectivity.socketDisconnected();\n      }\n    };\n  };\n  SyncEngine.prototype.unsubscribeConnectivity = function () {\n    this.datastoreConnectivity.unsubscribe();\n  };\n  /**\n   * Stops all subscription activities and resolves when all activies report\n   * that they're disconnected, done retrying, etc..\n   */\n  SyncEngine.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('stopping sync engine');\n            /**\n             * Gracefully disconnecting subscribers first just prevents *more* work\n             * from entering the pipelines.\n             */\n            this.unsubscribeConnectivity();\n            /**\n             * aggressively shut down any lingering background processes.\n             * some of this might be semi-redundant with unsubscribing. however,\n             * unsubscribing doesn't allow us to wait for settling.\n             * (Whereas `stop()` does.)\n             */\n            return [4 /*yield*/, this.mutationsProcessor.stop()];\n          case 1:\n            /**\n             * aggressively shut down any lingering background processes.\n             * some of this might be semi-redundant with unsubscribing. however,\n             * unsubscribing doesn't allow us to wait for settling.\n             * (Whereas `stop()` does.)\n             */\n            _a.sent();\n            return [4 /*yield*/, this.subscriptionsProcessor.stop()];\n          case 2:\n            _a.sent();\n            return [4 /*yield*/, this.datastoreConnectivity.stop()];\n          case 3:\n            _a.sent();\n            return [4 /*yield*/, this.syncQueriesProcessor.stop()];\n          case 4:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 5:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 6:\n            _a.sent();\n            logger.debug('sync engine stopped and ready to restart');\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.setupModels = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fullSyncInterval, ModelMetadataConstructor, models, savedModel, promises, result, _a, _b, modelMetadata, modelName, e_2_1;\n      var e_2, _c;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            fullSyncInterval = params.fullSyncInterval;\n            ModelMetadataConstructor = this.modelClasses.ModelMetadata;\n            models = [];\n            Object.values(this.schema.namespaces).forEach(function (namespace) {\n              Object.values(namespace.models).filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n              }).forEach(function (model) {\n                models.push([namespace.name, model]);\n                if (namespace.name === USER) {\n                  var modelConstructor = _this.userModelClasses[model.name];\n                  _this.modelSyncedStatus.set(modelConstructor, false);\n                }\n              });\n            });\n            promises = models.map(function (_a) {\n              var _b = __read(_a, 2),\n                namespace = _b[0],\n                model = _b[1];\n              return __awaiter(_this, void 0, void 0, function () {\n                var modelMetadata, syncPredicate, lastSyncPredicate, prevSyncPredicate, syncPredicateUpdated_1;\n                var _c, _d, _e, _f;\n                return __generator(this, function (_g) {\n                  switch (_g.label) {\n                    case 0:\n                      return [4 /*yield*/, this.getModelMetadata(namespace, model.name)];\n                    case 1:\n                      modelMetadata = _g.sent();\n                      syncPredicate = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n                      lastSyncPredicate = syncPredicate ? JSON.stringify(syncPredicate) : null;\n                      if (!(modelMetadata === undefined)) return [3 /*break*/, 3];\n                      return [4 /*yield*/, this.storage.save(this.modelInstanceCreator(ModelMetadataConstructor, {\n                        model: model.name,\n                        namespace: namespace,\n                        lastSync: null,\n                        fullSyncInterval: fullSyncInterval,\n                        lastFullSync: null,\n                        lastSyncPredicate: lastSyncPredicate\n                      }), undefined, ownSymbol)];\n                    case 2:\n                      _c = __read.apply(void 0, [_g.sent(), 1]), _d = __read(_c[0], 1), savedModel = _d[0];\n                      return [3 /*break*/, 5];\n                    case 3:\n                      prevSyncPredicate = modelMetadata.lastSyncPredicate ? modelMetadata.lastSyncPredicate : null;\n                      syncPredicateUpdated_1 = prevSyncPredicate !== lastSyncPredicate;\n                      return [4 /*yield*/, this.storage.save(ModelMetadataConstructor.copyOf(modelMetadata, function (draft) {\n                        draft.fullSyncInterval = fullSyncInterval;\n                        // perform a base sync if the syncPredicate changed in between calls to DataStore.start\n                        // ensures that the local store contains all the data specified by the syncExpression\n                        if (syncPredicateUpdated_1) {\n                          draft.lastSync = null;\n                          draft.lastFullSync = null;\n                          draft.lastSyncPredicate = lastSyncPredicate;\n                        }\n                      }))];\n                    case 4:\n                      _e = __read.apply(void 0, [_g.sent(), 1]), _f = __read(_e[0], 1), savedModel = _f[0];\n                      _g.label = 5;\n                    case 5:\n                      return [2 /*return*/, savedModel];\n                  }\n                });\n              });\n            });\n            result = {};\n            _d.label = 1;\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n            return [4 /*yield*/, Promise.all(promises)];\n          case 2:\n            _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();\n            _d.label = 3;\n          case 3:\n            if (!!_b.done) return [3 /*break*/, 5];\n            modelMetadata = _b.value;\n            modelName = modelMetadata.model;\n            result[modelName] = modelMetadata;\n            _d.label = 4;\n          case 4:\n            _b = _a.next();\n            return [3 /*break*/, 3];\n          case 5:\n            return [3 /*break*/, 8];\n          case 6:\n            e_2_1 = _d.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 8];\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n            return [7 /*endfinally*/];\n          case 8:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.getModelsMetadata = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, modelsMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            return [4 /*yield*/, this.storage.query(ModelMetadata)];\n          case 1:\n            modelsMetadata = _a.sent();\n            return [2 /*return*/, modelsMetadata];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, predicate, _a, modelMetadata;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) {\n              return c.namespace('eq', namespace).model('eq', model);\n            });\n            return [4 /*yield*/, this.storage.query(ModelMetadata, predicate, {\n              page: 0,\n              limit: 1\n            })];\n          case 1:\n            _a = __read.apply(void 0, [_b.sent(), 1]), modelMetadata = _a[0];\n            return [2 /*return*/, modelMetadata];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n    return modelDefinition;\n  };\n  SyncEngine.getNamespace = function () {\n    var namespace = {\n      name: SYNC,\n      relationships: {},\n      enums: {\n        OperationType: {\n          name: 'OperationType',\n          values: ['CREATE', 'UPDATE', 'DELETE']\n        }\n      },\n      nonModels: {},\n      models: {\n        MutationEvent: {\n          name: 'MutationEvent',\n          pluralName: 'MutationEvents',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            data: {\n              name: 'data',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            modelId: {\n              name: 'modelId',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            operation: {\n              name: 'operation',\n              type: {\n                enum: 'Operationtype'\n              },\n              isArray: false,\n              isRequired: true\n            },\n            condition: {\n              name: 'condition',\n              type: 'String',\n              isArray: false,\n              isRequired: true\n            }\n          }\n        },\n        ModelMetadata: {\n          name: 'ModelMetadata',\n          pluralName: 'ModelsMetadata',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            namespace: {\n              name: 'namespace',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            lastSync: {\n              name: 'lastSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            lastFullSync: {\n              name: 'lastFullSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            fullSyncInterval: {\n              name: 'fullSyncInterval',\n              type: 'Int',\n              isRequired: true,\n              isArray: false\n            },\n            lastSyncPredicate: {\n              name: 'lastSyncPredicate',\n              type: 'String',\n              isRequired: false,\n              isArray: false\n            }\n          }\n        }\n      }\n    };\n    return namespace;\n  };\n  return SyncEngine;\n}();\nexport { SyncEngine };","map":{"version":3,"mappings":"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","names":["browserOrNode","ConsoleLogger","Logger","BackgroundProcessManager","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ModelPredicateCreator","OpType","getNow","SYNC","USER","DataStoreConnectivity","ModelMerger","MutationEventOutbox","MutationProcessor","SubscriptionProcessor","SyncProcessor","createMutationInstanceFromModelOperation","getIdentifierValue","predicateToGraphQLCondition","logger","ownSymbol","Symbol","ControlMessage","schema","namespaceResolver","modelClasses","userModelClasses","storage","modelInstanceCreator","conflictHandler","errorHandler","syncPredicates","amplifyConfig","authModeStrategy","amplifyContext","connectivityMonitor","WeakMap","runningProcesses","MutationEvent","outbox","modelMerger","syncQueriesProcessor","subscriptionsProcessor","mutationsProcessor","datastoreConnectivity","SyncEngine","modelConstructor","modelSyncedStatus","get","params","log","subscriptions","_this","add","setupModels","_a","observer","error","err_1","startPromise","Promise","doneStarting","failedStarting","status","subscribe","online","isOpen","onTerminate","next","type","SYNC_ENGINE_NETWORK_STATUS","data","active","dataSubsObservable","isNode","warn","ctlSubsObservable_1","resolve","reject","then","ctlSubsSubscription","msg","CONNECTED","err","handleDisconnect","disconnectionHandler","push","_b","err_2","SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED","syncQuerySubscription","syncQueriesObservable","SYNC_ENGINE_SYNC_QUERIES_READY","message","complete","error_1","start","modelDefinition","item","hasMore","name","model","runExclusive","merge","SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED","element","SYNC_ENGINE_OUTBOX_STATUS","isEmpty","_transformerMutationType","forEach","unsubscribe","observe","filter","getModelDefinition","syncable","opType","condition","namespace","namespaces","MutationEventConstructor","graphQLCondition","mutationEvent","relationships","enqueue","SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED","resume","SYNC_ENGINE_STORAGE_SUBSCRIBED","peek","hasMutationsInOutbox","undefined","SYNC_ENGINE_READY","currentTimeStamp","Map","getModelsMetadata","modelLastSync","map","lastSync","lastFullSync","fullSyncInterval","lastSyncPredicate","nextFullSync","syncFrom","models","of","syncQueriesSubscription","terminated","count","this_1","getModelsMetadataWithNextFullSync","Date","now","paginatingModels","Set","keys","items","done","startedAt","isFullSync","has","set","new","updated","deleted","newestStartedAt","Math","max","getModelIds","idsInOutbox","_e","oneByOne","page","itemId","opTypeCount","oneByOne_1","mergePage","counts","INSERT","UPDATE","DELETE","Error","modelName","getModelMetadata","modelMetadata_1","theInterval","newestFullSyncStartedAt","ModelMetadata","copyOf","draft","save","SYNC_ENGINE_MODEL_SYNCED","isDeltaSync","delete","size","duration","SYNC_ENGINE_SYNC_QUERIES_STARTED","Array","from","msNextFullSync","debug","sleep","unsleep","_unsleep","sleepTimer","setTimeout","closed","CONNECTION_CLOSED","TIMEOUT_DISCONNECT","socketDisconnected","unsubscribeConnectivity","stop","close","open","ModelMetadataConstructor","Object","values","promises","modelMetadata","_g","syncPredicate","getPredicates","JSON","stringify","_c","_d","savedModel","prevSyncPredicate","syncPredicateUpdated_1","_f","result","all","query","modelsMetadata","predicate","createFromExisting","limit","namespaceName","enums","OperationType","nonModels","pluralName","fields","id","isRequired","isArray","modelId","operation","enum"],"sources":["/frontend-react-js/node_modules/@aws-amplify/datastore/src/sync/index.ts"],"sourcesContent":["import {\n\tbrowserOrNode,\n\tConsoleLogger as Logger,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport { ModelPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport {\n\tConflictHandler,\n\tControlMessageType,\n\tErrorHandler,\n\tInternalSchema,\n\tModelInit,\n\tModelInstanceMetadata,\n\tMutableModel,\n\tNamespaceResolver,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tSchemaModel,\n\tSchemaNamespace,\n\tTypeConstructorMap,\n\tModelPredicate,\n\tAuthModeStrategy,\n\tManagedIdentifier,\n\tOptionallyManagedIdentifier,\n\tAmplifyContext,\n} from '../types';\n// tslint:disable:no-duplicate-imports\nimport type { __modelMeta__ } from '../types';\n\nimport { getNow, SYNC, USER } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport {\n\tcreateMutationInstanceFromModelOperation,\n\tgetIdentifierValue,\n\tpredicateToGraphQLCondition,\n\tTransformerMutationType,\n} from './utils';\n\nconst { isNode } = browserOrNode();\nconst logger = new Logger('DataStore');\n\nconst ownSymbol = Symbol('sync');\n\ntype StartParams = {\n\tfullSyncInterval: number;\n};\n\nexport declare class MutationEvent {\n\treadonly [__modelMeta__]: {\n\t\tidentifier: OptionallyManagedIdentifier<MutationEvent, 'id'>;\n\t};\n\tpublic readonly id: string;\n\tpublic readonly model: string;\n\tpublic readonly operation: TransformerMutationType;\n\tpublic readonly modelId: string;\n\tpublic readonly condition: string;\n\tpublic readonly data: string;\n\tconstructor(init: ModelInit<MutationEvent>);\n\tstatic copyOf(\n\t\tsrc: MutationEvent,\n\t\tmutator: (draft: MutableModel<MutationEvent>) => void | MutationEvent\n\t): MutationEvent;\n}\n\nexport declare class ModelMetadata {\n\treadonly [__modelMeta__]: {\n\t\tidentifier: ManagedIdentifier<ModelMetadata, 'id'>;\n\t};\n\tpublic readonly id: string;\n\tpublic readonly namespace: string;\n\tpublic readonly model: string;\n\tpublic readonly fullSyncInterval: number;\n\tpublic readonly lastSync?: number;\n\tpublic readonly lastFullSync?: number;\n\tpublic readonly lastSyncPredicate?: null | string;\n\tconstructor(init: ModelInit<ModelMetadata>);\n\tstatic copyOf(\n\t\tsrc: ModelMetadata,\n\t\tmutator: (draft: MutableModel<ModelMetadata>) => void | ModelMetadata\n\t): ModelMetadata;\n}\n\nexport enum ControlMessage {\n\tSYNC_ENGINE_STORAGE_SUBSCRIBED = 'storageSubscribed',\n\tSYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED = 'subscriptionsEstablished',\n\tSYNC_ENGINE_SYNC_QUERIES_STARTED = 'syncQueriesStarted',\n\tSYNC_ENGINE_SYNC_QUERIES_READY = 'syncQueriesReady',\n\tSYNC_ENGINE_MODEL_SYNCED = 'modelSynced',\n\tSYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED = 'outboxMutationEnqueued',\n\tSYNC_ENGINE_OUTBOX_MUTATION_PROCESSED = 'outboxMutationProcessed',\n\tSYNC_ENGINE_OUTBOX_STATUS = 'outboxStatus',\n\tSYNC_ENGINE_NETWORK_STATUS = 'networkStatus',\n\tSYNC_ENGINE_READY = 'ready',\n}\n\nexport class SyncEngine {\n\tprivate online = false;\n\n\tprivate readonly syncQueriesProcessor: SyncProcessor;\n\tprivate readonly subscriptionsProcessor: SubscriptionProcessor;\n\tprivate readonly mutationsProcessor: MutationProcessor;\n\tprivate readonly modelMerger: ModelMerger;\n\tprivate readonly outbox: MutationEventOutbox;\n\tprivate readonly datastoreConnectivity: DataStoreConnectivity;\n\tprivate readonly modelSyncedStatus: WeakMap<\n\t\tPersistentModelConstructor<any>,\n\t\tboolean\n\t> = new WeakMap();\n\n\tprivate runningProcesses: BackgroundProcessManager;\n\n\tpublic getModelSyncedStatus(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t): boolean {\n\t\treturn this.modelSyncedStatus.get(modelConstructor)!;\n\t}\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly namespaceResolver: NamespaceResolver,\n\t\tprivate readonly modelClasses: TypeConstructorMap,\n\t\tprivate readonly userModelClasses: TypeConstructorMap,\n\t\tprivate readonly storage: Storage,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tconflictHandler: ConflictHandler,\n\t\terrorHandler: ErrorHandler,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly amplifyContext: AmplifyContext,\n\t\tprivate readonly connectivityMonitor?: DataStoreConnectivity\n\t) {\n\t\tthis.runningProcesses = new BackgroundProcessManager();\n\n\t\tconst MutationEvent = this.modelClasses[\n\t\t\t'MutationEvent'\n\t\t] as PersistentModelConstructor<MutationEvent>;\n\n\t\tthis.outbox = new MutationEventOutbox(\n\t\t\tthis.schema,\n\t\t\tMutationEvent,\n\t\t\tmodelInstanceCreator,\n\t\t\townSymbol\n\t\t);\n\n\t\tthis.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n\n\t\tthis.syncQueriesProcessor = new SyncProcessor(\n\t\t\tthis.schema,\n\t\t\tthis.syncPredicates,\n\t\t\tthis.amplifyConfig,\n\t\t\tthis.authModeStrategy,\n\t\t\terrorHandler,\n\t\t\tthis.amplifyContext\n\t\t);\n\n\t\tthis.subscriptionsProcessor = new SubscriptionProcessor(\n\t\t\tthis.schema,\n\t\t\tthis.syncPredicates,\n\t\t\tthis.amplifyConfig,\n\t\t\tthis.authModeStrategy,\n\t\t\terrorHandler,\n\t\t\tthis.amplifyContext\n\t\t);\n\n\t\tthis.mutationsProcessor = new MutationProcessor(\n\t\t\tthis.schema,\n\t\t\tthis.storage,\n\t\t\tthis.userModelClasses,\n\t\t\tthis.outbox,\n\t\t\tthis.modelInstanceCreator,\n\t\t\tMutationEvent,\n\t\t\tthis.amplifyConfig,\n\t\t\tthis.authModeStrategy,\n\t\t\terrorHandler,\n\t\t\tconflictHandler,\n\t\t\tthis.amplifyContext\n\t\t);\n\n\t\tthis.datastoreConnectivity =\n\t\t\tthis.connectivityMonitor || new DataStoreConnectivity();\n\t}\n\n\tstart(params: StartParams) {\n\t\treturn new Observable<ControlMessageType<ControlMessage>>(observer => {\n\t\t\tlogger.log('starting sync engine...');\n\n\t\t\tlet subscriptions: ZenObservable.Subscription[] = [];\n\n\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.setupModels(params);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tobserver.error(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// this is awaited at the bottom. so, we don't need to register\n\t\t\t\t// this explicitly with the context. it's already contained.\n\t\t\t\tconst startPromise = new Promise((doneStarting, failedStarting) => {\n\t\t\t\t\tthis.datastoreConnectivity.status().subscribe(\n\t\t\t\t\t\tasync ({ online }) =>\n\t\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\t\tthis.runningProcesses.add(async onTerminate => {\n\t\t\t\t\t\t\t\t// From offline to online\n\t\t\t\t\t\t\t\tif (online && !this.online) {\n\t\t\t\t\t\t\t\t\tthis.online = online;\n\n\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\tactive: this.online,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tlet ctlSubsObservable: Observable<CONTROL_MSG>;\n\t\t\t\t\t\t\t\t\tlet dataSubsObservable: Observable<\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType, SchemaModel, PersistentModel]\n\t\t\t\t\t\t\t\t\t>;\n\n\t\t\t\t\t\t\t\t\t// NOTE: need a way to override this conditional for testing.\n\t\t\t\t\t\t\t\t\tif (isNode) {\n\t\t\t\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t\t\t\t'Realtime disabled when in a server-side environment'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t//#region GraphQL Subscriptions\n\t\t\t\t\t\t\t\t\t\t[ctlSubsObservable, dataSubsObservable] =\n\t\t\t\t\t\t\t\t\t\t\tthis.subscriptionsProcessor.start();\n\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tawait new Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\t\tonTerminate.then(reject);\n\t\t\t\t\t\t\t\t\t\t\t\tconst ctlSubsSubscription = ctlSubsObservable.subscribe(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext: msg => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (msg === CONTROL_MSG.CONNECTED) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: err => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst handleDisconnect =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.disconnectionHandler();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleDisconnect(err);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions.push(ctlSubsSubscription);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\t\tobserver.error(err);\n\t\t\t\t\t\t\t\t\t\t\tfailedStarting();\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tlogger.log('Realtime ready');\n\n\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED,\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t//#endregion\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t//#region Base & Sync queries\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait new Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\tconst syncQuerySubscription =\n\t\t\t\t\t\t\t\t\t\t\t\tthis.syncQueriesObservable().subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext: message => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { type } = message;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.next(message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\terror: error => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tif (syncQuerySubscription) {\n\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions.push(syncQuerySubscription);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\tobserver.error(error);\n\t\t\t\t\t\t\t\t\t\tfailedStarting();\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\t\t\t//#region process mutations (outbox)\n\t\t\t\t\t\t\t\t\tsubscriptions.push(\n\t\t\t\t\t\t\t\t\t\tthis.mutationsProcessor\n\t\t\t\t\t\t\t\t\t\t\t.start()\n\t\t\t\t\t\t\t\t\t\t\t.subscribe(({ modelDefinition, model: item, hasMore }) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst model = this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.storage.runExclusive(storage =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.modelMerger.merge(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telement: model,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisEmpty: !hasMore,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}, 'mutation processor event')\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\t\t\t//#region Merge subscriptions buffer\n\t\t\t\t\t\t\t\t\t// TODO: extract to function\n\t\t\t\t\t\t\t\t\tif (!isNode) {\n\t\t\t\t\t\t\t\t\t\tsubscriptions.push(\n\t\t\t\t\t\t\t\t\t\t\tdataSubsObservable!.subscribe(\n\t\t\t\t\t\t\t\t\t\t\t\t([_transformerMutationType, modelDefinition, item]) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst model = this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.storage.runExclusive(storage =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.modelMerger.merge(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}, 'subscription dataSubsObservable event')\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//#endregion\n\t\t\t\t\t\t\t\t} else if (!online) {\n\t\t\t\t\t\t\t\t\tthis.online = online;\n\n\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\tactive: this.online,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tsubscriptions.forEach(sub => sub.unsubscribe());\n\t\t\t\t\t\t\t\t\tsubscriptions = [];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdoneStarting();\n\t\t\t\t\t\t\t}, 'datastore connectivity event')\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tthis.storage\n\t\t\t\t\t.observe(null, null, ownSymbol)\n\t\t\t\t\t.filter(({ model }) => {\n\t\t\t\t\t\tconst modelDefinition = this.getModelDefinition(model);\n\t\t\t\t\t\treturn modelDefinition.syncable === true;\n\t\t\t\t\t})\n\t\t\t\t\t.subscribe({\n\t\t\t\t\t\tnext: async ({ opType, model, element, condition }) =>\n\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\tconst namespace =\n\t\t\t\t\t\t\t\t\tthis.schema.namespaces[this.namespaceResolver(model)];\n\t\t\t\t\t\t\t\tconst MutationEventConstructor = this.modelClasses[\n\t\t\t\t\t\t\t\t\t'MutationEvent'\n\t\t\t\t\t\t\t\t] as PersistentModelConstructor<MutationEvent>;\n\t\t\t\t\t\t\t\tconst modelDefinition = this.getModelDefinition(model);\n\t\t\t\t\t\t\t\tconst graphQLCondition = predicateToGraphQLCondition(\n\t\t\t\t\t\t\t\t\tcondition!,\n\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst mutationEvent = createMutationInstanceFromModelOperation(\n\t\t\t\t\t\t\t\t\tnamespace.relationships!,\n\t\t\t\t\t\t\t\t\tthis.getModelDefinition(model),\n\t\t\t\t\t\t\t\t\topType,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\telement,\n\t\t\t\t\t\t\t\t\tgraphQLCondition,\n\t\t\t\t\t\t\t\t\tMutationEventConstructor,\n\t\t\t\t\t\t\t\t\tthis.modelInstanceCreator\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tawait this.outbox.enqueue(this.storage, mutationEvent);\n\n\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\telement,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tawait startPromise;\n\n\t\t\t\t\t\t\t\tif (this.online) {\n\t\t\t\t\t\t\t\t\tthis.mutationsProcessor.resume();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 'storage event'),\n\t\t\t\t\t});\n\n\t\t\t\tobserver.next({\n\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED,\n\t\t\t\t});\n\n\t\t\t\tconst hasMutationsInOutbox =\n\t\t\t\t\t(await this.outbox.peek(this.storage)) === undefined;\n\t\t\t\tobserver.next({\n\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tisEmpty: hasMutationsInOutbox,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tawait startPromise;\n\n\t\t\t\tobserver.next({\n\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_READY,\n\t\t\t\t});\n\t\t\t}, 'sync start');\n\t\t});\n\t}\n\n\tprivate async getModelsMetadataWithNextFullSync(\n\t\tcurrentTimeStamp: number\n\t): Promise<Map<SchemaModel, [string, number]>> {\n\t\tconst modelLastSync: Map<SchemaModel, [string, number]> = new Map(\n\t\t\t(\n\t\t\t\tawait this.runningProcesses.add(\n\t\t\t\t\t() => this.getModelsMetadata(),\n\t\t\t\t\t'sync/index getModelsMetadataWithNextFullSync'\n\t\t\t\t)\n\t\t\t).map(\n\t\t\t\t({\n\t\t\t\t\tnamespace,\n\t\t\t\t\tmodel,\n\t\t\t\t\tlastSync,\n\t\t\t\t\tlastFullSync,\n\t\t\t\t\tfullSyncInterval,\n\t\t\t\t\tlastSyncPredicate,\n\t\t\t\t}) => {\n\t\t\t\t\tconst nextFullSync = lastFullSync! + fullSyncInterval;\n\t\t\t\t\tconst syncFrom =\n\t\t\t\t\t\t!lastFullSync || nextFullSync < currentTimeStamp\n\t\t\t\t\t\t\t? 0 // perform full sync if expired\n\t\t\t\t\t\t\t: lastSync; // perform delta sync\n\n\t\t\t\t\treturn [\n\t\t\t\t\t\tthis.schema.namespaces[namespace].models[model],\n\t\t\t\t\t\t[namespace, syncFrom!],\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\treturn modelLastSync;\n\t}\n\n\tprivate syncQueriesObservable(): Observable<\n\t\tControlMessageType<ControlMessage>\n\t> {\n\t\tif (!this.online) {\n\t\t\treturn Observable.of<ControlMessageType<ControlMessage>>();\n\t\t}\n\n\t\treturn new Observable<ControlMessageType<ControlMessage>>(observer => {\n\t\t\tlet syncQueriesSubscription: ZenObservable.Subscription;\n\n\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\tthis.runningProcesses.add(async onTerminate => {\n\t\t\t\t\tlet terminated = false;\n\n\t\t\t\t\twhile (!observer.closed && !terminated) {\n\t\t\t\t\t\tconst count: WeakMap<\n\t\t\t\t\t\t\tPersistentModelConstructor<any>,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnew: number;\n\t\t\t\t\t\t\t\tupdated: number;\n\t\t\t\t\t\t\t\tdeleted: number;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t> = new WeakMap();\n\n\t\t\t\t\t\tconst modelLastSync = await this.getModelsMetadataWithNextFullSync(\n\t\t\t\t\t\t\tDate.now()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst paginatingModels = new Set(modelLastSync.keys());\n\n\t\t\t\t\t\tlet newestFullSyncStartedAt: number;\n\t\t\t\t\t\tlet theInterval: number;\n\n\t\t\t\t\t\tlet start: number;\n\t\t\t\t\t\tlet duration: number;\n\t\t\t\t\t\tlet newestStartedAt: number;\n\t\t\t\t\t\tawait new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tif (!this.runningProcesses.isOpen) resolve();\n\t\t\t\t\t\t\tonTerminate.then(() => resolve());\n\t\t\t\t\t\t\tsyncQueriesSubscription = this.syncQueriesProcessor\n\t\t\t\t\t\t\t\t.start(modelLastSync)\n\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\tnext: async ({\n\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\t\t\tdone,\n\t\t\t\t\t\t\t\t\t\tstartedAt,\n\t\t\t\t\t\t\t\t\t\tisFullSync,\n\t\t\t\t\t\t\t\t\t}) => {\n\t\t\t\t\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition.name\n\t\t\t\t\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\n\t\t\t\t\t\t\t\t\t\tif (!count.has(modelConstructor)) {\n\t\t\t\t\t\t\t\t\t\t\tcount.set(modelConstructor, {\n\t\t\t\t\t\t\t\t\t\t\t\tnew: 0,\n\t\t\t\t\t\t\t\t\t\t\t\tupdated: 0,\n\t\t\t\t\t\t\t\t\t\t\t\tdeleted: 0,\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tstart = getNow();\n\t\t\t\t\t\t\t\t\t\t\tnewestStartedAt =\n\t\t\t\t\t\t\t\t\t\t\t\tnewestStartedAt === undefined\n\t\t\t\t\t\t\t\t\t\t\t\t\t? startedAt\n\t\t\t\t\t\t\t\t\t\t\t\t\t: Math.max(newestStartedAt, startedAt);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t\t\t * If there are mutations in the outbox for a given id, those need to be\n\t\t\t\t\t\t\t\t\t\t * merged individually. Otherwise, we can merge them in batches.\n\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\t\tawait this.storage.runExclusive(async storage => {\n\t\t\t\t\t\t\t\t\t\t\tconst idsInOutbox = await this.outbox.getModelIds(\n\t\t\t\t\t\t\t\t\t\t\t\tstorage\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tconst oneByOne: ModelInstanceMetadata[] = [];\n\t\t\t\t\t\t\t\t\t\t\tconst page = items.filter(item => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst itemId = getIdentifierValue(\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (!idsInOutbox.has(itemId)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\toneByOne.push(item);\n\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tconst opTypeCount: [any, OpType][] = [];\n\n\t\t\t\t\t\t\t\t\t\t\tfor (const item of oneByOne) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst opType = await this.modelMerger.merge(\n\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (opType !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\topTypeCount.push([item, opType]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\topTypeCount.push(\n\t\t\t\t\t\t\t\t\t\t\t\t...(await this.modelMerger.mergePage(\n\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tconst counts = count.get(modelConstructor)!;\n\n\t\t\t\t\t\t\t\t\t\t\topTypeCount.forEach(([, opType]) => {\n\t\t\t\t\t\t\t\t\t\t\t\tswitch (opType) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase OpType.INSERT:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcounts.new++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase OpType.UPDATE:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcounts.updated++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase OpType.DELETE:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcounts.deleted++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new Error(`Invalid opType ${opType}`);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\t\t\t\t\tconst { name: modelName } = modelDefinition;\n\n\t\t\t\t\t\t\t\t\t\t\t//#region update last sync for type\n\t\t\t\t\t\t\t\t\t\t\tlet modelMetadata = await this.getModelMetadata(\n\t\t\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tconst { lastFullSync, fullSyncInterval } = modelMetadata;\n\n\t\t\t\t\t\t\t\t\t\t\ttheInterval = fullSyncInterval;\n\n\t\t\t\t\t\t\t\t\t\t\tnewestFullSyncStartedAt =\n\t\t\t\t\t\t\t\t\t\t\t\tnewestFullSyncStartedAt === undefined\n\t\t\t\t\t\t\t\t\t\t\t\t\t? lastFullSync!\n\t\t\t\t\t\t\t\t\t\t\t\t\t: Math.max(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewestFullSyncStartedAt,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisFullSync ? startedAt : lastFullSync!\n\t\t\t\t\t\t\t\t\t\t\t\t\t  );\n\n\t\t\t\t\t\t\t\t\t\t\tmodelMetadata = (\n\t\t\t\t\t\t\t\t\t\t\t\tthis.modelClasses\n\t\t\t\t\t\t\t\t\t\t\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>\n\t\t\t\t\t\t\t\t\t\t\t).copyOf(modelMetadata, draft => {\n\t\t\t\t\t\t\t\t\t\t\t\tdraft.lastSync = startedAt;\n\t\t\t\t\t\t\t\t\t\t\t\tdraft.lastFullSync = isFullSync\n\t\t\t\t\t\t\t\t\t\t\t\t\t? startedAt\n\t\t\t\t\t\t\t\t\t\t\t\t\t: modelMetadata.lastFullSync;\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tawait this.storage.save(\n\t\t\t\t\t\t\t\t\t\t\t\tmodelMetadata,\n\t\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\t\townSymbol\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\t\t\t\t\tconst counts = count.get(modelConstructor);\n\n\t\t\t\t\t\t\t\t\t\t\tthis.modelSyncedStatus.set(modelConstructor, true);\n\n\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n\t\t\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\tisFullSync,\n\t\t\t\t\t\t\t\t\t\t\t\t\tisDeltaSync: !isFullSync,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcounts,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tpaginatingModels.delete(modelDefinition);\n\n\t\t\t\t\t\t\t\t\t\t\tif (paginatingModels.size === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tduration = getNow() - start;\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY,\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tsyncQueriesSubscription.unsubscribe();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\terror: error => {\n\t\t\t\t\t\t\t\t\t\tobserver.error(error);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\tmodels: Array.from(paginatingModels).map(({ name }) => name),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst msNextFullSync =\n\t\t\t\t\t\t\tnewestFullSyncStartedAt! +\n\t\t\t\t\t\t\ttheInterval! -\n\t\t\t\t\t\t\t(newestStartedAt! + duration!);\n\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t`Next fullSync in ${msNextFullSync / 1000} seconds. (${new Date(\n\t\t\t\t\t\t\t\tDate.now() + msNextFullSync\n\t\t\t\t\t\t\t)})`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n\t\t\t\t\t\t// a lot of thought into what that contract looks like to\n\t\t\t\t\t\t//  support possible use-cases:\n\t\t\t\t\t\t//\n\t\t\t\t\t\t//  1. non-cancelable\n\t\t\t\t\t\t//  2. cancelable, unsleep on exit()\n\t\t\t\t\t\t//  3. cancelable, throw Error on exit()\n\t\t\t\t\t\t//  4. cancelable, callback first on exit()?\n\t\t\t\t\t\t//  5. ... etc. ? ...\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// TLDR; this is a lot of complexity here for a sleep(),\n\t\t\t\t\t\t// but, it's not clear to me yet how to support an\n\t\t\t\t\t\t// extensible, centralized cancelable `sleep()` elegantly.\n\t\t\t\t\t\tawait this.runningProcesses.add(async onTerminate => {\n\t\t\t\t\t\t\tlet sleepTimer;\n\t\t\t\t\t\t\tlet unsleep;\n\n\t\t\t\t\t\t\tconst sleep = new Promise(_unsleep => {\n\t\t\t\t\t\t\t\tunsleep = _unsleep;\n\t\t\t\t\t\t\t\tsleepTimer = setTimeout(unsleep, msNextFullSync);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tonTerminate.then(() => {\n\t\t\t\t\t\t\t\tterminated = true;\n\t\t\t\t\t\t\t\tunsleep();\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn sleep;\n\t\t\t\t\t\t}, 'syncQueriesObservable sleep');\n\t\t\t\t\t}\n\t\t\t\t}, 'syncQueriesObservable main');\n\t\t});\n\t}\n\n\tprivate disconnectionHandler(): (msg: string) => void {\n\t\treturn (msg: string) => {\n\t\t\t// This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n\t\t\tif (\n\t\t\t\tPUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg ||\n\t\t\t\tPUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg\n\t\t\t) {\n\t\t\t\tthis.datastoreConnectivity.socketDisconnected();\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic unsubscribeConnectivity() {\n\t\tthis.datastoreConnectivity.unsubscribe();\n\t}\n\n\t/**\n\t * Stops all subscription activities and resolves when all activies report\n\t * that they're disconnected, done retrying, etc..\n\t */\n\tpublic async stop() {\n\t\tlogger.debug('stopping sync engine');\n\n\t\t/**\n\t\t * Gracefully disconnecting subscribers first just prevents *more* work\n\t\t * from entering the pipelines.\n\t\t */\n\t\tthis.unsubscribeConnectivity();\n\n\t\t/**\n\t\t * aggressively shut down any lingering background processes.\n\t\t * some of this might be semi-redundant with unsubscribing. however,\n\t\t * unsubscribing doesn't allow us to wait for settling.\n\t\t * (Whereas `stop()` does.)\n\t\t */\n\n\t\tawait this.mutationsProcessor.stop();\n\t\tawait this.subscriptionsProcessor.stop();\n\t\tawait this.datastoreConnectivity.stop();\n\t\tawait this.syncQueriesProcessor.stop();\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\n\t\tlogger.debug('sync engine stopped and ready to restart');\n\t}\n\n\tprivate async setupModels(params: StartParams) {\n\t\tconst { fullSyncInterval } = params;\n\t\tconst ModelMetadataConstructor = this.modelClasses\n\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>;\n\n\t\tconst models: [string, SchemaModel][] = [];\n\t\tlet savedModel;\n\n\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\tObject.values(namespace.models)\n\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t.forEach(model => {\n\t\t\t\t\tmodels.push([namespace.name, model]);\n\t\t\t\t\tif (namespace.name === USER) {\n\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\tmodel.name\n\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\t\t\t\t\t\tthis.modelSyncedStatus.set(modelConstructor, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst promises = models.map(async ([namespace, model]) => {\n\t\t\tconst modelMetadata = await this.getModelMetadata(namespace, model.name);\n\t\t\tconst syncPredicate = ModelPredicateCreator.getPredicates(\n\t\t\t\tthis.syncPredicates.get(model)!,\n\t\t\t\tfalse\n\t\t\t);\n\t\t\tconst lastSyncPredicate = syncPredicate\n\t\t\t\t? JSON.stringify(syncPredicate)\n\t\t\t\t: null;\n\n\t\t\tif (modelMetadata === undefined) {\n\t\t\t\t[[savedModel]] = await this.storage.save(\n\t\t\t\t\tthis.modelInstanceCreator(ModelMetadataConstructor, {\n\t\t\t\t\t\tmodel: model.name,\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tlastSync: null!,\n\t\t\t\t\t\tfullSyncInterval,\n\t\t\t\t\t\tlastFullSync: null!,\n\t\t\t\t\t\tlastSyncPredicate,\n\t\t\t\t\t}),\n\t\t\t\t\tundefined,\n\t\t\t\t\townSymbol\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst prevSyncPredicate = modelMetadata.lastSyncPredicate\n\t\t\t\t\t? modelMetadata.lastSyncPredicate\n\t\t\t\t\t: null;\n\t\t\t\tconst syncPredicateUpdated = prevSyncPredicate !== lastSyncPredicate;\n\n\t\t\t\t[[savedModel]] = await this.storage.save(\n\t\t\t\t\tModelMetadataConstructor.copyOf(modelMetadata, draft => {\n\t\t\t\t\t\tdraft.fullSyncInterval = fullSyncInterval;\n\t\t\t\t\t\t// perform a base sync if the syncPredicate changed in between calls to DataStore.start\n\t\t\t\t\t\t// ensures that the local store contains all the data specified by the syncExpression\n\t\t\t\t\t\tif (syncPredicateUpdated) {\n\t\t\t\t\t\t\tdraft.lastSync = null!;\n\t\t\t\t\t\t\tdraft.lastFullSync = null!;\n\t\t\t\t\t\t\t(draft.lastSyncPredicate as any) = lastSyncPredicate;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn savedModel;\n\t\t});\n\n\t\tconst result: Record<string, ModelMetadata> = {};\n\t\tfor (const modelMetadata of await Promise.all(promises)) {\n\t\t\tconst { model: modelName } = modelMetadata;\n\n\t\t\tresult[modelName] = modelMetadata;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async getModelsMetadata(): Promise<ModelMetadata[]> {\n\t\tconst ModelMetadata = this.modelClasses\n\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>;\n\n\t\tconst modelsMetadata = await this.storage.query(ModelMetadata);\n\n\t\treturn modelsMetadata;\n\t}\n\n\tprivate async getModelMetadata(\n\t\tnamespace: string,\n\t\tmodel: string\n\t): Promise<ModelMetadata> {\n\t\tconst ModelMetadata = this.modelClasses\n\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>;\n\n\t\tconst predicate = ModelPredicateCreator.createFromExisting<ModelMetadata>(\n\t\t\tthis.schema.namespaces[SYNC].models[ModelMetadata.name],\n\t\t\tc => c.namespace('eq', namespace).model('eq', model)\n\t\t);\n\n\t\tconst [modelMetadata] = await this.storage.query(ModelMetadata, predicate, {\n\t\t\tpage: 0,\n\t\t\tlimit: 1,\n\t\t});\n\n\t\treturn modelMetadata;\n\t}\n\n\tprivate getModelDefinition(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t): SchemaModel {\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst modelDefinition =\n\t\t\tthis.schema.namespaces[namespaceName].models[modelConstructor.name];\n\n\t\treturn modelDefinition;\n\t}\n\n\tstatic getNamespace() {\n\t\tconst namespace: SchemaNamespace = {\n\t\t\tname: SYNC,\n\t\t\trelationships: {},\n\t\t\tenums: {\n\t\t\t\tOperationType: {\n\t\t\t\t\tname: 'OperationType',\n\t\t\t\t\tvalues: ['CREATE', 'UPDATE', 'DELETE'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tnonModels: {},\n\t\t\tmodels: {\n\t\t\t\tMutationEvent: {\n\t\t\t\t\tname: 'MutationEvent',\n\t\t\t\t\tpluralName: 'MutationEvents',\n\t\t\t\t\tsyncable: false,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodel: {\n\t\t\t\t\t\t\tname: 'model',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tname: 'data',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelId: {\n\t\t\t\t\t\t\tname: 'modelId',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\toperation: {\n\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\t\tenum: 'Operationtype',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcondition: {\n\t\t\t\t\t\t\tname: 'condition',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tModelMetadata: {\n\t\t\t\t\tname: 'ModelMetadata',\n\t\t\t\t\tpluralName: 'ModelsMetadata',\n\t\t\t\t\tsyncable: false,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnamespace: {\n\t\t\t\t\t\t\tname: 'namespace',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodel: {\n\t\t\t\t\t\t\tname: 'model',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlastSync: {\n\t\t\t\t\t\t\tname: 'lastSync',\n\t\t\t\t\t\t\ttype: 'Int',\n\t\t\t\t\t\t\tisRequired: false,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlastFullSync: {\n\t\t\t\t\t\t\tname: 'lastFullSync',\n\t\t\t\t\t\t\ttype: 'Int',\n\t\t\t\t\t\t\tisRequired: false,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfullSyncInterval: {\n\t\t\t\t\t\t\tname: 'fullSyncInterval',\n\t\t\t\t\t\t\ttype: 'Int',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlastSyncPredicate: {\n\t\t\t\t\t\t\tname: 'lastSyncPredicate',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: false,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\treturn namespace;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}