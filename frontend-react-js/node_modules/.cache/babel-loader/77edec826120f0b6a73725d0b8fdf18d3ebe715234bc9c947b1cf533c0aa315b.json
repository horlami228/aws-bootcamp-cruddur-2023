{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * Validate whether a string is an ARN.\n */\nexport var validate = function (str) {\n  return typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n};\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport var parse = function (arn) {\n  var segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  var _a = __read(segments),\n    //Skip \"arn\" literal\n    partition = _a[1],\n    service = _a[2],\n    region = _a[3],\n    accountId = _a[4],\n    resource = _a.slice(5);\n  return {\n    partition: partition,\n    service: service,\n    region: region,\n    accountId: accountId,\n    resource: resource.join(\":\")\n  };\n};\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport var build = function (arnObject) {\n  var _a = arnObject.partition,\n    partition = _a === void 0 ? \"aws\" : _a,\n    service = arnObject.service,\n    region = arnObject.region,\n    accountId = arnObject.accountId,\n    resource = arnObject.resource;\n  if ([service, region, accountId, resource].some(function (segment) {\n    return typeof segment !== \"string\";\n  })) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource;\n};","map":{"version":3,"mappings":";AAOA;;;AAGA,OAAO,IAAMA,QAAQ,GAAG,UAACC,GAAQ;EAC/B,cAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAID,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,IAAI,CAAC;AAAlF,CAAkF;AAEpF;;;AAGA,OAAO,IAAMC,KAAK,GAAG,UAACC,GAAW;EAC/B,IAAMC,QAAQ,GAAGD,GAAG,CAACH,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAII,QAAQ,CAACH,MAAM,GAAG,CAAC,IAAIG,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EAC5E,gBAQFD,QAAQ;IANV;IACAE,SAAS;IACTC,OAAO;IACPC,MAAM;IACNC,SAAS;IACNC,QAAQ,cACD;EAEZ,OAAO;IACLJ,SAAS;IACTC,OAAO;IACPC,MAAM;IACNC,SAAS;IACTC,QAAQ,EAAEA,QAAQ,CAACC,IAAI,CAAC,GAAG;GAC5B;AACH,CAAC;AAID;;;AAGA,OAAO,IAAMC,KAAK,GAAG,UAACC,SAAuB;EACnC,SAA4DA,SAAS,UAApD;IAAjBP,SAAS,mBAAG,KAAK;IAAEC,OAAO,GAAkCM,SAAS,QAA3C;IAAEL,MAAM,GAA0BK,SAAS,OAAnC;IAAEJ,SAAS,GAAeI,SAAS,UAAxB;IAAEH,QAAQ,GAAKG,SAAS,SAAd;EAC/D,IAAI,CAACN,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,CAAC,CAACI,IAAI,CAAC,UAACC,OAAO;IAAK,cAAOA,OAAO,KAAK,QAAQ;EAA3B,CAA2B,CAAC,EAAE;IACzF,MAAM,IAAIV,KAAK,CAAC,6BAA6B,CAAC;;EAEhD,OAAO,SAAOC,SAAS,SAAIC,OAAO,SAAIC,MAAM,SAAIC,SAAS,SAAIC,QAAU;AACzE,CAAC","names":["validate","str","indexOf","split","length","parse","arn","segments","Error","partition","service","region","accountId","resource","join","build","arnObject","some","segment"],"sources":["/frontend-react-js/node_modules/@aws-sdk/util-arn-parser/src/index.ts"],"sourcesContent":["export interface ARN {\n  partition: string;\n  service: string;\n  region: string;\n  accountId: string;\n  resource: string;\n}\n/**\n * Validate whether a string is an ARN.\n */\nexport const validate = (str: any): boolean =>\n  typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport const parse = (arn: string): ARN => {\n  const segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  const [\n    ,\n    //Skip \"arn\" literal\n    partition,\n    service,\n    region,\n    accountId,\n    ...resource\n  ] = segments;\n\n  return {\n    partition,\n    service,\n    region,\n    accountId,\n    resource: resource.join(\":\"),\n  };\n};\n\ntype buildOptions = Omit<ARN, \"partition\"> & { partition?: string };\n\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport const build = (arnObject: buildOptions): string => {\n  const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n  if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}