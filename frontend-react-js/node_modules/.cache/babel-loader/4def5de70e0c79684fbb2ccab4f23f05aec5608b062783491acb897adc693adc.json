{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeAttribute } from \"./escape-attribute\";\n/**\n * Represents an XML node.\n */\nvar XmlNode = /** @class */function () {\n  function XmlNode(name, children) {\n    if (children === void 0) {\n      children = [];\n    }\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n  XmlNode.prototype.withName = function (name) {\n    this.name = name;\n    return this;\n  };\n  XmlNode.prototype.addAttribute = function (name, value) {\n    this.attributes[name] = value;\n    return this;\n  };\n  XmlNode.prototype.addChildNode = function (child) {\n    this.children.push(child);\n    return this;\n  };\n  XmlNode.prototype.removeAttribute = function (name) {\n    delete this.attributes[name];\n    return this;\n  };\n  XmlNode.prototype.toString = function () {\n    var e_1, _a;\n    var hasChildren = Boolean(this.children.length);\n    var xmlText = \"<\" + this.name;\n    // add attributes\n    var attributes = this.attributes;\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var attributeName = _c.value;\n        var attribute = attributes[attributeName];\n        if (typeof attribute !== \"undefined\" && attribute !== null) {\n          xmlText += \" \" + attributeName + \"=\\\"\" + escapeAttribute(\"\" + attribute) + \"\\\"\";\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return xmlText += !hasChildren ? \"/>\" : \">\" + this.children.map(function (c) {\n      return c.toString();\n    }).join(\"\") + \"</\" + this.name + \">\";\n  };\n  return XmlNode;\n}();\nexport { XmlNode };","map":{"version":3,"mappings":";AAAA,SAASA,eAAe,QAAQ,oBAAoB;AAGpD;;;AAGA;EAGE,iBAAoBC,IAAY,EAAkBC,QAA2B;IAA3B;MAAAA,aAA2B;IAAA;IAAzD,SAAI,GAAJD,IAAI;IAA0B,aAAQ,GAARC,QAAQ;IAFlD,eAAU,GAA4B,EAAE;EAEgC;EAEhFC,0BAAQ,GAAR,UAASF,IAAY;IACnB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,OAAO,IAAI;EACb,CAAC;EAEDE,8BAAY,GAAZ,UAAaF,IAAY,EAAEG,KAAU;IACnC,IAAI,CAACC,UAAU,CAACJ,IAAI,CAAC,GAAGG,KAAK;IAC7B,OAAO,IAAI;EACb,CAAC;EAEDD,8BAAY,GAAZ,UAAaG,KAAiB;IAC5B,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAACD,KAAK,CAAC;IACzB,OAAO,IAAI;EACb,CAAC;EAEDH,iCAAe,GAAf,UAAgBF,IAAY;IAC1B,OAAO,IAAI,CAACI,UAAU,CAACJ,IAAI,CAAC;IAC5B,OAAO,IAAI;EACb,CAAC;EAEDE,0BAAQ,GAAR;;IACE,IAAMK,WAAW,GAAGC,OAAO,CAAC,IAAI,CAACP,QAAQ,CAACQ,MAAM,CAAC;IACjD,IAAIC,OAAO,GAAG,MAAI,IAAI,CAACV,IAAM;IAC7B;IACA,IAAMI,UAAU,GAAG,IAAI,CAACA,UAAU;;MAClC,KAA4B,wBAAM,CAACO,IAAI,CAACP,UAAU,CAAC,6CAAE;QAAhD,IAAMQ,aAAa;QACtB,IAAMC,SAAS,GAAGT,UAAU,CAACQ,aAAa,CAAC;QAC3C,IAAI,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK,IAAI,EAAE;UAC1DH,OAAO,IAAI,MAAIE,aAAa,WAAKb,eAAe,CAAC,EAAE,GAAGc,SAAS,CAAC,OAAG;;;;;;;;;;;;;;IAIvE,OAAQH,OAAO,IAAI,CAACH,WAAW,GAAG,IAAI,GAAG,MAAI,IAAI,CAACN,QAAQ,CAACa,GAAG,CAAC,UAACC,CAAC;MAAK,QAAC,CAACC,QAAQ,EAAE;IAAZ,CAAY,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,UAAK,IAAI,CAACjB,IAAI,MAAG;EAC/G,CAAC;EACH,cAAC;AAAD,CAAC,EAvCD","names":["escapeAttribute","name","children","XmlNode","value","attributes","child","push","hasChildren","Boolean","length","xmlText","keys","attributeName","attribute","map","c","toString","join"],"sources":["/frontend-react-js/node_modules/@aws-sdk/xml-builder/src/XmlNode.ts"],"sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(private name: string, public readonly children: Stringable[] = []) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}