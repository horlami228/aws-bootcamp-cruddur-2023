{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketCorsRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketCorsCommand, serializeAws_restXmlPutBucketCorsCommand } from \"../protocols/Aws_restXml\";\nimport { getApplyMd5BodyChecksumPlugin } from \"@aws-sdk/middleware-apply-body-checksum\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the <code>cors</code> configuration for your bucket. If the configuration exists,\n *          Amazon S3 replaces it.</p>\n *          <p>To use this operation, you must be allowed to perform the <code>s3:PutBucketCORS</code>\n *          action. By default, the bucket owner has this permission and can grant it to others.</p>\n *          <p>You set this configuration on a bucket so that the bucket can service cross-origin\n *          requests. For example, you might want to enable a request whose origin is\n *             <code>http://www.example.com</code> to access your Amazon S3 bucket at\n *             <code>my.example.bucket.com</code> by using the browser's <code>XMLHttpRequest</code>\n *          capability.</p>\n *          <p>To enable cross-origin resource sharing (CORS) on a bucket, you add the\n *             <code>cors</code> subresource to the bucket. The <code>cors</code> subresource is an XML\n *          document in which you configure rules that identify origins and the HTTP methods that can\n *          be executed on your bucket. The document is limited to 64 KB in size. </p>\n *          <p>When Amazon S3 receives a cross-origin request (or a pre-flight OPTIONS request) against a\n *          bucket, it evaluates the <code>cors</code> configuration on the bucket and uses the first\n *             <code>CORSRule</code> rule that matches the incoming browser request to enable a\n *          cross-origin request. For a rule to match, the following conditions must be met:</p>\n *          <ul>\n *             <li>\n *                <p>The request's <code>Origin</code> header must match <code>AllowedOrigin</code>\n *                elements.</p>\n *             </li>\n *             <li>\n *                <p>The request method (for example, GET, PUT, HEAD, and so on) or the\n *                   <code>Access-Control-Request-Method</code> header in case of a pre-flight\n *                   <code>OPTIONS</code> request must be one of the <code>AllowedMethod</code>\n *                elements. </p>\n *             </li>\n *             <li>\n *                <p>Every header specified in the <code>Access-Control-Request-Headers</code> request\n *                header of a pre-flight request must match an <code>AllowedHeader</code> element.\n *             </p>\n *             </li>\n *          </ul>\n *          <p> For more information about CORS, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html\">Enabling\n *             Cross-Origin Resource Sharing</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketCors.html\">GetBucketCors</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketCors.html\">DeleteBucketCors</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTOPTIONSobject.html\">RESTOPTIONSobject</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nvar PutBucketCorsCommand = /** @class */function (_super) {\n  __extends(PutBucketCorsCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function PutBucketCorsCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  PutBucketCorsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketCorsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketCorsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  PutBucketCorsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketCorsCommand(input, context);\n  };\n  PutBucketCorsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketCorsCommand(output, context);\n  };\n  return PutBucketCorsCommand;\n}($Command);\nexport { PutBucketCorsCommand };","map":{"version":3,"mappings":";AACA,SAASA,oBAAoB,QAAQ,oBAAoB;AACzD,SACEC,0CAA0C,EAC1CC,wCAAwC,QACnC,0BAA0B;AACjC,SAASC,6BAA6B,QAAQ,yCAAyC;AACvF,SAASC,uBAAuB,QAAQ,qCAAqC;AAC7E,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;EAA0CC;EAKxC;EACA;EAEA,8BAAqBC,KAAgC;IAArD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,gDAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAAqC,EACrCC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IACzF,IAAI,CAACH,eAAe,CAACC,GAAG,CAACb,uBAAuB,CAACU,aAAa,CAAC,CAAC;IAChE,IAAI,CAACE,eAAe,CAACC,GAAG,CAACd,6BAA6B,CAACW,aAAa,CAAC,CAAC;IAEtE,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,UAAU;IAC7B,IAAMC,WAAW,GAAG,sBAAsB;IAC1C,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAE1B,oBAAoB,CAAC2B,kBAAkB;MAChEC,wBAAwB,EAAE,UAACC,MAAW;QAAK,aAAM;MAAN;KAC5C;IACO,kBAAc,GAAKf,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,wCAAS,GAAjB,UAAkBH,KAAgC,EAAEwB,OAAuB;IACzE,OAAO/B,wCAAwC,CAACO,KAAK,EAAEwB,OAAO,CAAC;EACjE,CAAC;EAEOrB,0CAAW,GAAnB,UAAoBiB,MAAsB,EAAEI,OAAuB;IACjE,OAAOhC,0CAA0C,CAAC4B,MAAM,EAAEI,OAAO,CAAC;EACpE,CAAC;EAIH,2BAAC;AAAD,CAAC,CAxDyC1B,QAAQ","names":["PutBucketCorsRequest","deserializeAws_restXmlPutBucketCorsCommand","serializeAws_restXmlPutBucketCorsCommand","getApplyMd5BodyChecksumPlugin","getBucketEndpointPlugin","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutBucketCorsCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/frontend-react-js/node_modules/@aws-sdk/client-s3/commands/PutBucketCorsCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { PutBucketCorsRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlPutBucketCorsCommand,\n  serializeAws_restXmlPutBucketCorsCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getApplyMd5BodyChecksumPlugin } from \"@aws-sdk/middleware-apply-body-checksum\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutBucketCorsCommandInput = PutBucketCorsRequest;\nexport type PutBucketCorsCommandOutput = __MetadataBearer;\n\n/**\n * <p>Sets the <code>cors</code> configuration for your bucket. If the configuration exists,\n *          Amazon S3 replaces it.</p>\n *          <p>To use this operation, you must be allowed to perform the <code>s3:PutBucketCORS</code>\n *          action. By default, the bucket owner has this permission and can grant it to others.</p>\n *          <p>You set this configuration on a bucket so that the bucket can service cross-origin\n *          requests. For example, you might want to enable a request whose origin is\n *             <code>http://www.example.com</code> to access your Amazon S3 bucket at\n *             <code>my.example.bucket.com</code> by using the browser's <code>XMLHttpRequest</code>\n *          capability.</p>\n *          <p>To enable cross-origin resource sharing (CORS) on a bucket, you add the\n *             <code>cors</code> subresource to the bucket. The <code>cors</code> subresource is an XML\n *          document in which you configure rules that identify origins and the HTTP methods that can\n *          be executed on your bucket. The document is limited to 64 KB in size. </p>\n *          <p>When Amazon S3 receives a cross-origin request (or a pre-flight OPTIONS request) against a\n *          bucket, it evaluates the <code>cors</code> configuration on the bucket and uses the first\n *             <code>CORSRule</code> rule that matches the incoming browser request to enable a\n *          cross-origin request. For a rule to match, the following conditions must be met:</p>\n *          <ul>\n *             <li>\n *                <p>The request's <code>Origin</code> header must match <code>AllowedOrigin</code>\n *                elements.</p>\n *             </li>\n *             <li>\n *                <p>The request method (for example, GET, PUT, HEAD, and so on) or the\n *                   <code>Access-Control-Request-Method</code> header in case of a pre-flight\n *                   <code>OPTIONS</code> request must be one of the <code>AllowedMethod</code>\n *                elements. </p>\n *             </li>\n *             <li>\n *                <p>Every header specified in the <code>Access-Control-Request-Headers</code> request\n *                header of a pre-flight request must match an <code>AllowedHeader</code> element.\n *             </p>\n *             </li>\n *          </ul>\n *          <p> For more information about CORS, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html\">Enabling\n *             Cross-Origin Resource Sharing</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketCors.html\">GetBucketCors</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketCors.html\">DeleteBucketCors</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTOPTIONSobject.html\">RESTOPTIONSobject</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class PutBucketCorsCommand extends $Command<\n  PutBucketCorsCommandInput,\n  PutBucketCorsCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutBucketCorsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutBucketCorsCommandInput, PutBucketCorsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutBucketCorsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutBucketCorsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutBucketCorsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlPutBucketCorsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutBucketCorsCommandOutput> {\n    return deserializeAws_restXmlPutBucketCorsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}