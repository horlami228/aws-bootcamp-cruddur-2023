{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __read, __spread, __values } from \"tslib\";\nimport { AWS_CLOUDWATCH_CATEGORY } from '../Util/Constants';\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\nexport var LOG_TYPE;\n(function (LOG_TYPE) {\n  LOG_TYPE[\"DEBUG\"] = \"DEBUG\";\n  LOG_TYPE[\"ERROR\"] = \"ERROR\";\n  LOG_TYPE[\"INFO\"] = \"INFO\";\n  LOG_TYPE[\"WARN\"] = \"WARN\";\n  LOG_TYPE[\"VERBOSE\"] = \"VERBOSE\";\n})(LOG_TYPE || (LOG_TYPE = {}));\n/**\n * Write logs\n * @class Logger\n */\nvar ConsoleLogger = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string} name - Name of the logger\n   */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = LOG_TYPE.WARN;\n    }\n    this.name = name;\n    this.level = level;\n    this._pluggables = [];\n  }\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n  ConsoleLogger.prototype.configure = function (config) {\n    if (!config) return this._config;\n    this._config = config;\n    return this._config;\n  };\n  /**\n   * Write log\n   * @method\n   * @memeberof Logger\n   * @param {LOG_TYPE|string} type - log type, default INFO\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype._log = function (type) {\n    var e_1, _a;\n    var msg = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n    var logger_level_name = this.level;\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n    var log = console.log.bind(console);\n    if (type === LOG_TYPE.ERROR && console.error) {\n      log = console.error.bind(console);\n    }\n    if (type === LOG_TYPE.WARN && console.warn) {\n      log = console.warn.bind(console);\n    }\n    var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n    var message = '';\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      message = prefix + \" - \" + msg[0];\n      log(message);\n    } else if (msg.length === 1) {\n      message = prefix + \" \" + msg[0];\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n      message = prefix + \" - \" + msg[0] + \" \" + obj;\n      log(prefix + \" - \" + msg[0], obj);\n    } else {\n      message = prefix + \" \" + msg;\n      log(prefix, msg);\n    }\n    try {\n      for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var plugin = _c.value;\n        var logEvent = {\n          message: message,\n          timestamp: Date.now()\n        };\n        plugin.pushLogs([logEvent]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * Write General log. Default to INFO\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n  };\n  /**\n   * Write INFO log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n  };\n  /**\n   * Write WARN log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spread([LOG_TYPE.WARN], msg));\n  };\n  /**\n   * Write ERROR log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spread([LOG_TYPE.ERROR], msg));\n  };\n  /**\n   * Write DEBUG log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spread([LOG_TYPE.DEBUG], msg));\n  };\n  /**\n   * Write VERBOSE log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spread([LOG_TYPE.VERBOSE], msg));\n  };\n  ConsoleLogger.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n      this._pluggables.push(pluggable);\n      pluggable.configure(this._config);\n    }\n  };\n  ConsoleLogger.prototype.listPluggables = function () {\n    return this._pluggables;\n  };\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();\nexport { ConsoleLogger };","map":{"version":3,"mappings":"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","names":["AWS_CLOUDWATCH_CATEGORY","LOG_LEVELS","VERBOSE","DEBUG","INFO","WARN","ERROR","LOG_TYPE","name","level","_pluggables","ConsoleLogger","n","dt","Date","_padding","getMinutes","getSeconds","join","getMilliseconds","config","_config","type","_i","msg","logger_level_name","LOG_LEVEL","window","logger_level","type_level","log","console","bind","error","warn","prefix","_ts","message","length","obj","slice","plugin","logEvent","timestamp","now","pushLogs","_log","pluggable","getCategoryName","push","configure"],"sources":["/frontend-react-js/node_modules/@aws-amplify/core/src/Logger/ConsoleLogger.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { InputLogEvent } from '@aws-sdk/client-cloudwatch-logs';\nimport { LoggingProvider } from '../types';\nimport { AWS_CLOUDWATCH_CATEGORY } from '../Util/Constants';\nimport { Logger } from './logger-interface';\n\nconst LOG_LEVELS = {\n\tVERBOSE: 1,\n\tDEBUG: 2,\n\tINFO: 3,\n\tWARN: 4,\n\tERROR: 5,\n};\n\nexport enum LOG_TYPE {\n\tDEBUG = 'DEBUG',\n\tERROR = 'ERROR',\n\tINFO = 'INFO',\n\tWARN = 'WARN',\n\tVERBOSE = 'VERBOSE',\n}\n\n/**\n * Write logs\n * @class Logger\n */\nexport class ConsoleLogger implements Logger {\n\tname: string;\n\tlevel: LOG_TYPE | string;\n\tprivate _pluggables: LoggingProvider[];\n\tprivate _config: object;\n\n\t/**\n\t * @constructor\n\t * @param {string} name - Name of the logger\n\t */\n\tconstructor(name: string, level: LOG_TYPE | string = LOG_TYPE.WARN) {\n\t\tthis.name = name;\n\t\tthis.level = level;\n\t\tthis._pluggables = [];\n\t}\n\n\tstatic LOG_LEVEL = null;\n\n\t_padding(n) {\n\t\treturn n < 10 ? '0' + n : '' + n;\n\t}\n\n\t_ts() {\n\t\tconst dt = new Date();\n\t\treturn (\n\t\t\t[this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(\n\t\t\t\t':'\n\t\t\t) +\n\t\t\t'.' +\n\t\t\tdt.getMilliseconds()\n\t\t);\n\t}\n\n\tconfigure(config?: object) {\n\t\tif (!config) return this._config;\n\n\t\tthis._config = config;\n\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Write log\n\t * @method\n\t * @memeberof Logger\n\t * @param {LOG_TYPE|string} type - log type, default INFO\n\t * @param {string|object} msg - Logging message or object\n\t */\n\t_log(type: LOG_TYPE | string, ...msg) {\n\t\tlet logger_level_name = this.level;\n\t\tif (ConsoleLogger.LOG_LEVEL) {\n\t\t\tlogger_level_name = ConsoleLogger.LOG_LEVEL;\n\t\t}\n\t\tif (typeof (<any>window) !== 'undefined' && (<any>window).LOG_LEVEL) {\n\t\t\tlogger_level_name = (<any>window).LOG_LEVEL;\n\t\t}\n\t\tconst logger_level = LOG_LEVELS[logger_level_name];\n\t\tconst type_level = LOG_LEVELS[type];\n\t\tif (!(type_level >= logger_level)) {\n\t\t\t// Do nothing if type is not greater than or equal to logger level (handle undefined)\n\t\t\treturn;\n\t\t}\n\n\t\tlet log = console.log.bind(console);\n\t\tif (type === LOG_TYPE.ERROR && console.error) {\n\t\t\tlog = console.error.bind(console);\n\t\t}\n\t\tif (type === LOG_TYPE.WARN && console.warn) {\n\t\t\tlog = console.warn.bind(console);\n\t\t}\n\n\t\tconst prefix = `[${type}] ${this._ts()} ${this.name}`;\n\t\tlet message = '';\n\n\t\tif (msg.length === 1 && typeof msg[0] === 'string') {\n\t\t\tmessage = `${prefix} - ${msg[0]}`;\n\t\t\tlog(message);\n\t\t} else if (msg.length === 1) {\n\t\t\tmessage = `${prefix} ${msg[0]}`;\n\t\t\tlog(prefix, msg[0]);\n\t\t} else if (typeof msg[0] === 'string') {\n\t\t\tlet obj = msg.slice(1);\n\t\t\tif (obj.length === 1) {\n\t\t\t\tobj = obj[0];\n\t\t\t}\n\t\t\tmessage = `${prefix} - ${msg[0]} ${obj}`;\n\t\t\tlog(`${prefix} - ${msg[0]}`, obj);\n\t\t} else {\n\t\t\tmessage = `${prefix} ${msg}`;\n\t\t\tlog(prefix, msg);\n\t\t}\n\n\t\tfor (const plugin of this._pluggables) {\n\t\t\tconst logEvent: InputLogEvent = { message, timestamp: Date.now() };\n\t\t\tplugin.pushLogs([logEvent]);\n\t\t}\n\t}\n\n\t/**\n\t * Write General log. Default to INFO\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tlog(...msg) {\n\t\tthis._log(LOG_TYPE.INFO, ...msg);\n\t}\n\n\t/**\n\t * Write INFO log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tinfo(...msg) {\n\t\tthis._log(LOG_TYPE.INFO, ...msg);\n\t}\n\n\t/**\n\t * Write WARN log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\twarn(...msg) {\n\t\tthis._log(LOG_TYPE.WARN, ...msg);\n\t}\n\n\t/**\n\t * Write ERROR log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\terror(...msg) {\n\t\tthis._log(LOG_TYPE.ERROR, ...msg);\n\t}\n\n\t/**\n\t * Write DEBUG log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tdebug(...msg) {\n\t\tthis._log(LOG_TYPE.DEBUG, ...msg);\n\t}\n\n\t/**\n\t * Write VERBOSE log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tverbose(...msg) {\n\t\tthis._log(LOG_TYPE.VERBOSE, ...msg);\n\t}\n\n\taddPluggable(pluggable: LoggingProvider) {\n\t\tif (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tpluggable.configure(this._config);\n\t\t}\n\t}\n\n\tlistPluggables() {\n\t\treturn this._pluggables;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}