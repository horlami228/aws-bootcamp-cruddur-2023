{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TagResourceInput, TagResourceResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1TagResourceCommand, serializeAws_json1_1TagResourceCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can\n *          use to categorize and manage identity pools in different ways, such as by purpose, owner,\n *          environment, or other criteria.</p>\n *          <p>Each tag consists of a key and value, both of which you define. A key is a general\n *          category for more specific values. For example, if you have two versions of an identity\n *          pool, one for testing and another for production, you might assign an\n *             <code>Environment</code> tag key to both identity pools. The value of this key might be\n *             <code>Test</code> for one identity pool and <code>Production</code> for the\n *          other.</p>\n *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that\n *          they appear on the Billing and Cost Management console, where you can track the costs\n *          associated with your identity pools. In an IAM policy, you can constrain permissions for\n *          identity pools based on specific tags or tag values.</p>\n *          <p>You can use this action up to 5 times per second, per account. An identity pool can have\n *          as many as 50 tags.</p>\n */\nvar TagResourceCommand = /** @class */function (_super) {\n  __extends(TagResourceCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function TagResourceCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  TagResourceCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CognitoIdentityClient\";\n    var commandName = \"TagResourceCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,\n      outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  TagResourceCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1TagResourceCommand(input, context);\n  };\n  TagResourceCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1TagResourceCommand(output, context);\n  };\n  return TagResourceCommand;\n}($Command);\nexport { TagResourceCommand };","map":{"version":3,"mappings":";AACA,SAASA,gBAAgB,EAAEC,mBAAmB,QAAQ,oBAAoB;AAC1E,SACEC,wCAAwC,EACxCC,sCAAsC,QACjC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,gBAAgB,QAAQ,6BAA6B;AAE9D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;AAiBA;EAAwCC;EAKtC;EACA;EAEA,4BAAqBC,KAA8B;IAAnD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,8CAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAAkD,EAClDC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACb,cAAc,CAACU,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IACzF,IAAI,CAACH,eAAe,CAACC,GAAG,CAACZ,gBAAgB,CAACS,aAAa,CAAC,CAAC;IAEzD,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,uBAAuB;IAC1C,IAAMC,WAAW,GAAG,oBAAoB;IACxC,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAE1B,gBAAgB,CAAC2B,kBAAkB;MAC5DC,wBAAwB,EAAE3B,mBAAmB,CAAC0B;KAC/C;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,sCAAS,GAAjB,UAAkBH,KAA8B,EAAEuB,OAAuB;IACvE,OAAO7B,sCAAsC,CAACM,KAAK,EAAEuB,OAAO,CAAC;EAC/D,CAAC;EAEOpB,wCAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO9B,wCAAwC,CAAC+B,MAAM,EAAED,OAAO,CAAC;EAClE,CAAC;EAIH,yBAAC;AAAD,CAAC,CAvDuCzB,QAAQ","names":["TagResourceInput","TagResourceResponse","deserializeAws_json1_1TagResourceCommand","serializeAws_json1_1TagResourceCommand","getSerdePlugin","getAwsAuthPlugin","Command","$Command","__extends","input","_super","_this","TagResourceCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/frontend-react-js/node_modules/@aws-sdk/client-cognito-identity/commands/TagResourceCommand.ts"],"sourcesContent":["import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../CognitoIdentityClient\";\nimport { TagResourceInput, TagResourceResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1TagResourceCommand,\n  serializeAws_json1_1TagResourceCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type TagResourceCommandInput = TagResourceInput;\nexport type TagResourceCommandOutput = TagResourceResponse & __MetadataBearer;\n\n/**\n * <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can\n *          use to categorize and manage identity pools in different ways, such as by purpose, owner,\n *          environment, or other criteria.</p>\n *          <p>Each tag consists of a key and value, both of which you define. A key is a general\n *          category for more specific values. For example, if you have two versions of an identity\n *          pool, one for testing and another for production, you might assign an\n *             <code>Environment</code> tag key to both identity pools. The value of this key might be\n *             <code>Test</code> for one identity pool and <code>Production</code> for the\n *          other.</p>\n *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that\n *          they appear on the Billing and Cost Management console, where you can track the costs\n *          associated with your identity pools. In an IAM policy, you can constrain permissions for\n *          identity pools based on specific tags or tag values.</p>\n *          <p>You can use this action up to 5 times per second, per account. An identity pool can have\n *          as many as 50 tags.</p>\n */\nexport class TagResourceCommand extends $Command<\n  TagResourceCommandInput,\n  TagResourceCommandOutput,\n  CognitoIdentityClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: TagResourceCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: CognitoIdentityClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<TagResourceCommandInput, TagResourceCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"CognitoIdentityClient\";\n    const commandName = \"TagResourceCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,\n      outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: TagResourceCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1TagResourceCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<TagResourceCommandOutput> {\n    return deserializeAws_json1_1TagResourceCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}