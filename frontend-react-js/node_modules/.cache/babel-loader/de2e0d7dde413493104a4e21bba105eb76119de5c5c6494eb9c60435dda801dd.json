{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n    this.queueSize = 4;\n    // Data for current upload\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.completedParts = [];\n    this.uploadId = null;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, _b, numberOfPartsToUpload, parts, start, error_1;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 10,, 12]);\n            _a = this;\n            return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n          case 1:\n            _a.body = _c.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 2];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2 /*return*/, this.s3client.send(putObjectCommand)];\n          case 2:\n            // Step 1: Initiate the multi part upload\n            _b = this;\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 3:\n            // Step 1: Initiate the multi part upload\n            _b.uploadId = _c.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            parts = this.createParts();\n            start = 0;\n            _c.label = 4;\n          case 4:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 7];\n            // Upload as many as `queueSize` parts simultaneously\n            return [4 /*yield*/, this.uploadParts(this.uploadId, parts.slice(start, start + this.queueSize))];\n          case 5:\n            // Upload as many as `queueSize` parts simultaneously\n            _c.sent();\n            _c.label = 6;\n          case 6:\n            start += this.queueSize;\n            return [3 /*break*/, 4];\n          case 7:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4 /*yield*/, this.finishMultiPartUpload(this.uploadId)];\n          case 8:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _c.sent()];\n          case 9:\n            return [3 /*break*/, 12];\n          case 10:\n            error_1 = _c.sent();\n            // if any error is thrown, call cleanup\n            return [4 /*yield*/, this.cleanup(this.uploadId)];\n          case 11:\n            // if any error is thrown, call cleanup\n            _c.sent();\n            logger.error('Error. Cancelling the multipart upload.');\n            throw error_1;\n          case 12:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    try {\n      var parts = [];\n      for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n        var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n        parts.push({\n          bodyPart: this.body.slice(bodyStart, bodyEnd),\n          partNumber: parts.length + 1,\n          emitter: new events.EventEmitter(),\n          _lastUploadedBytes: 0\n        });\n        bodyStart += this.minPartSize;\n      }\n      return parts;\n    } catch (error) {\n      logger.error(error);\n      throw error;\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n          case 2:\n            error_2 = _a.sent();\n            logger.error(error_2);\n            throw error_2;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_3;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n                    case 1:\n                      res = _b.sent();\n                      return [2 /*return*/, res];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            allResults = _a.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n            throw error_3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n          case 2:\n            data = _a.sent();\n            return [2 /*return*/, data.Key];\n          case 3:\n            error_4 = _a.sent();\n            logger.error('Error happened while finishing the upload.');\n            throw error_4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n          case 2:\n            data = _a.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multipart upload clean up failed.');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.isGenericObject(body)) {\n          // Any javascript object\n          return [2 /*return*/, JSON.stringify(body)];\n        } else {\n          // Files, arrayBuffer etc\n          return [2 /*return*/, body];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","events","createPrefixMiddleware","prefixMiddlewareOptions","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","createS3Client","logger","params","opts","emitter","s3client","_createNewS3Client","AWSS3ProviderManagedUpload","_a","validateAndSanitizeBody","Body","body","_c","totalBytesToUpload","byteLength","minPartSize","putObjectCommand","send","_b","createMultiPartUpload","uploadId","numberOfPartsToUpload","Math","ceil","parts","createParts","start","uploadParts","slice","queueSize","map","_this","removeEventListener","part","finishMultiPartUpload","cleanup","error","error_1","bodyStart","bodyEnd","min","push","bodyPart","partNumber","length","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","response","debug","UploadId","error_2","Promise","all","setupEventListener","options","Key","Bucket","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","PartNumber","res","allResults","i","completedParts","ETag","error_3","input","MultipartUpload","Parts","completeUploadCommand","data","error_4","bytesUploaded","Error","removeAllListeners","on","progressChanged","progress","loaded","incrementalUpdate","emit","total","key","undefined","size","path","isGenericObject","JSON","stringify","config","middlewareStack","add"],"sources":["/frontend-react-js/node_modules/@aws-amplify/storage/src/providers/AWSS3ProviderManagedUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tPutObjectCommand,\n\tPutObjectRequest,\n\tCreateMultipartUploadCommand,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tCompleteMultipartUploadCommandInput,\n\tListPartsCommand,\n\tAbortMultipartUploadCommand,\n\tCompletedPart,\n\tS3Client,\n} from '@aws-sdk/client-s3';\nimport {\n\tSEND_UPLOAD_PROGRESS_EVENT,\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tAxiosHttpHandlerOptions,\n} from './axios-http-handler';\nimport * as events from 'events';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\n\nconst logger = new Logger('AWSS3ProviderManagedUpload');\n\nexport declare interface Part {\n\tbodyPart: any;\n\tpartNumber: number;\n\temitter: events.EventEmitter;\n\tetag?: string;\n\t_lastUploadedBytes: number;\n}\n\nexport class AWSS3ProviderManagedUpload {\n\t// Defaults\n\tprotected minPartSize = 5 * 1024 * 1024; // in MB\n\tprivate queueSize = 4;\n\n\t// Data for current upload\n\tprivate body = null;\n\tprivate params: PutObjectRequest = null;\n\tprivate opts = null;\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate s3client: S3Client;\n\tprivate uploadId = null;\n\n\t// Progress reporting\n\tprivate bytesUploaded = 0;\n\tprivate totalBytesToUpload = 0;\n\tprivate emitter: events.EventEmitter = null;\n\n\tconstructor(params: PutObjectRequest, opts, emitter: events.EventEmitter) {\n\t\tthis.params = params;\n\t\tthis.opts = opts;\n\t\tthis.emitter = emitter;\n\t\tthis.s3client = this._createNewS3Client(opts, emitter);\n\t}\n\n\tpublic async upload() {\n\t\ttry {\n\t\t\tthis.body = await this.validateAndSanitizeBody(this.params.Body);\n\t\t\tthis.totalBytesToUpload = this.byteLength(this.body);\n\t\t\tif (this.totalBytesToUpload <= this.minPartSize) {\n\t\t\t\t// Multipart upload is not required. Upload the sanitized body as is\n\t\t\t\tthis.params.Body = this.body;\n\t\t\t\tconst putObjectCommand = new PutObjectCommand(this.params);\n\t\t\t\treturn this.s3client.send(putObjectCommand);\n\t\t\t} else {\n\t\t\t\t// Step 1: Initiate the multi part upload\n\t\t\t\tthis.uploadId = await this.createMultiPartUpload();\n\n\t\t\t\t// Step 2: Upload chunks in parallel as requested\n\t\t\t\tconst numberOfPartsToUpload = Math.ceil(\n\t\t\t\t\tthis.totalBytesToUpload / this.minPartSize\n\t\t\t\t);\n\n\t\t\t\tconst parts: Part[] = this.createParts();\n\t\t\t\tfor (\n\t\t\t\t\tlet start = 0;\n\t\t\t\t\tstart < numberOfPartsToUpload;\n\t\t\t\t\tstart += this.queueSize\n\t\t\t\t) {\n\n\t\t\t\t\t// Upload as many as `queueSize` parts simultaneously\n\t\t\t\t\tawait this.uploadParts(\n\t\t\t\t\t\tthis.uploadId,\n\t\t\t\t\t\tparts.slice(start, start + this.queueSize)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tparts.map(part => {\n\t\t\t\t\tthis.removeEventListener(part);\n\t\t\t\t});\n\n\t\t\t\t// Step 3: Finalize the upload such that S3 can recreate the file\n\t\t\t\treturn await this.finishMultiPartUpload(this.uploadId);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// if any error is thrown, call cleanup\n\t\t\tawait this.cleanup(this.uploadId);\n\t\t\tlogger.error('Error. Cancelling the multipart upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate createParts(): Part[] {\n\t\ttry {\n\t\t\tconst parts: Part[] = [];\n\t\t\tfor (let bodyStart = 0; bodyStart < this.totalBytesToUpload; ) {\n\t\t\t\tconst bodyEnd = Math.min(\n\t\t\t\t\tbodyStart + this.minPartSize,\n\t\t\t\t\tthis.totalBytesToUpload\n\t\t\t\t);\n\t\t\t\tparts.push({\n\t\t\t\t\tbodyPart: this.body.slice(bodyStart, bodyEnd),\n\t\t\t\t\tpartNumber: parts.length + 1,\n\t\t\t\t\temitter: new events.EventEmitter(),\n\t\t\t\t\t_lastUploadedBytes: 0,\n\t\t\t\t});\n\t\t\t\tbodyStart += this.minPartSize;\n\t\t\t}\n\t\t\treturn parts;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async createMultiPartUpload() {\n\t\ttry {\n\t\t\tconst createMultiPartUploadCommand = new CreateMultipartUploadCommand(\n\t\t\t\tthis.params\n\t\t\t);\n\t\t\tconst response = await this.s3client.send(createMultiPartUploadCommand);\n\t\t\tlogger.debug(response.UploadId);\n\t\t\treturn response.UploadId;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @private Not to be extended outside of tests\n\t * @VisibleFotTesting\n\t */\n\tprotected async uploadParts(uploadId: string, parts: Part[]) {\n\t\ttry {\n\t\t\tconst allResults = await Promise.all(\n\t\t\t\tparts.map(async part => {\n\t\t\t\t\tthis.setupEventListener(part);\n\t\t\t\t\tconst options: AxiosHttpHandlerOptions = { emitter: part.emitter };\n\t\t\t\t\tconst {\n\t\t\t\t\t\tKey,\n\t\t\t\t\t\tBucket,\n\t\t\t\t\t\tSSECustomerAlgorithm,\n\t\t\t\t\t\tSSECustomerKey,\n\t\t\t\t\t\tSSECustomerKeyMD5,\n\t\t\t\t\t} = this.params;\n\t\t\t\t\tconst res = await this.s3client.send(\n\t\t\t\t\t\tnew UploadPartCommand({\n\t\t\t\t\t\t\tPartNumber: part.partNumber,\n\t\t\t\t\t\t\tBody: part.bodyPart,\n\t\t\t\t\t\t\tUploadId: uploadId,\n\t\t\t\t\t\t\tKey,\n\t\t\t\t\t\t\tBucket,\n\t\t\t\t\t\t\t...(SSECustomerAlgorithm && { SSECustomerAlgorithm }),\n\t\t\t\t\t\t\t...(SSECustomerKey && { SSECustomerKey }),\n\t\t\t\t\t\t\t...(SSECustomerKeyMD5 && { SSECustomerKeyMD5 }),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t\t\treturn res;\n\t\t\t\t})\n\t\t\t);\n\t\t\t// The order of resolved promises is the same as input promise order.\n\t\t\tfor (let i = 0; i < allResults.length; i++) {\n\t\t\t\tthis.completedParts.push({\n\t\t\t\t\tPartNumber: parts[i].partNumber,\n\t\t\t\t\tETag: allResults[i].ETag,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(\n\t\t\t\t'Error happened while uploading a part. Cancelling the multipart upload'\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async finishMultiPartUpload(uploadId: string) {\n\t\tconst input: CompleteMultipartUploadCommandInput = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t\tMultipartUpload: { Parts: this.completedParts },\n\t\t};\n\t\tconst completeUploadCommand = new CompleteMultipartUploadCommand(input);\n\t\ttry {\n\t\t\tconst data = await this.s3client.send(completeUploadCommand);\n\t\t\treturn data.Key;\n\t\t} catch (error) {\n\t\t\tlogger.error('Error happened while finishing the upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async cleanup(uploadId: string) {\n\t\t// Reset this's state\n\t\tthis.body = null;\n\t\tthis.completedParts = [];\n\t\tthis.bytesUploaded = 0;\n\t\tthis.totalBytesToUpload = 0;\n\n\t\tconst input = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t};\n\n\t\tawait this.s3client.send(new AbortMultipartUploadCommand(input));\n\n\t\t// verify that all parts are removed.\n\t\tconst data = await this.s3client.send(new ListPartsCommand(input));\n\n\t\tif (data && data.Parts && data.Parts.length > 0) {\n\t\t\tthrow new Error('Multipart upload clean up failed.');\n\t\t}\n\t}\n\n\tprivate removeEventListener(part: Part) {\n\t\tpart.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n\t\tpart.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t}\n\n\tprivate setupEventListener(part: Part) {\n\t\tpart.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\tthis.progressChanged(\n\t\t\t\tpart.partNumber,\n\t\t\t\tprogress.loaded - part._lastUploadedBytes\n\t\t\t);\n\t\t\tpart._lastUploadedBytes = progress.loaded;\n\t\t});\n\t}\n\n\tprivate progressChanged(partNumber: number, incrementalUpdate: number) {\n\t\tthis.bytesUploaded += incrementalUpdate;\n\t\tthis.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytesToUpload,\n\t\t\tpart: partNumber,\n\t\t\tkey: this.params.Key,\n\t\t});\n\t}\n\n\tprivate byteLength(input: any) {\n\t\tif (input === null || input === undefined) return 0;\n\t\tif (typeof input.byteLength === 'number') {\n\t\t\treturn input.byteLength;\n\t\t} else if (typeof input.length === 'number') {\n\t\t\treturn input.length;\n\t\t} else if (typeof input.size === 'number') {\n\t\t\treturn input.size;\n\t\t} else if (typeof input.path === 'string') {\n\t\t\t/* NodeJs Support\n\t\t\treturn require('fs').lstatSync(input.path).size;\n\t\t\t*/\n\t\t} else {\n\t\t\tthrow new Error('Cannot determine length of ' + input);\n\t\t}\n\t}\n\n\tprivate async validateAndSanitizeBody(body: any): Promise<any> {\n\t\tif (this.isGenericObject(body)) {\n\t\t\t// Any javascript object\n\t\t\treturn JSON.stringify(body);\n\t\t} else {\n\t\t\t// Files, arrayBuffer etc\n\t\t\treturn body;\n\t\t}\n\t\t/* TODO: streams and files for nodejs \n\t\tif (\n\t\t\ttypeof body.path === 'string' &&\n\t\t\trequire('fs').lstatSync(body.path).size > 0\n\t\t) {\n\t\t\treturn body;\n\t\t} */\n\t}\n\n\tprivate isGenericObject(body: any): body is Object {\n\t\tif (body !== null && typeof body === 'object') {\n\t\t\ttry {\n\t\t\t\treturn !(this.byteLength(body) >= 0);\n\t\t\t} catch (error) {\n\t\t\t\t// If we cannot determine the length of the body, consider it\n\t\t\t\t// as a generic object and upload a stringified version of it\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _createNewS3Client(config, emitter?: events.EventEmitter) {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tcreatePrefixMiddleware(this.opts, this.params.Key),\n\t\t\tprefixMiddlewareOptions\n\t\t);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}