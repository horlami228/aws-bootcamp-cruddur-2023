{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\nexport function fromCognitoIdentity(parameters) {\n  var _this = this;\n  return function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;\n      var _j;\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            _f = (_e = parameters.client).send;\n            _g = GetCredentialsForIdentityCommand.bind;\n            _j = {\n              CustomRoleArn: parameters.customRoleArn,\n              IdentityId: parameters.identityId\n            };\n            if (!parameters.logins) return [3 /*break*/, 2];\n            return [4 /*yield*/, resolveLogins(parameters.logins)];\n          case 1:\n            _h = _k.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _h = undefined;\n            _k.label = 3;\n          case 3:\n            return [4 /*yield*/, _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];\n          case 4:\n            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;\n            return [2 /*return*/, {\n              identityId: parameters.identityId,\n              accessKeyId: AccessKeyId,\n              secretAccessKey: SecretKey,\n              sessionToken: SessionToken,\n              expiration: Expiration\n            }];\n        }\n      });\n    });\n  };\n}\nfunction throwOnMissingAccessKeyId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\nfunction throwOnMissingCredentials() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\nfunction throwOnMissingSecretKey() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}","map":{"version":3,"mappings":";AAAA,SAASA,gCAAgC,QAAQ,kCAAkC;AACnF,SAASC,aAAa,QAAQ,4BAA4B;AAI1D,SAASC,aAAa,QAAQ,iBAAiB;AAS/C;;;;;;AAMA,OAAM,SAAUC,mBAAmB,CAACC,UAAyC;EAA7E;EACE,OAAO;IAAA;;;;;;YAQKC,qBAAU,CAACC,MAAM,EAACC,IAAI;iBAC1BP,gCAAgC;;cAClCQ,aAAa,EAAEJ,UAAU,CAACK,aAAa;cACvCC,UAAU,EAAEN,UAAU,CAACO;;iBACfP,UAAU,CAACQ,MAAM,EAAjB;YAAoB,qBAAMV,aAAa,CAACE,UAAU,CAACQ,MAAM,CAAC;;YAAtCC,cAAsC;;;YAAGA,cAAS;;;YAJ9E,qBAAMR,cACR,cAAIL,gCAAgC,YAGlCc,SAAM,KAAwE,UAC9E,EACH;;YAZCC,KAMEC,SAMH,YAPgC,EAL/BC,qBAKIC,yBAAyB,EAAE,OAJ7BC,mBAAyC,EAAzCC,WAAW,mBAAGC,yBAAyB,EAAE,OACzCC,UAAU,kBACVC,iBAAqC,EAArCC,SAAS,mBAAGC,uBAAuB,EAAE,OACrCC,YAAY;YAUhB,sBAAO;cACLf,UAAU,EAAEP,UAAU,CAACO,UAAU;cACjCgB,WAAW,EAAEP,WAAW;cACxBQ,eAAe,EAAEJ,SAAS;cAC1BK,YAAY,EAAEH,YAAY;cAC1BI,UAAU,EAAER;aACb;QAAC;;;GACH;AACH;AAUA,SAASD,yBAAyB;EAChC,MAAM,IAAIpB,aAAa,CAAC,yDAAyD,CAAC;AACpF;AAEA,SAASiB,yBAAyB;EAChC,MAAM,IAAIjB,aAAa,CAAC,uDAAuD,CAAC;AAClF;AAEA,SAASwB,uBAAuB;EAC9B,MAAM,IAAIxB,aAAa,CAAC,sDAAsD,CAAC;AACjF","names":["GetCredentialsForIdentityCommand","ProviderError","resolveLogins","fromCognitoIdentity","parameters","_f","client","send","CustomRoleArn","customRoleArn","IdentityId","identityId","logins","_h","_j","_a","_k","_b","throwOnMissingCredentials","_c","AccessKeyId","throwOnMissingAccessKeyId","Expiration","_d","SecretKey","throwOnMissingSecretKey","SessionToken","accessKeyId","secretAccessKey","sessionToken","expiration"],"sources":["/frontend-react-js/node_modules/@aws-sdk/credential-provider-cognito-identity/src/fromCognitoIdentity.ts"],"sourcesContent":["import { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider, Credentials } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { resolveLogins } from \"./resolveLogins\";\n\nexport interface CognitoIdentityCredentials extends Credentials {\n  /**\n   * The Cognito ID returned by the last call to AWS.CognitoIdentity.getOpenIdToken().\n   */\n  identityId: string;\n}\n\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\nexport function fromCognitoIdentity(parameters: FromCognitoIdentityParameters): CredentialProvider {\n  return async (): Promise<CognitoIdentityCredentials> => {\n    const {\n      Credentials: {\n        AccessKeyId = throwOnMissingAccessKeyId(),\n        Expiration,\n        SecretKey = throwOnMissingSecretKey(),\n        SessionToken,\n      } = throwOnMissingCredentials(),\n    } = await parameters.client.send(\n      new GetCredentialsForIdentityCommand({\n        CustomRoleArn: parameters.customRoleArn,\n        IdentityId: parameters.identityId,\n        Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n      })\n    );\n\n    return {\n      identityId: parameters.identityId,\n      accessKeyId: AccessKeyId,\n      secretAccessKey: SecretKey,\n      sessionToken: SessionToken,\n      expiration: Expiration,\n    };\n  };\n}\n\nexport interface FromCognitoIdentityParameters extends CognitoProviderParameters {\n  /**\n   * The unique identifier for the identity against which credentials will be\n   * issued.\n   */\n  identityId: string;\n}\n\nfunction throwOnMissingAccessKeyId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}