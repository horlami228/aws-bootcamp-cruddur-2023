{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool(_a) {\n  var _this = this;\n  var accountId = _a.accountId,\n    _b = _a.cache,\n    cache = _b === void 0 ? localStorage() : _b,\n    client = _a.client,\n    customRoleArn = _a.customRoleArn,\n    identityPoolId = _a.identityPoolId,\n    logins = _a.logins,\n    _c = _a.userIdentifier,\n    userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined : _c;\n  var cacheKey = userIdentifier ? \"aws:cognito-identity-credentials:\" + identityPoolId + \":\" + userIdentifier : undefined;\n  var provider = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var identityId, _a, _b, IdentityId, _c, _d, _e, _f;\n      var _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _a = cacheKey;\n            if (!_a) return [3 /*break*/, 2];\n            return [4 /*yield*/, cache.getItem(cacheKey)];\n          case 1:\n            _a = _h.sent();\n            _h.label = 2;\n          case 2:\n            identityId = _a;\n            if (!!identityId) return [3 /*break*/, 7];\n            _d = (_c = client).send;\n            _e = GetIdCommand.bind;\n            _g = {\n              AccountId: accountId,\n              IdentityPoolId: identityPoolId\n            };\n            if (!logins) return [3 /*break*/, 4];\n            return [4 /*yield*/, resolveLogins(logins)];\n          case 3:\n            _f = _h.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            _f = undefined;\n            _h.label = 5;\n          case 5:\n            return [4 /*yield*/, _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];\n          case 6:\n            _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;\n            identityId = IdentityId;\n            if (cacheKey) {\n              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () {});\n            }\n            _h.label = 7;\n          case 7:\n            provider = fromCognitoIdentity({\n              client: client,\n              customRoleArn: customRoleArn,\n              logins: logins,\n              identityId: identityId\n            });\n            return [2 /*return*/, provider()];\n        }\n      });\n    });\n  };\n  return function () {\n    return provider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(function () {});\n          }\n          throw err;\n        });\n      });\n    });\n  };\n}\nfunction throwOnMissingId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":{"version":3,"mappings":";AAAA,SAASA,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,aAAa,QAAQ,4BAA4B;AAI1D,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,aAAa,QAAQ,iBAAiB;AAG/C;;;;;;;;AAQA,OAAM,SAAUC,uBAAuB,CAACC,EAQJ;EARpC;MACEC,SAAS;IACTC,aAAsB;IAAtBC,KAAK,mBAAGN,YAAY,EAAE;IACtBO,MAAM;IACNC,aAAa;IACbC,cAAc;IACdC,MAAM;IACNC,sBAAsF;IAAtFC,cAAc,mBAAG,CAACF,MAAM,IAAIG,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACK,MAAM,KAAK,CAAC,GAAG,WAAW,GAAGC,SAAS;EAEtF,IAAMC,QAAQ,GAAGL,cAAc,GAAG,sCAAoCH,cAAc,SAAIG,cAAgB,GAAGI,SAAS;EAEpH,IAAIE,QAAQ,GAAuB;IAAA;;;;;;YAChBf,aAAQ;qBAAR;YAAa,qBAAMG,KAAK,CAACa,OAAO,CAACF,QAAQ,CAAC;;YAA9Bd,KAACiB,SAA8B;;;YAAxDC,UAAU,KAA8C;iBACxD,CAACA,UAAU,EAAX;YACgDC,iBAAM,EAACC,IAAI;iBACvD1B,YAAY;;cACd2B,SAAS,EAAEpB,SAAS;cACpBqB,cAAc,EAAEhB;;iBACRC,MAAM,EAAN;YAAS,qBAAMT,aAAa,CAACS,MAAM,CAAC;;YAA3BgB,cAA2B;;;YAAGA,cAAS;;;YAJhB,qBAAMJ,cAChD,cAAIzB,YAAY,YAGd8B,SAAM,KAAkD,UACxD,EACH;;YANOtB,KAAoCe,SAM3C,WANsC,EAA/BQ,UAAU,mBAAGC,gBAAgB,EAAE;YAOvCR,UAAU,GAAGO,UAAU;YACvB,IAAIX,QAAQ,EAAE;cACZa,OAAO,CAACC,OAAO,CAACzB,KAAK,CAAC0B,OAAO,CAACf,QAAQ,EAAEI,UAAU,CAAC,CAAC,CAACY,KAAK,CAAC,aAAO,CAAC,CAAC;;;;YAIxEf,QAAQ,GAAGnB,mBAAmB,CAAC;cAC7BQ,MAAM;cACNC,aAAa;cACbE,MAAM;cACNW,UAAU;aACX,CAAC;YAEF,sBAAOH,QAAQ,EAAE;QAAC;;;GACnB;EAED,OAAO;IACL,eAAQ,EAAE,CAACe,KAAK,CAAC,UAAOC,GAAG;MAAA;;UACzB,IAAIjB,QAAQ,EAAE;YACZa,OAAO,CAACC,OAAO,CAACzB,KAAK,CAAC6B,UAAU,CAAClB,QAAQ,CAAC,CAAC,CAACgB,KAAK,CAAC,aAAO,CAAC,CAAC;;UAG7D,MAAMC,GAAG;;;KACV,CAAC;EANF,CAME;AACN;AAsCA,SAASL,gBAAgB;EACvB,MAAM,IAAI/B,aAAa,CAAC,uDAAuD,CAAC;AAClF","names":["GetIdCommand","ProviderError","fromCognitoIdentity","localStorage","resolveLogins","fromCognitoIdentityPool","_a","accountId","_b","cache","client","customRoleArn","identityPoolId","logins","_c","userIdentifier","Object","keys","length","undefined","cacheKey","provider","getItem","_h","identityId","_d","send","AccountId","IdentityPoolId","_f","_g","IdentityId","throwOnMissingId","Promise","resolve","setItem","catch","err","removeItem"],"sources":["/frontend-react-js/node_modules/@aws-sdk/credential-provider-cognito-identity/src/fromCognitoIdentityPool.ts"],"sourcesContent":["import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nimport { Storage } from \"./Storage\";\n\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool({\n  accountId,\n  cache = localStorage(),\n  client,\n  customRoleArn,\n  identityPoolId,\n  logins,\n  userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined,\n}: FromCognitoIdentityPoolParameters): CredentialProvider {\n  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n\n  let provider: CredentialProvider = async () => {\n    let identityId = cacheKey && (await cache.getItem(cacheKey));\n    if (!identityId) {\n      const { IdentityId = throwOnMissingId() } = await client.send(\n        new GetIdCommand({\n          AccountId: accountId,\n          IdentityPoolId: identityPoolId,\n          Logins: logins ? await resolveLogins(logins) : undefined,\n        })\n      );\n      identityId = IdentityId;\n      if (cacheKey) {\n        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});\n      }\n    }\n\n    provider = fromCognitoIdentity({\n      client,\n      customRoleArn,\n      logins,\n      identityId,\n    });\n\n    return provider();\n  };\n\n  return () =>\n    provider().catch(async (err) => {\n      if (cacheKey) {\n        Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});\n      }\n\n      throw err;\n    });\n}\n\nexport interface FromCognitoIdentityPoolParameters extends CognitoProviderParameters {\n  /**\n   * A standard AWS account ID (9+ digits).\n   */\n  accountId?: string;\n\n  /**\n   * A cache in which to store resolved Cognito IdentityIds. If not supplied,\n   * the credential provider will attempt to store IdentityIds in one of the\n   * following (in order of preference):\n   *   1. IndexedDB\n   *   2. LocalStorage\n   *   3. An in-memory cache object that will not persist between pages.\n   *\n   * IndexedDB is preferred to maximize data sharing between top-level\n   * browsing contexts and web workers.\n   *\n   * The provider will not cache IdentityIds of authenticated users unless a\n   * separate `userIdentitifer` parameter is supplied.\n   */\n  cache?: Storage;\n\n  /**\n   * The unique identifier for the identity pool from which an identity should\n   * be retrieved or generated.\n   */\n  identityPoolId: string;\n\n  /**\n   * A unique identifier for the user. This is distinct from a Cognito\n   * IdentityId and should instead be an identifier meaningful to your\n   * application. Used to cache Cognito IdentityIds on a per-user basis.\n   */\n  userIdentifier?: string;\n}\n\nfunction throwOnMissingId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}