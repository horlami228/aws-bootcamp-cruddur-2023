{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nimport { ListPartsCommand } from \"../commands/ListPartsCommand\";\n/**\n * @private\n */\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, client.send.apply(client, __spread([new ListPartsCommand(input)], args))];\n        case 1:\n          // @ts-ignore\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\nvar makePagedRequest = function (client, input) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, client.listParts.apply(client, __spread([input], args))];\n        case 1:\n          // @ts-ignore\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n};\nexport function paginateListParts(config, input) {\n  var additionalArguments = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n  return __asyncGenerator(this, arguments, function paginateListParts_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n        case 1:\n          if (!hasNext) return [3 /*break*/, 9];\n          input.PartNumberMarker = token;\n          input[\"MaxParts\"] = config.pageSize;\n          if (!(config.client instanceof S3)) return [3 /*break*/, 3];\n          return [4 /*yield*/, __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n        case 2:\n          page = _a.sent();\n          return [3 /*break*/, 6];\n        case 3:\n          if (!(config.client instanceof S3Client)) return [3 /*break*/, 5];\n          return [4 /*yield*/, __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n        case 4:\n          page = _a.sent();\n          return [3 /*break*/, 6];\n        case 5:\n          throw new Error(\"Invalid client, expected S3 | S3Client\");\n        case 6:\n          return [4 /*yield*/, __await(page)];\n        case 7:\n          return [4 /*yield*/, _a.sent()];\n        case 8:\n          _a.sent();\n          token = page.NextPartNumberMarker;\n          hasNext = !!token;\n          return [3 /*break*/, 1];\n        case 9:\n          return [4 /*yield*/, __await(undefined)];\n        case 10:\n          // @ts-ignore\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,EAAE,QAAQ,OAAO;AAC1B,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,gBAAgB,QAAuD,8BAA8B;AAI9G;;;AAGA,IAAMC,sBAAsB,GAAG,UAC7BC,MAAgB,EAChBC,KAA4B;EAC5B;OAAA,UAAY,EAAZC,qBAAY,EAAZA,IAAY;IAAZC;;;;;;UAGO,qBAAMH,MAAM,CAACI,IAAI,OAAXJ,MAAM,YAAM,IAAIF,gBAAgB,CAACG,KAAK,CAAC,GAAKE,IAAI;;UAD7D;UACA,sBAAOE,SAAuD;MAAC;;;CAChE;AACD;;;AAGA,IAAMC,gBAAgB,GAAG,UACvBN,MAAU,EACVC,KAA4B;EAC5B;OAAA,UAAY,EAAZC,qBAAY,EAAZA,IAAY;IAAZC;;;;;;UAGO,qBAAMH,MAAM,CAACO,SAAS,OAAhBP,MAAM,YAAWC,KAAK,GAAKE,IAAI;;UAD5C;UACA,sBAAOE,SAAsC;MAAC;;;CAC/C;AACD,OAAM,SAAiBG,iBAAiB,CACtCC,MAAiC,EACjCR,KAA4B;EAC5B;OAAA,UAA2B,EAA3BC,qBAA2B,EAA3BA,IAA2B;IAA3BQ;;;;;;;UAGIC,KAAK,GAA8CF,MAAM,CAACG,aAAa,IAAIC,SAAS;UACpFC,OAAO,GAAG,IAAI;;;eAEXA,OAAO;UACZb,KAAK,CAACc,gBAAgB,GAAGJ,KAAK;UAC9BV,KAAK,CAAC,UAAU,CAAC,GAAGQ,MAAM,CAACO,QAAQ;gBAC/BP,MAAM,CAACT,MAAM,YAAYJ,EAAE,GAA3B;UACK,6BAAMU,gBAAgB,yBAACG,MAAM,CAACT,MAAM,EAAEC,KAAK,GAAKS,mBAAmB;;UAA1EO,IAAI,GAAGZ,SAAoE;;;gBAClEI,MAAM,CAACT,MAAM,YAAYH,QAAQ,GAAjC;UACF,6BAAME,sBAAsB,yBAACU,MAAM,CAACT,MAAM,EAAEC,KAAK,GAAKS,mBAAmB;;UAAhFO,IAAI,GAAGZ,SAA0E;;;UAEjF,MAAM,IAAIa,KAAK,CAAC,wCAAwC,CAAC;;uCAErDD,IAAI;;UAAV;;UAAAZ,SAAU;UACVM,KAAK,GAAGM,IAAI,CAACE,oBAAoB;UACjCL,OAAO,GAAG,CAAC,CAACH,KAAK;;;uCAGZE,SAAS;;UADhB;UACA;MAAiB","names":["S3","S3Client","ListPartsCommand","makePagedClientRequest","client","input","_i","args","send","_a","makePagedRequest","listParts","paginateListParts","config","additionalArguments","token","startingToken","undefined","hasNext","PartNumberMarker","pageSize","page","Error","NextPartNumberMarker"],"sources":["/frontend-react-js/node_modules/@aws-sdk/client-s3/pagination/ListPartsPaginator.ts"],"sourcesContent":["import { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nimport { ListPartsCommand, ListPartsCommandInput, ListPartsCommandOutput } from \"../commands/ListPartsCommand\";\nimport { S3PaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: S3Client,\n  input: ListPartsCommandInput,\n  ...args: any\n): Promise<ListPartsCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new ListPartsCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: S3,\n  input: ListPartsCommandInput,\n  ...args: any\n): Promise<ListPartsCommandOutput> => {\n  // @ts-ignore\n  return await client.listParts(input, ...args);\n};\nexport async function* paginateListParts(\n  config: S3PaginationConfiguration,\n  input: ListPartsCommandInput,\n  ...additionalArguments: any\n): Paginator<ListPartsCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.PartNumberMarker\n  let token: typeof input.PartNumberMarker | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: ListPartsCommandOutput;\n  while (hasNext) {\n    input.PartNumberMarker = token;\n    input[\"MaxParts\"] = config.pageSize;\n    if (config.client instanceof S3) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof S3Client) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected S3 | S3Client\");\n    }\n    yield page;\n    token = page.NextPartNumberMarker;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}