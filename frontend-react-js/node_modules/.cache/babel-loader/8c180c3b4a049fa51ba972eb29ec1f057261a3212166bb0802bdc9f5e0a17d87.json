{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nexport var bucketEndpointMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, clientRegion, _e, _f, hostname, bucketEndpoint;\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              bucketName = args.input.Bucket;\n              replaceBucketInPath = options.bucketEndpoint;\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3 /*break*/, 8];\n              if (!options.bucketEndpoint) return [3 /*break*/, 1];\n              request.hostname = bucketName;\n              return [3 /*break*/, 7];\n            case 1:\n              if (!validateArn(bucketName)) return [3 /*break*/, 5];\n              bucketArn = parseArn(bucketName);\n              _a = getPseudoRegion;\n              return [4 /*yield*/, options.region()];\n            case 2:\n              clientRegion = _a.apply(void 0, [_g.sent()]);\n              return [4 /*yield*/, options.regionInfoProvider(clientRegion)];\n            case 3:\n              _b = _g.sent() || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;\n              return [4 /*yield*/, options.useArnRegion()];\n            case 4:\n              useArnRegion = _g.sent();\n              _d = bucketHostname({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion: useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService;\n              // If the request needs to use a region or service name inferred from ARN that different from client region, we\n              // need to set them in the handler context so the signer will use them\n              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n              }\n              if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n              }\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              return [3 /*break*/, 7];\n            case 5:\n              _e = getPseudoRegion;\n              return [4 /*yield*/, options.region()];\n            case 6:\n              clientRegion = _e.apply(void 0, [_g.sent()]);\n              _f = bucketHostname({\n                bucketName: bucketName,\n                clientRegion: clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _f.hostname, bucketEndpoint = _f.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              _g.label = 7;\n            case 7:\n              if (replaceBucketInPath) {\n                request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n                if (request.path === \"\") {\n                  request.path = \"/\";\n                }\n              }\n              _g.label = 8;\n            case 8:\n              return [2 /*return*/, next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true\n};\nexport var getBucketEndpointPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","parse","parseArn","validate","validateArn","bucketHostname","getPseudoRegion","bucketEndpointMiddleware","options","next","context","args","bucketName","input","replaceBucketInPath","bucketEndpoint","request","isInstance","hostname","bucketArn","_a","region","clientRegion","_g","regionInfoProvider","_b","partition","_c","signingRegion","useArnRegion","_d","baseHostname","accelerateEndpoint","useAccelerateEndpoint","dualstackEndpoint","useDualstackEndpoint","pathStyleEndpoint","forcePathStyle","tlsCompatible","protocol","clientPartition","clientSigningRegion","isCustomEndpoint","modifiedSigningRegion","signingService","_e","_f","path","replace","bucketEndpointMiddlewareOptions","tags","name","relation","toMiddleware","override","getBucketEndpointPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/frontend-react-js/node_modules/@aws-sdk/middleware-bucket-endpoint/src/bucketEndpointMiddleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\n\nexport const bucketEndpointMiddleware = (options: BucketEndpointResolvedConfig): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>,\n  context: HandlerExecutionContext\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { Bucket: bucketName } = args.input as { Bucket: string };\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if (validateArn(bucketName)) {\n      const bucketArn = parseArn(bucketName);\n      const clientRegion = getPseudoRegion(await options.region());\n      const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion)) || {};\n      const useArnRegion = await options.useArnRegion();\n      const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n        clientRegion: clientRegion,\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      // If the request needs to use a region or service name inferred from ARN that different from client region, we\n      // need to set them in the handler context so the signer will use them\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const clientRegion = getPseudoRegion(await options.region());\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        clientRegion,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n\n  return next({ ...args, request });\n};\n\nexport const bucketEndpointMiddlewareOptions: RelativeMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true,\n};\n\nexport const getBucketEndpointPlugin = (options: BucketEndpointResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}