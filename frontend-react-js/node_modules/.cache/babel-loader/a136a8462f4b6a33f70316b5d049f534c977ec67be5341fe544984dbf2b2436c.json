{"ast":null,"code":"import { buildQueryString } from \"@aws-sdk/querystring-builder\";\nexport function formatUrl(request) {\n  var port = request.port,\n    query = request.query;\n  var protocol = request.protocol,\n    path = request.path,\n    hostname = request.hostname;\n  if (protocol && protocol.substr(-1) !== \":\") {\n    protocol += \":\";\n  }\n  if (port) {\n    hostname += \":\" + port;\n  }\n  if (path && path.charAt(0) !== \"/\") {\n    path = \"/\" + path;\n  }\n  var queryString = query ? buildQueryString(query) : \"\";\n  if (queryString && queryString[0] !== \"?\") {\n    queryString = \"?\" + queryString;\n  }\n  return protocol + \"//\" + hostname + path + queryString;\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAgB,QAAQ,8BAA8B;AAG/D,OAAM,SAAUC,SAAS,CAACC,OAAgD;EAChE,QAAI,GAAYA,OAAO,KAAnB;IAAEC,KAAK,GAAKD,OAAO,MAAZ;EACb,YAAQ,GAAqBA,OAAO,SAA5B;IAAEE,IAAI,GAAeF,OAAO,KAAtB;IAAEG,QAAQ,GAAKH,OAAO,SAAZ;EAC9B,IAAII,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC3CD,QAAQ,IAAI,GAAG;;EAEjB,IAAIE,IAAI,EAAE;IACRH,QAAQ,IAAI,MAAIG,IAAM;;EAExB,IAAIJ,IAAI,IAAIA,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAClCL,IAAI,GAAG,MAAIA,IAAM;;EAEnB,IAAIM,WAAW,GAAGP,KAAK,GAAGH,gBAAgB,CAACG,KAAK,CAAC,GAAG,EAAE;EACtD,IAAIO,WAAW,IAAIA,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACzCA,WAAW,GAAG,MAAIA,WAAa;;EAEjC,OAAUJ,QAAQ,UAAKD,QAAQ,GAAGD,IAAI,GAAGM,WAAa;AACxD","names":["buildQueryString","formatUrl","request","query","path","hostname","protocol","substr","port","charAt","queryString"],"sources":["/frontend-react-js/node_modules/@aws-sdk/util-format-url/src/index.ts"],"sourcesContent":["import { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HttpRequest } from \"@aws-sdk/types\";\n\nexport function formatUrl(request: Omit<HttpRequest, \"headers\" | \"method\">): string {\n  const { port, query } = request;\n  let { protocol, path, hostname } = request;\n  if (protocol && protocol.substr(-1) !== \":\") {\n    protocol += \":\";\n  }\n  if (port) {\n    hostname += `:${port}`;\n  }\n  if (path && path.charAt(0) !== \"/\") {\n    path = `/${path}`;\n  }\n  let queryString = query ? buildQueryString(query) : \"\";\n  if (queryString && queryString[0] !== \"?\") {\n    queryString = `?${queryString}`;\n  }\n  return `${protocol}//${hostname}${path}${queryString}`;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}