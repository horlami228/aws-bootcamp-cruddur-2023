{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n(function (AWSS3UploadTaskState) {\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\nexport var TaskEvents;\n(function (TaskEvents) {\n  TaskEvents[\"CANCEL\"] = \"cancel\";\n  TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n  TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n  TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {}));\n// maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\nvar MAX_PARTS = 10000;\n// 5MB in bytes\nvar PART_SIZE = 5 * 1024 * 1024;\nvar DEFAULT_QUEUE_SIZE = 4;\nfunction comparePartNumber(a, b) {\n  return a.PartNumber - b.PartNumber;\n}\nvar AWSS3UploadTask = /** @class */function () {\n  function AWSS3UploadTask(_a) {\n    var s3Client = _a.s3Client,\n      file = _a.file,\n      emitter = _a.emitter,\n      storage = _a.storage,\n      params = _a.params,\n      level = _a.level,\n      prefixPromise = _a.prefixPromise;\n    this.partSize = PART_SIZE;\n    this.queueSize = DEFAULT_QUEUE_SIZE;\n    this.inProgress = [];\n    this.completedParts = [];\n    this.queued = [];\n    this.bytesUploaded = 0;\n    this.totalBytes = 0;\n    this.state = AWSS3UploadTaskState.INIT;\n    this.prefixPromise = prefixPromise;\n    this.s3client = s3Client;\n    this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n    this.storage = storage;\n    this.storageSync = Promise.resolve();\n    if (typeof this.storage['sync'] === 'function') {\n      this.storageSync = this.storage['sync']();\n    }\n    this.params = params;\n    this.file = file;\n    this.totalBytes = this.file.size;\n    this.bytesUploaded = 0;\n    this.emitter = emitter;\n    this.queued = [];\n    this.fileId = this._getFileId(level);\n    this._validateParams();\n    // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n    // function to it unless user adds their own onError callback\n    this.emitter.on(TaskEvents.ERROR, function () {});\n  }\n  Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n    get: function () {\n      return this.bytesUploaded / this.totalBytes * 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n    get: function () {\n      return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n    var key = _a.key,\n      bucket = _a.bucket;\n    return __awaiter(this, void 0, void 0, function () {\n      var listObjectRes, _b, Contents, prefix, obj;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new ListObjectsV2Command({\n              Bucket: bucket,\n              Prefix: key\n            }))];\n          case 1:\n            listObjectRes = _c.sent();\n            _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n            return [4 /*yield*/, this.prefixPromise];\n          case 2:\n            prefix = _c.sent();\n            obj = Contents.find(function (o) {\n              return o.Key === \"\" + prefix + key;\n            });\n            return [2 /*return*/, obj];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._getFileId = function (level) {\n    // We should check if it's a File first because File is also instance of a Blob\n    if (isFile(this.file)) {\n      return [this.file.name, this.file.lastModified, this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    } else {\n      return [this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    }\n  };\n  AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests, cachedUploadFileData, listPartsOutput;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            if (Object.keys(uploadRequests).length === 0 || !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n              return [2 /*return*/, {\n                parts: [],\n                uploadId: null\n              }];\n            }\n            cachedUploadFileData = uploadRequests[this.fileId];\n            cachedUploadFileData.lastTouched = Date.now();\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: cachedUploadFileData.uploadId\n            }))];\n          case 2:\n            listPartsOutput = _a.sent();\n            return [2 /*return*/, {\n              parts: listPartsOutput.Parts || [],\n              uploadId: cachedUploadFileData.uploadId\n            }];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n    this.emitter.emit(event, payload);\n  };\n  AWSS3UploadTask.prototype._validateParams = function () {\n    if (this.file.size / this.partSize > MAX_PARTS) {\n      throw new Error(\"Too many parts. Number of parts is \" + this.file.size / this.partSize + \", maximum is \" + MAX_PARTS + \".\");\n    }\n  };\n  AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tasks;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storageSync];\n          case 1:\n            _a.sent();\n            tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n            return [2 /*return*/, JSON.parse(tasks)];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            uploadRequests[this.fileId] = fileMetadata;\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isCached = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = Object.prototype.hasOwnProperty).call;\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            return [2 /*return*/, _b.apply(_a, [_c.sent(), this.fileId])];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._removeFromCache = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            delete uploadRequests[this.fileId];\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n    var eTag = _a.eTag,\n      partNumber = _a.partNumber,\n      chunk = _a.chunk;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        this.completedParts.push({\n          ETag: eTag,\n          PartNumber: partNumber\n        });\n        this.bytesUploaded += byteLength(chunk);\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n          loaded: this.bytesUploaded,\n          total: this.totalBytes\n        });\n        // Remove the completed item from the inProgress array\n        this.inProgress = this.inProgress.filter(function (job) {\n          return job.uploadPartInput.PartNumber !== partNumber;\n        });\n        if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED) this._startNextPart();\n        if (this._isDone()) this._completeUpload();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._completeUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.s3client.send(new CompleteMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId,\n              MultipartUpload: {\n                // Parts are not always completed in order, we need to manually sort them\n                Parts: this.completedParts.sort(comparePartNumber)\n              }\n            }))];\n          case 1:\n            _a.sent();\n            this._verifyFileSize();\n            this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n              key: this.params.Bucket + \"/\" + this.params.Key\n            });\n            this._removeFromCache();\n            this.state = AWSS3UploadTaskState.COMPLETED;\n            return [3 /*break*/, 3];\n          case 2:\n            err_1 = _a.sent();\n            logger.error('error completing upload', err_1);\n            this._emitEvent(TaskEvents.ERROR, err_1);\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(new UploadPartCommand(input), {\n              cancelTokenSource: cancelTokenSource\n            })];\n          case 1:\n            res = _a.sent();\n            return [4 /*yield*/, this._onPartUploadCompletion({\n              eTag: res.ETag,\n              partNumber: input.PartNumber,\n              chunk: input.Body\n            })];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            err_2 = _a.sent();\n            if (this.state === AWSS3UploadTaskState.PAUSED) {\n              logger.log('upload paused');\n            } else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n              logger.log('upload aborted');\n            } else {\n              logger.error('error starting next part of upload: ', err_2);\n            }\n            // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n            // expected behavior\n            if (!axios.isCancel(err_2) && err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n              this._emitEvent(TaskEvents.ERROR, err_2);\n              this.pause();\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._startNextPart = function () {\n    if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n      var cancelTokenSource = axios.CancelToken.source();\n      var nextPart = this.queued.shift();\n      this.inProgress.push({\n        uploadPartInput: nextPart,\n        s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n        cancel: cancelTokenSource.cancel\n      });\n    }\n  };\n  /**\n   * Verify on S3 side that the file size matches the one on the client side.\n   *\n   * @async\n   * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n   */\n  AWSS3UploadTask.prototype._verifyFileSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var obj, valid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listSingleFile({\n              key: this.params.Key,\n              bucket: this.params.Bucket\n            })];\n          case 1:\n            obj = _a.sent();\n            valid = Boolean(obj && obj.Size === this.file.size);\n            if (!valid) {\n              throw new Error('File size does not match between local file and file on s3');\n            }\n            return [2 /*return*/, valid];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._isDone = function () {\n    return !this.queued.length && !this.inProgress.length && this.bytesUploaded === this.totalBytes;\n  };\n  AWSS3UploadTask.prototype._createParts = function () {\n    var size = this.file.size;\n    var parts = [];\n    for (var bodyStart = 0; bodyStart < size;) {\n      var bodyEnd = Math.min(bodyStart + this.partSize, size);\n      parts.push({\n        Body: this.file.slice(bodyStart, bodyEnd),\n        Key: this.params.Key,\n        Bucket: this.params.Bucket,\n        PartNumber: parts.length + 1,\n        UploadId: this.uploadId\n      });\n      bodyStart += this.partSize;\n    }\n    return parts;\n  };\n  AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n    this.bytesUploaded += cachedParts.reduce(function (acc, part) {\n      return acc + part.Size;\n    }, 0);\n    // Find the set of part numbers that have already been uploaded\n    var uploadedPartNumSet = new Set(cachedParts.map(function (part) {\n      return part.PartNumber;\n    }));\n    this.queued = this.queued.filter(function (part) {\n      return !uploadedPartNumSet.has(part.PartNumber);\n    });\n    this.completedParts = cachedParts.map(function (part) {\n      return {\n        PartNumber: part.PartNumber,\n        ETag: part.ETag\n      };\n    });\n    this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytes\n    });\n  };\n  AWSS3UploadTask.prototype._initMultipartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n          case 1:\n            res = _a.sent();\n            this._cache({\n              uploadId: res.UploadId,\n              lastTouched: Date.now(),\n              bucket: this.params.Bucket,\n              key: this.params.Key,\n              fileName: this.file instanceof File ? this.file.name : ''\n            });\n            return [2 /*return*/, res.UploadId];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._initializeUploadTask = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parts, uploadId, uploadId, err_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.state = AWSS3UploadTaskState.IN_PROGRESS;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 7,, 8]);\n            return [4 /*yield*/, this._isCached()];\n          case 2:\n            if (!_b.sent()) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._findCachedUploadParts()];\n          case 3:\n            _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._initCachedUploadParts(parts);\n            this._startUpload();\n            return [3 /*break*/, 6];\n          case 4:\n            if (!!this.uploadId) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._initMultipartUpload()];\n          case 5:\n            uploadId = _b.sent();\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._startUpload();\n            _b.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            err_3 = _b.sent();\n            if (!axios.isCancel(err_3)) {\n              logger.error('Error initializing the upload task', err_3);\n            }\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype.resume = function () {\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n      logger.warn('Upload task already in progress');\n      // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n      // starting the upload\n    } else if (!this.uploadId) {\n      this._initializeUploadTask();\n    } else {\n      this._startUpload();\n    }\n  };\n  AWSS3UploadTask.prototype._startUpload = function () {\n    this.state = AWSS3UploadTaskState.IN_PROGRESS;\n    for (var i = 0; i < this.queueSize; i++) {\n      this._startNextPart();\n    }\n  };\n  AWSS3UploadTask.prototype._cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3 /*break*/, 1];\n            logger.warn('This task has already been cancelled');\n            return [2 /*return*/, false];\n          case 1:\n            if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3 /*break*/, 2];\n            logger.warn('This task has already been completed');\n            return [2 /*return*/, false];\n          case 2:\n            this.pause();\n            this.queued = [];\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.state = AWSS3UploadTaskState.CANCELLED;\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId\n            }))];\n          case 4:\n            _a.sent();\n            return [4 /*yield*/, this._removeFromCache()];\n          case 5:\n            _a.sent();\n            return [2 /*return*/, true];\n          case 6:\n            err_4 = _a.sent();\n            logger.error('Error cancelling upload task', err_4);\n            return [2 /*return*/, false];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * pause this particular upload task\n   **/\n  AWSS3UploadTask.prototype.pause = function () {\n    var _a;\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.PAUSED) {\n      logger.warn('This task is already paused');\n    }\n    this.state = AWSS3UploadTaskState.PAUSED;\n    // Use axios cancel token to abort the part request immediately\n    // Add the inProgress parts back to pending\n    var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n    removedInProgressReq.forEach(function (req) {\n      req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n    });\n    // Put all removed in progress parts back into the queue\n    (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) {\n      return req.uploadPartInput;\n    })));\n  };\n  return AWSS3UploadTask;\n}();\nexport { AWSS3UploadTask };","map":{"version":3,"mappings":"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","names":["UploadPartCommand","CompleteMultipartUploadCommand","AbortMultipartUploadCommand","ListPartsCommand","CreateMultipartUploadCommand","ListObjectsV2Command","axios","Logger","byteLength","isFile","AWSS3ProviderUploadErrorStrings","SET_CONTENT_LENGTH_HEADER","UPLOADS_STORAGE_KEY","logger","AWSS3UploadTaskState","TaskEvents","MAX_PARTS","PART_SIZE","DEFAULT_QUEUE_SIZE","comparePartNumber","a","b","PartNumber","_a","s3Client","file","emitter","storage","params","level","prefixPromise","INIT","s3client","middlewareStack","remove","storageSync","Promise","resolve","totalBytes","size","bytesUploaded","queued","fileId","_getFileId","_validateParams","on","ERROR","Object","AWSS3UploadTask","state","IN_PROGRESS","key","bucket","send","Bucket","Prefix","listObjectRes","_c","_b","Contents","prefix","obj","find","Key","name","lastModified","type","join","_listCachedUploadTasks","uploadRequests","keys","length","prototype","hasOwnProperty","call","parts","uploadId","cachedUploadFileData","lastTouched","Date","now","setItem","JSON","stringify","UploadId","listPartsOutput","Parts","event","payload","emit","partSize","Error","tasks","getItem","parse","fileMetadata","eTag","partNumber","chunk","completedParts","push","ETag","_emitEvent","UPLOAD_PROGRESS","loaded","total","inProgress","filter","uploadPartInput","PAUSED","_startNextPart","_isDone","_completeUpload","MultipartUpload","sort","_verifyFileSize","UPLOAD_COMPLETE","_removeFromCache","COMPLETED","error","err_1","input","cancelTokenSource","res","_onPartUploadCompletion","Body","log","CANCELLED","err_2","isCancel","message","UPLOAD_PAUSED_MESSAGE","pause","CancelToken","source","nextPart","shift","s3Request","_makeUploadPartRequest","cancel","_listSingleFile","valid","Boolean","Size","bodyStart","bodyEnd","Math","min","slice","cachedParts","reduce","acc","part","uploadedPartNumSet","Set","map","has","_cache","fileName","File","_isCached","_findCachedUploadParts","_createParts","_initCachedUploadParts","_startUpload","_initMultipartUpload","err_3","warn","_initializeUploadTask","i","queueSize","err_4","removedInProgressReq","splice","forEach","req","unshift"],"sources":["/frontend-react-js/node_modules/@aws-amplify/storage/src/providers/AWSS3UploadTask.ts"],"sourcesContent":["import {\n\tUploadPartCommandInput,\n\tCompletedPart,\n\tS3Client,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tPart,\n\tAbortMultipartUploadCommand,\n\tListPartsCommand,\n\tCreateMultipartUploadCommand,\n\tPutObjectCommandInput,\n\tListObjectsV2Command,\n} from '@aws-sdk/client-s3';\nimport * as events from 'events';\nimport axios, { Canceler, CancelTokenSource } from 'axios';\nimport { HttpHandlerOptions } from '@aws-sdk/types';\nimport { Logger } from '@aws-amplify/core';\nimport { UploadTask } from '../types/Provider';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport {\n\tSET_CONTENT_LENGTH_HEADER,\n\tUPLOADS_STORAGE_KEY,\n} from '../common/StorageConstants';\nimport { StorageAccessLevel } from '..';\n\nconst logger = new Logger('AWSS3UploadTask');\nexport enum AWSS3UploadTaskState {\n\tINIT,\n\tIN_PROGRESS,\n\tPAUSED,\n\tCANCELLED,\n\tCOMPLETED,\n}\n\nexport enum TaskEvents {\n\tCANCEL = 'cancel',\n\tUPLOAD_COMPLETE = 'uploadComplete',\n\tUPLOAD_PROGRESS = 'uploadPartProgress',\n\tERROR = 'error',\n}\n\nexport interface AWSS3UploadTaskParams {\n\ts3Client: S3Client;\n\tfile: Blob;\n\tstorage: Storage;\n\tlevel: StorageAccessLevel;\n\tparams: PutObjectCommandInput;\n\tprefixPromise: Promise<string>;\n\temitter?: events.EventEmitter;\n}\n\nexport interface InProgressRequest {\n\tuploadPartInput: UploadPartCommandInput;\n\ts3Request: Promise<any>;\n\tcancel: Canceler;\n}\n\nexport interface UploadTaskCompleteEvent {\n\tkey: string;\n}\n\nexport interface UploadTaskProgressEvent {\n\t/**\n\t * bytes that has been sent to S3 so far\n\t */\n\tloaded: number;\n\t/**\n\t * total bytes that needs to be sent to S3\n\t */\n\ttotal: number;\n}\n\nexport interface FileMetadata {\n\tbucket: string;\n\tfileName: string;\n\tkey: string;\n\t// Unix timestamp in ms\n\tlastTouched: number;\n\tuploadId: string;\n}\n\n// maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\nconst MAX_PARTS = 10000;\n// 5MB in bytes\nconst PART_SIZE = 5 * 1024 * 1024;\nconst DEFAULT_QUEUE_SIZE = 4;\n\nfunction comparePartNumber(a: CompletedPart, b: CompletedPart) {\n\treturn a.PartNumber - b.PartNumber;\n}\n\nexport class AWSS3UploadTask implements UploadTask {\n\tprivate readonly emitter: events.EventEmitter;\n\tprivate readonly file: Blob;\n\tprivate readonly partSize: number = PART_SIZE;\n\tprivate readonly queueSize = DEFAULT_QUEUE_SIZE;\n\tprivate readonly s3client: S3Client;\n\tprivate readonly storage: Storage;\n\tprivate readonly storageSync: Promise<any>;\n\tprivate readonly fileId: string;\n\tprivate readonly params: PutObjectCommandInput;\n\tprivate readonly prefixPromise: Promise<string>;\n\tprivate inProgress: InProgressRequest[] = [];\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate queued: UploadPartCommandInput[] = [];\n\tprivate bytesUploaded: number = 0;\n\tprivate totalBytes: number = 0;\n\tprivate uploadId: string;\n\n\tpublic state: AWSS3UploadTaskState = AWSS3UploadTaskState.INIT;\n\n\tconstructor({\n\t\ts3Client,\n\t\tfile,\n\t\temitter,\n\t\tstorage,\n\t\tparams,\n\t\tlevel,\n\t\tprefixPromise,\n\t}: AWSS3UploadTaskParams) {\n\t\tthis.prefixPromise = prefixPromise;\n\t\tthis.s3client = s3Client;\n\t\tthis.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\t\tthis.storage = storage;\n\t\tthis.storageSync = Promise.resolve();\n\t\tif (typeof this.storage['sync'] === 'function') {\n\t\t\tthis.storageSync = this.storage['sync']();\n\t\t}\n\t\tthis.params = params;\n\t\tthis.file = file;\n\t\tthis.totalBytes = this.file.size;\n\t\tthis.bytesUploaded = 0;\n\t\tthis.emitter = emitter;\n\t\tthis.queued = [];\n\t\tthis.fileId = this._getFileId(level);\n\t\tthis._validateParams();\n\t\t// event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n\t\t// function to it unless user adds their own onError callback\n\t\tthis.emitter.on(TaskEvents.ERROR, () => {});\n\t}\n\n\tget percent() {\n\t\treturn (this.bytesUploaded / this.totalBytes) * 100;\n\t}\n\n\tget isInProgress() {\n\t\treturn this.state === AWSS3UploadTaskState.IN_PROGRESS;\n\t}\n\n\tprivate async _listSingleFile({\n\t\tkey,\n\t\tbucket,\n\t}: {\n\t\tkey: string;\n\t\tbucket: string;\n\t}) {\n\t\tconst listObjectRes = await this.s3client.send(\n\t\t\tnew ListObjectsV2Command({\n\t\t\t\tBucket: bucket,\n\t\t\t\tPrefix: key,\n\t\t\t})\n\t\t);\n\t\tconst { Contents = [] } = listObjectRes;\n\t\tconst prefix = await this.prefixPromise;\n\t\tconst obj = Contents.find(o => o.Key === `${prefix}${key}`);\n\t\treturn obj;\n\t}\n\n\tprivate _getFileId(level: StorageAccessLevel): string {\n\t\t// We should check if it's a File first because File is also instance of a Blob\n\t\tif (isFile(this.file)) {\n\t\t\treturn [\n\t\t\t\tthis.file.name,\n\t\t\t\tthis.file.lastModified,\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t} else {\n\t\t\treturn [\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t}\n\t}\n\n\tprivate async _findCachedUploadParts(): Promise<{\n\t\tparts: Part[];\n\t\tuploadId: string;\n\t}> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\n\t\tif (\n\t\t\tObject.keys(uploadRequests).length === 0 ||\n\t\t\t!Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)\n\t\t) {\n\t\t\treturn { parts: [], uploadId: null };\n\t\t}\n\n\t\tconst cachedUploadFileData = uploadRequests[this.fileId];\n\t\tcachedUploadFileData.lastTouched = Date.now();\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\n\t\tconst listPartsOutput = await this.s3client.send(\n\t\t\tnew ListPartsCommand({\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tUploadId: cachedUploadFileData.uploadId,\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\tparts: listPartsOutput.Parts || [],\n\t\t\tuploadId: cachedUploadFileData.uploadId,\n\t\t};\n\t}\n\n\tprivate _emitEvent<T = any>(event: string, payload: T) {\n\t\tthis.emitter.emit(event, payload);\n\t}\n\n\tprivate _validateParams() {\n\t\tif (this.file.size / this.partSize > MAX_PARTS) {\n\t\t\tthrow new Error(\n\t\t\t\t`Too many parts. Number of parts is ${this.file.size /\n\t\t\t\t\tthis.partSize}, maximum is ${MAX_PARTS}.`\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _listCachedUploadTasks(): Promise<\n\t\tRecord<string, FileMetadata>\n\t> {\n\t\tawait this.storageSync;\n\t\tconst tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n\t\treturn JSON.parse(tasks);\n\t}\n\n\tprivate async _cache(fileMetadata: FileMetadata): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tuploadRequests[this.fileId] = fileMetadata;\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _isCached(): Promise<boolean> {\n\t\treturn Object.prototype.hasOwnProperty.call(\n\t\t\tawait this._listCachedUploadTasks(),\n\t\t\tthis.fileId\n\t\t);\n\t}\n\n\tprivate async _removeFromCache(): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tdelete uploadRequests[this.fileId];\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _onPartUploadCompletion({\n\t\teTag,\n\t\tpartNumber,\n\t\tchunk,\n\t}: {\n\t\teTag: string;\n\t\tpartNumber: number;\n\t\tchunk: UploadPartCommandInput['Body'];\n\t}) {\n\t\tthis.completedParts.push({\n\t\t\tETag: eTag,\n\t\t\tPartNumber: partNumber,\n\t\t});\n\t\tthis.bytesUploaded += byteLength(chunk);\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t\t// Remove the completed item from the inProgress array\n\t\tthis.inProgress = this.inProgress.filter(\n\t\t\tjob => job.uploadPartInput.PartNumber !== partNumber\n\t\t);\n\t\tif (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED)\n\t\t\tthis._startNextPart();\n\t\tif (this._isDone()) this._completeUpload();\n\t}\n\n\tprivate async _completeUpload() {\n\t\ttry {\n\t\t\tawait this.s3client.send(\n\t\t\t\tnew CompleteMultipartUploadCommand({\n\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\tMultipartUpload: {\n\t\t\t\t\t\t// Parts are not always completed in order, we need to manually sort them\n\t\t\t\t\t\tParts: this.completedParts.sort(comparePartNumber),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis._verifyFileSize();\n\t\t\tthis._emitEvent<UploadTaskCompleteEvent>(TaskEvents.UPLOAD_COMPLETE, {\n\t\t\t\tkey: `${this.params.Bucket}/${this.params.Key}`,\n\t\t\t});\n\t\t\tthis._removeFromCache();\n\t\t\tthis.state = AWSS3UploadTaskState.COMPLETED;\n\t\t} catch (err) {\n\t\t\tlogger.error('error completing upload', err);\n\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t}\n\t}\n\n\tprivate async _makeUploadPartRequest(\n\t\tinput: UploadPartCommandInput,\n\t\tcancelTokenSource: CancelTokenSource\n\t) {\n\t\ttry {\n\t\t\tconst res = await this.s3client.send(new UploadPartCommand(input), {\n\t\t\t\tcancelTokenSource,\n\t\t\t} as HttpHandlerOptions);\n\t\t\tawait this._onPartUploadCompletion({\n\t\t\t\teTag: res.ETag,\n\t\t\t\tpartNumber: input.PartNumber,\n\t\t\t\tchunk: input.Body,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\t\tlogger.log('upload paused');\n\t\t\t} else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\t\tlogger.log('upload aborted');\n\t\t\t} else {\n\t\t\t\tlogger.error('error starting next part of upload: ', err);\n\t\t\t}\n\t\t\t// axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n\t\t\t// expected behavior\n\t\t\tif (\n\t\t\t\t!axios.isCancel(err) &&\n\t\t\t\terr.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE\n\t\t\t) {\n\t\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t\t\tthis.pause();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _startNextPart() {\n\t\tif (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n\t\t\tconst cancelTokenSource = axios.CancelToken.source();\n\t\t\tconst nextPart = this.queued.shift();\n\t\t\tthis.inProgress.push({\n\t\t\t\tuploadPartInput: nextPart,\n\t\t\t\ts3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n\t\t\t\tcancel: cancelTokenSource.cancel,\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Verify on S3 side that the file size matches the one on the client side.\n\t *\n\t * @async\n\t * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n\t */\n\tprivate async _verifyFileSize() {\n\t\tconst obj = await this._listSingleFile({\n\t\t\tkey: this.params.Key,\n\t\t\tbucket: this.params.Bucket,\n\t\t});\n\t\tconst valid = Boolean(obj && obj.Size === this.file.size);\n\t\tif (!valid) {\n\t\t\tthrow new Error(\n\t\t\t\t'File size does not match between local file and file on s3'\n\t\t\t);\n\t\t}\n\t\treturn valid;\n\t}\n\n\tprivate _isDone() {\n\t\treturn (\n\t\t\t!this.queued.length &&\n\t\t\t!this.inProgress.length &&\n\t\t\tthis.bytesUploaded === this.totalBytes\n\t\t);\n\t}\n\n\tprivate _createParts() {\n\t\tconst size = this.file.size;\n\t\tconst parts: UploadPartCommandInput[] = [];\n\t\tfor (let bodyStart = 0; bodyStart < size; ) {\n\t\t\tconst bodyEnd = Math.min(bodyStart + this.partSize, size);\n\t\t\tparts.push({\n\t\t\t\tBody: this.file.slice(bodyStart, bodyEnd),\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tPartNumber: parts.length + 1,\n\t\t\t\tUploadId: this.uploadId,\n\t\t\t});\n\t\t\tbodyStart += this.partSize;\n\t\t}\n\t\treturn parts;\n\t}\n\n\tprivate _initCachedUploadParts(cachedParts: Part[]) {\n\t\tthis.bytesUploaded += cachedParts.reduce((acc, part) => acc + part.Size, 0);\n\t\t// Find the set of part numbers that have already been uploaded\n\t\tconst uploadedPartNumSet = new Set(\n\t\t\tcachedParts.map(part => part.PartNumber)\n\t\t);\n\t\tthis.queued = this.queued.filter(\n\t\t\tpart => !uploadedPartNumSet.has(part.PartNumber)\n\t\t);\n\t\tthis.completedParts = cachedParts.map(part => ({\n\t\t\tPartNumber: part.PartNumber,\n\t\t\tETag: part.ETag,\n\t\t}));\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t}\n\n\tprivate async _initMultipartUpload() {\n\t\tconst res = await this.s3client.send(\n\t\t\tnew CreateMultipartUploadCommand(this.params)\n\t\t);\n\t\tthis._cache({\n\t\t\tuploadId: res.UploadId,\n\t\t\tlastTouched: Date.now(),\n\t\t\tbucket: this.params.Bucket,\n\t\t\tkey: this.params.Key,\n\t\t\tfileName: this.file instanceof File ? this.file.name : '',\n\t\t});\n\t\treturn res.UploadId;\n\t}\n\n\tprivate async _initializeUploadTask() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\ttry {\n\t\t\tif (await this._isCached()) {\n\t\t\t\tconst { parts, uploadId } = await this._findCachedUploadParts();\n\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\tthis.queued = this._createParts();\n\t\t\t\tthis._initCachedUploadParts(parts);\n\t\t\t\tthis._startUpload();\n\t\t\t} else {\n\t\t\t\tif (!this.uploadId) {\n\t\t\t\t\tconst uploadId = await this._initMultipartUpload();\n\t\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\t\tthis.queued = this._createParts();\n\t\t\t\t\tthis._startUpload();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (!axios.isCancel(err)) {\n\t\t\t\tlogger.error('Error initializing the upload task', err);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resume(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n\t\t\tlogger.warn('Upload task already in progress');\n\t\t\t// first time running resume, find any cached parts on s3 or start a new multipart upload request before\n\t\t\t// starting the upload\n\t\t} else if (!this.uploadId) {\n\t\t\tthis._initializeUploadTask();\n\t\t} else {\n\t\t\tthis._startUpload();\n\t\t}\n\t}\n\n\tprivate _startUpload() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\tfor (let i = 0; i < this.queueSize; i++) {\n\t\t\tthis._startNextPart();\n\t\t}\n\t}\n\n\tasync _cancel(): Promise<boolean> {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t\treturn false;\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t\treturn false;\n\t\t} else {\n\t\t\tthis.pause();\n\t\t\tthis.queued = [];\n\t\t\tthis.completedParts = [];\n\t\t\tthis.bytesUploaded = 0;\n\t\t\tthis.state = AWSS3UploadTaskState.CANCELLED;\n\t\t\ttry {\n\t\t\t\tawait this.s3client.send(\n\t\t\t\t\tnew AbortMultipartUploadCommand({\n\t\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tawait this._removeFromCache();\n\t\t\t\treturn true;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('Error cancelling upload task', err);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * pause this particular upload task\n\t **/\n\tpublic pause(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\tlogger.warn('This task is already paused');\n\t\t}\n\t\tthis.state = AWSS3UploadTaskState.PAUSED;\n\t\t// Use axios cancel token to abort the part request immediately\n\t\t// Add the inProgress parts back to pending\n\t\tconst removedInProgressReq = this.inProgress.splice(\n\t\t\t0,\n\t\t\tthis.inProgress.length\n\t\t);\n\t\tremovedInProgressReq.forEach(req => {\n\t\t\treq.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n\t\t});\n\t\t// Put all removed in progress parts back into the queue\n\t\tthis.queued.unshift(\n\t\t\t...removedInProgressReq.map(req => req.uploadPartInput)\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}