{"ast":null,"code":"import { __read } from \"tslib\";\nimport { ConsoleLogger as LoggerClass } from './Logger';\nvar logger = new LoggerClass('Amplify');\nvar AmplifyClass = /** @class */function () {\n  function AmplifyClass() {\n    // Everything that is `register`ed is tracked here\n    this._components = [];\n    this._config = {};\n    // All modules (with `getModuleName()`) are stored here for dependency injection\n    this._modules = {};\n    // for backward compatibility to avoid breaking change\n    // if someone is using like Amplify.Auth\n    this.Auth = null;\n    this.Analytics = null;\n    this.API = null;\n    this.Credentials = null;\n    this.Storage = null;\n    this.I18n = null;\n    this.Cache = null;\n    this.PubSub = null;\n    this.Interactions = null;\n    this.Pushnotification = null;\n    this.UI = null;\n    this.XR = null;\n    this.Predictions = null;\n    this.DataStore = null;\n    this.Geo = null;\n    this.Notifications = null;\n    this.Logger = LoggerClass;\n    this.ServiceWorker = null;\n  }\n  AmplifyClass.prototype.register = function (comp) {\n    logger.debug('component registered in amplify', comp);\n    this._components.push(comp);\n    if (typeof comp.getModuleName === 'function') {\n      this._modules[comp.getModuleName()] = comp;\n      this[comp.getModuleName()] = comp;\n    } else {\n      logger.debug('no getModuleName method for component', comp);\n    }\n    // Finally configure this new component(category) loaded\n    // With the new modularization changes in Amplify V3, all the Amplify\n    // component are not loaded/registered right away but when they are\n    // imported (and hence instantiated) in the client's app. This ensures\n    // that all new components imported get correctly configured with the\n    // configuration that Amplify.configure() was called with.\n    comp.configure(this._config);\n  };\n  AmplifyClass.prototype.configure = function (config) {\n    var _this = this;\n    if (!config) return this._config;\n    this._config = Object.assign(this._config, config);\n    logger.debug('amplify config', this._config);\n    // Dependency Injection via property-setting.\n    // This avoids introducing a public method/interface/setter that's difficult to remove later.\n    // Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n    Object.entries(this._modules).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        Name = _b[0],\n        comp = _b[1];\n      // e.g. Auth.*\n      Object.keys(comp).forEach(function (property) {\n        // e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n        if (_this._modules[property]) {\n          comp[property] = _this._modules[property];\n        }\n      });\n    });\n    this._components.map(function (comp) {\n      comp.configure(_this._config);\n    });\n    return this._config;\n  };\n  AmplifyClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable['getCategory'] && typeof pluggable['getCategory'] === 'function') {\n      this._components.map(function (comp) {\n        if (comp['addPluggable'] && typeof comp['addPluggable'] === 'function') {\n          comp.addPluggable(pluggable);\n        }\n      });\n    }\n  };\n  return AmplifyClass;\n}();\nexport { AmplifyClass };\nexport var Amplify = new AmplifyClass();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","LoggerClass","logger","AmplifyClass","comp","debug","_components","push","getModuleName","_modules","configure","_config","config","Object","assign","entries","forEach","_a","_b","Name","keys","_this","property","map","pluggable","addPluggable","Amplify"],"sources":["/frontend-react-js/node_modules/@aws-amplify/core/src/Amplify.ts"],"sourcesContent":["import { ConsoleLogger as LoggerClass } from './Logger';\n\nconst logger = new LoggerClass('Amplify');\n\nexport class AmplifyClass {\n\t// Everything that is `register`ed is tracked here\n\tprivate _components = [];\n\tprivate _config = {};\n\n\t// All modules (with `getModuleName()`) are stored here for dependency injection\n\tprivate _modules = {};\n\n\t// for backward compatibility to avoid breaking change\n\t// if someone is using like Amplify.Auth\n\tAuth = null;\n\tAnalytics = null;\n\tAPI = null;\n\tCredentials = null;\n\tStorage = null;\n\tI18n = null;\n\tCache = null;\n\tPubSub = null;\n\tInteractions = null;\n\tPushnotification = null;\n\tUI = null;\n\tXR = null;\n\tPredictions = null;\n\tDataStore = null;\n\tGeo = null;\n\tNotifications = null;\n\n\tLogger = LoggerClass;\n\tServiceWorker = null;\n\n\tregister(comp) {\n\t\tlogger.debug('component registered in amplify', comp);\n\t\tthis._components.push(comp);\n\t\tif (typeof comp.getModuleName === 'function') {\n\t\t\tthis._modules[comp.getModuleName()] = comp;\n\t\t\tthis[comp.getModuleName()] = comp;\n\t\t} else {\n\t\t\tlogger.debug('no getModuleName method for component', comp);\n\t\t}\n\n\t\t// Finally configure this new component(category) loaded\n\t\t// With the new modularization changes in Amplify V3, all the Amplify\n\t\t// component are not loaded/registered right away but when they are\n\t\t// imported (and hence instantiated) in the client's app. This ensures\n\t\t// that all new components imported get correctly configured with the\n\t\t// configuration that Amplify.configure() was called with.\n\t\tcomp.configure(this._config);\n\t}\n\n\tconfigure(config?) {\n\t\tif (!config) return this._config;\n\n\t\tthis._config = Object.assign(this._config, config);\n\t\tlogger.debug('amplify config', this._config);\n\n\t\t// Dependency Injection via property-setting.\n\t\t// This avoids introducing a public method/interface/setter that's difficult to remove later.\n\t\t// Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n\t\tObject.entries(this._modules).forEach(([Name, comp]) => {\n\t\t\t// e.g. Auth.*\n\t\t\tObject.keys(comp).forEach(property => {\n\t\t\t\t// e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n\t\t\t\tif (this._modules[property]) {\n\t\t\t\t\tcomp[property] = this._modules[property];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis._components.map(comp => {\n\t\t\tcomp.configure(this._config);\n\t\t});\n\n\t\treturn this._config;\n\t}\n\n\taddPluggable(pluggable) {\n\t\tif (\n\t\t\tpluggable &&\n\t\t\tpluggable['getCategory'] &&\n\t\t\ttypeof pluggable['getCategory'] === 'function'\n\t\t) {\n\t\t\tthis._components.map(comp => {\n\t\t\t\tif (\n\t\t\t\t\tcomp['addPluggable'] &&\n\t\t\t\t\ttypeof comp['addPluggable'] === 'function'\n\t\t\t\t) {\n\t\t\t\t\tcomp.addPluggable(pluggable);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport const Amplify = new AmplifyClass();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}