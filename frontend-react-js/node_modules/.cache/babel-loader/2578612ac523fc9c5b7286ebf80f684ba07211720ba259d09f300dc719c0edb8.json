{"ast":null,"code":"import { __asyncValues, __awaiter, __generator, __values } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, IDENTIFIER_KEY_SEPARATOR } from '../../util';\nvar logger = new Logger('DataStore');\nvar AsyncStorageAdapter = /** @class */function () {\n  function AsyncStorageAdapter() {}\n  AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  // Retrieves primary key values from a model\n  AsyncStorageAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  // Retrieves concatenated primary key values from a model\n  AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n    return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n  };\n  AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initPromise) return [3 /*break*/, 1];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, this.initPromise];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n          case 3:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _a.label = 4;\n          case 4:\n            _a.trys.push([4, 7,, 8]);\n            if (!!this.db) return [3 /*break*/, 6];\n            this.db = new AsyncStorageDatabase();\n            return [4 /*yield*/, this.db.init()];\n          case 5:\n            _a.sent();\n            this.resolve();\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            error_1 = _a.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, keyValuesPath, fromDB, predicates, _b, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, itemKeyValuesPath, fromDB_1, opType, modelKeyValues, e_1_1;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            return [4 /*yield*/, this.db.get(keyValuesPath, storeName)];\n          case 1:\n            fromDB = _c.sent();\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              _b = predicates, predicateObjs = _b.predicates, type = _b.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 9, 10, 15]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _c.label = 3;\n          case 3:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 4:\n            if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 8];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            itemKeyValues = keys.map(function (key) {\n              return item[key];\n            });\n            itemKeyValuesPath = itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(itemKeyValuesPath, storeName_1)];\n          case 5:\n            fromDB_1 = _c.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.db.save(item, storeName_1, keys, itemKeyValuesPath)];\n          case 6:\n            _c.sent();\n            result.push([instance, opType]);\n            _c.label = 7;\n          case 7:\n            return [3 /*break*/, 3];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _c.trys.push([10,, 13, 14]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 11:\n            _c.sent();\n            _c.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_1) throw e_1.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor;\n      var _this = this;\n      return __generator(this, function (_a) {\n        namespace = this.schema.namespaces[namespaceName];\n        relations = namespace.relationships[srcModelName].relationTypes;\n        connectionStoreNames = relations.map(function (_a) {\n          var modelName = _a.modelName;\n          return getStorename(namespaceName, modelName);\n        });\n        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n        if (connectionStoreNames.length === 0) {\n          return [2 /*return*/, records.map(function (record) {\n            return _this.modelInstanceCreator(modelConstructor, record);\n          })];\n        }\n        return [2 /*return*/, records.map(function (record) {\n          return _this.modelInstanceCreator(modelConstructor, record);\n        })];\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keys, queryByKey, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keys);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!(hasSort || hasPagination)) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 1:\n            records = _a.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n          case 1:\n            record = _a.sent();\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.keyValueFromPredicate = function (predicates, keys) {\n    var e_2, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keys.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return keyValues.length === keys.length ? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR) : undefined;\n  };\n  AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    return inMemoryPagination(records, pagination);\n  };\n  AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.getOne(firstOrLast, storeName)];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, keyValuePath, fromDB, msg, predicates, _a, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 8];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 1:\n            models = _b.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 2:\n            _b.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 3:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 4:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 5:\n            _b.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 6:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 7:\n            return [3 /*break*/, 15];\n          case 8:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 11];\n            keyValuePath = this.getIndexKeyValuesPath(model);\n            return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n          case 9:\n            fromDB = _b.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            _a = predicates, predicateObjs = _a.predicates, type = _a.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n          case 10:\n            _b.sent();\n            return [3 /*break*/, 13];\n          case 11:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n          case 12:\n            _b.sent();\n            _b.label = 13;\n          case 13:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 14:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 15:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n    var e_3, _a, e_4, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, _d, deleteItem, storeName, items, items_1, items_1_1, item, keyValuesPath, e_4_1, e_3_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 17, 18, 23]);\n            _c = __asyncValues(deleteQueue);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, _c.next()];\n          case 2:\n            if (!(_d = _e.sent(), !_d.done)) return [3 /*break*/, 16];\n            deleteItem = _d.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            _e.label = 3;\n          case 3:\n            _e.trys.push([3, 9, 10, 15]);\n            items_1 = __asyncValues(items);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, items_1.next()];\n          case 5:\n            if (!(items_1_1 = _e.sent(), !items_1_1.done)) return [3 /*break*/, 8];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 7];\n            if (!(typeof item === 'object')) return [3 /*break*/, 7];\n            keyValuesPath = this.getIndexKeyValuesPath(item);\n            return [4 /*yield*/, this.db.delete(keyValuesPath, storeName)];\n          case 6:\n            _e.sent();\n            _e.label = 7;\n          case 7:\n            return [3 /*break*/, 4];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _e.trys.push([10,, 13, 14]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 11:\n            _e.sent();\n            _e.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [3 /*break*/, 1];\n          case 16:\n            return [3 /*break*/, 23];\n          case 17:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 23];\n          case 18:\n            _e.trys.push([18,, 21, 22]);\n            if (!(_d && !_d.done && (_a = _c.return))) return [3 /*break*/, 20];\n            return [4 /*yield*/, _a.call(_c)];\n          case 19:\n            _e.sent();\n            _e.label = 20;\n          case 20:\n            return [3 /*break*/, 22];\n          case 21:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 22:\n            return [7 /*endfinally*/];\n          case 23:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Populates the delete Queue with all the items to delete\n   * @param relations\n   * @param models\n   * @param srcModel\n   * @param nameSpace\n   * @param deleteQueue\n   */\n  AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_1, relations_1_1, models_1, models_1_1, models_2, models_2_1;\n    var e_5, _a, e_6, _b, e_7, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, index, _d, model, hasOneIndex_1, hasConnectedModelFields, keyValuesPath, values_1, isUnidirectionalConnection, allRecords, recordToDelete, hasOneIndex_2, hasOneCustomField, keyValuesPath, value_1, allRecords, recordToDelete, e_6_1, model, keyValues, allRecords, indices, childrenArray, e_7_1, e_5_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_1.next()];\n          case 2:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n            rel = relations_1_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) ||\n            // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 20];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n            model = models_1_1.value;\n            if (!(targetNames && (targetNames === null || targetNames === void 0 ? void 0 : targetNames.length))) return [3 /*break*/, 8];\n            if (index) {\n              hasOneIndex_1 = index.split(IDENTIFIER_KEY_SEPARATOR);\n            } else if (associatedWith) {\n              if (Array.isArray(associatedWith)) {\n                hasOneIndex_1 = associatedWith;\n              } else {\n                hasOneIndex_1 = [associatedWith];\n              }\n            }\n            hasConnectedModelFields = targetNames.every(function (targetName) {\n              return model.hasOwnProperty(targetName);\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            isUnidirectionalConnection = hasOneIndex_1 === associatedWith;\n            if (hasConnectedModelFields && isUnidirectionalConnection) {\n              // Values will be that of the child model\n              values_1 = targetNames.filter(function (targetName) {\n                var _a;\n                return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false;\n              }).map(function (targetName) {\n                return model[targetName];\n              });\n            } else {\n              // values will be that of the parent model\n              values_1 = keyValuesPath.split(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            }\n            if (values_1.length === 0) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 6:\n            allRecords = _e.sent();\n            recordToDelete = void 0;\n            // values === targetNames\n            if (hasConnectedModelFields) {\n              /**\n               * Retrieve record by finding the record where all\n               * targetNames are present on the connected model.\n               *\n               */\n              // recordToDelete = allRecords.filter(childItem =>\n              // \tvalues.every(value => childItem[value] != null)\n              // ) as T[];\n              recordToDelete = allRecords.filter(function (childItem) {\n                return hasOneIndex_1.every(function (index) {\n                  return values_1.includes(childItem[index]);\n                });\n              });\n            } else {\n              // values === keyValuePath\n              recordToDelete = allRecords.filter(function (childItem) {\n                return childItem[hasOneIndex_1] === values_1;\n              });\n            }\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            return [3 /*break*/, 11];\n          case 8:\n            hasOneIndex_2 = index || associatedWith;\n            hasOneCustomField = targetName in model;\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            value_1 = hasOneCustomField ? model[targetName] : keyValuesPath;\n            if (!value_1) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 9:\n            allRecords = _e.sent();\n            recordToDelete = allRecords.filter(function (childItem) {\n              return childItem[hasOneIndex_2] === value_1;\n            });\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n          case 10:\n            _e.sent();\n            _e.label = 11;\n          case 11:\n            return [3 /*break*/, 4];\n          case 12:\n            return [3 /*break*/, 19];\n          case 13:\n            e_6_1 = _e.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3 /*break*/, 19];\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 15:\n            _e.sent();\n            _e.label = 16;\n          case 16:\n            return [3 /*break*/, 18];\n          case 17:\n            if (e_6) throw e_6.error;\n            return [7 /*endfinally*/];\n          case 18:\n            return [7 /*endfinally*/];\n          case 19:\n            return [3 /*break*/, 36];\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n          case 21:\n            return [4 /*yield*/, models_2.next()];\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n            model = models_2_1.value;\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 23:\n            allRecords = _e.sent();\n            indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n            childrenArray = allRecords.filter(function (childItem) {\n              return indices.every(function (index) {\n                return keyValues.includes(childItem[index]);\n              });\n            });\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 21];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_7_1 = _e.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // Intentionally blank\n            return [3 /*break*/, 36];\n          case 35:\n            throw new Error(\"Invalid relationType \" + relationType);\n          case 36:\n            return [3 /*break*/, 1];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_5) throw e_5.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.clear()];\n          case 1:\n            _a.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, keys, batch, _loop_2, this_1, items_2, items_2_1, item;\n      var e_8, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = getStorename(namespaceName, modelName);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n            batch = [];\n            _loop_2 = function (item) {\n              var model = this_1.modelInstanceCreator(modelConstructor, item);\n              var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n              var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n              var instance = connectedModels.find(function (_a) {\n                var instance = _a.instance;\n                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n              }).instance;\n              batch.push(instance);\n            };\n            this_1 = this;\n            try {\n              for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                item = items_2_1.value;\n                _loop_2(item);\n              }\n            } catch (e_8_1) {\n              e_8 = {\n                error: e_8_1\n              };\n            } finally {\n              try {\n                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n              } finally {\n                if (e_8) throw e_8.error;\n              }\n            }\n            return [4 /*yield*/, this.db.batchSave(storeName, batch, keys)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  return AsyncStorageAdapter;\n}();\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","AsyncStorageDatabase","ModelPredicateCreator","isPredicateObj","OpType","QueryOne","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","getIndex","getIndexFromAssociation","isModelConstructor","traverseModel","validatePredicate","inMemoryPagination","keysEqual","getStorename","getIndexKeys","extractPrimaryKeyValues","IDENTIFIER_KEY_SEPARATOR","logger","AsyncStorageAdapter","modelConstructor","namespace","namespaceResolver","modelName","model","Object","getPrototypeOf","constructor","namespaceName","keys","schema","namespaces","name","getIndexKeyValuesFromModel","join","theSchema","modelInstanceCreator","getModelConstructorByModelName","initPromise","Promise","res","rej","_this","resolve","reject","_a","db","init","error_1","condition","storeName","getStorenameForModel","connectedModels","set","Set","connectionStoreNames","values","map","item","instance","add","keyValuesPath","getIndexKeyValuesPath","get","fromDB","_c","predicates","getPredicates","_b","predicateObjs","type","isValid","msg","error","Error","result","connectionStoreNames_1","resItem","storeName_1","itemKeyValues","key","itemKeyValuesPath","fromDB_1","opType","UPDATE","INSERT","modelKeyValues","save","push","srcModelName","records","relations","relationships","relationTypes","length","record","predicate","pagination","queryByKey","keyValueFromPredicate","hasSort","sort","hasPagination","limit","getByKey","filterOnPredicate","filtered","getAll","all","load","keyValuePath","keyValues","predicateObj","find","p","field","operator","operand","undefined","filter","m","firstOrLast","FIRST","getOne","modelOrModelConstructor","deleteQueue","nameSpace","query","models","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","warn","items_1","delete","_e","srcModel","relations_1","rel","relationType","targetName","targetNames","associatedWith","index","indexes","_d","models_1","hasOneIndex_1","split","Array","isArray","hasConnectedModelFields","every","hasOwnProperty","isUnidirectionalConnection","values_1","allRecords","recordToDelete","includes","childItem","hasOneIndex_2","hasOneCustomField","value_1","models_2","indices","childrenArray","clear","batch","this_1","items_2","batchSave"],"sources":["/frontend-react-js/node_modules/@aws-amplify/datastore/src/storage/adapter/AsyncStorageAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { Adapter } from './index';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport { ModelPredicateCreator } from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR,\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\ttraverseModel,\n\tvalidatePredicate,\n\tinMemoryPagination,\n\tNAMESPACES,\n\tkeysEqual,\n\tgetStorename,\n\tgetIndexKeys,\n\textractPrimaryKeyValues,\n\tIDENTIFIER_KEY_SEPARATOR,\n} from '../../util';\n\nconst logger = new Logger('DataStore');\n\nexport class AsyncStorageAdapter implements Adapter {\n\t// Non-null assertions (bang operators) added to most properties to make TS happy.\n\t// For now, we can be reasonably sure they're available when they're needed, because\n\t// the adapter is not used directly outside the library boundary.\n\t// TODO: rejigger for DI?\n\tprivate schema!: InternalSchema;\n\tprivate namespaceResolver!: NamespaceResolver;\n\tprivate modelInstanceCreator!: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName!: (\n\t\tnamsespaceName: NAMESPACES,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db!: AsyncStorageDatabase;\n\tprivate initPromise!: Promise<void>;\n\tprivate resolve!: (value?: any) => void;\n\tprivate reject!: (value?: any) => void;\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn getStorename(namespace, modelName);\n\t}\n\n\t// Retrieves primary key values from a model\n\tprivate getIndexKeyValuesFromModel<T extends PersistentModel>(\n\t\tmodel: T\n\t): string[] {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\n\t\treturn extractPrimaryKeyValues(model, keys);\n\t}\n\n\t// Retrieves concatenated primary key values from a model\n\tprivate getIndexKeyValuesPath<T extends PersistentModel>(model: T): string {\n\t\treturn this.getIndexKeyValuesFromModel(model).join(\n\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t);\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: NAMESPACES,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>\n\t) {\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t\treturn;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tthis.db = new AsyncStorageDatabase();\n\t\t\t\tawait this.db.init();\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName as any\n\t\t);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\tconst keys = getIndexKeys(\n\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\tmodelName\n\t\t\t\t);\n\t\t\t\treturn { storeName, item, instance, keys };\n\t\t\t}\n\t\t);\n\t\tconst keyValuesPath = this.getIndexKeyValuesPath(model);\n\n\t\tconst fromDB = await this.db.get(keyValuesPath, storeName);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates!;\n\n\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance, keys } = resItem;\n\n\t\t\t/* Find the key values in the item, and concatenate them */\n\t\t\tconst itemKeyValues: string[] = keys.map(key => item[key]);\n\t\t\tconst itemKeyValuesPath: string = itemKeyValues.join(\n\t\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t\t);\n\n\t\t\tconst fromDB = <T>await this.db.get(itemKeyValuesPath, storeName);\n\t\t\tconst opType: OpType = fromDB ? OpType.UPDATE : OpType.INSERT;\n\t\t\tconst modelKeyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t// If item key values and model key values are equal, save to db\n\t\t\tif (\n\t\t\t\tkeysEqual(itemKeyValues, modelKeyValues) ||\n\t\t\t\topType === OpType.INSERT\n\t\t\t) {\n\t\t\t\tawait this.db.save(item, storeName, keys, itemKeyValuesPath);\n\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: NAMESPACES,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships![srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(\n\t\t\tmodelConstructor\n\t\t) as NAMESPACES;\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\t\tconst queryByKey =\n\t\t\tpredicates && this.keyValueFromPredicate(predicates, keys);\n\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = (await (async () => {\n\t\t\tif (queryByKey) {\n\t\t\t\tconst record = await this.getByKey(storeName, queryByKey);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort || hasPagination) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})()) as T[];\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getByKey<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tkeyValuePath: string\n\t): Promise<T> {\n\t\tconst record = <T>await this.db.get(keyValuePath, storeName);\n\t\treturn record;\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate keyValueFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>,\n\t\tkeys: string[]\n\t): string | undefined {\n\t\tconst { predicates: predicateObjs } = predicates;\n\n\t\tif (predicateObjs.length !== keys.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyValues = [] as any[];\n\n\t\tfor (const key of keys) {\n\t\t\tconst predicateObj = predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === key && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>;\n\n\t\t\tpredicateObj && keyValues.push(predicateObj.operand);\n\t\t}\n\n\t\treturn keyValues.length === keys.length\n\t\t\t? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)\n\t\t\t: undefined;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst all = <T[]>await this.getAll(storeName);\n\n\t\tconst filtered = predicateObjs\n\t\t\t? all.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: all;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\treturn inMemoryPagination(records, pagination);\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst result = <T>await this.db.getOne(firstOrLast, storeName);\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor =\n\t\t\t\tmodelOrModelConstructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor) as NAMESPACES;\n\n\t\t\t// models to be deleted.\n\t\t\tconst models = await this.query(modelConstructor, condition!);\n\t\t\t// TODO: refactor this to use a function like getRelations()\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor as T;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor) as NAMESPACES;\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst keyValuePath = this.getIndexKeyValuesPath(model);\n\n\t\t\t\tconst fromDB = await this.db.get(keyValuePath, storeName);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } = predicates!;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: { storeName: string; items: T[] | IDBValidKey[] }[]\n\t) {\n\t\tfor await (const deleteItem of deleteQueue!) {\n\t\t\tconst { storeName, items } = deleteItem;\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(item as T);\n\t\t\t\t\t\tawait this.db.delete(keyValuesPath, storeName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Populates the delete Queue with all the items to delete\n\t * @param relations\n\t * @param models\n\t * @param srcModel\n\t * @param nameSpace\n\t * @param deleteQueue\n\t */\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: NAMESPACES,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst {\n\t\t\t\trelationType,\n\t\t\t\tmodelName,\n\t\t\t\ttargetName,\n\t\t\t\ttargetNames,\n\t\t\t\tassociatedWith,\n\t\t\t} = rel;\n\t\t\tconst storeName = getStorename(nameSpace, modelName);\n\n\t\t\tconst index: string | undefined =\n\t\t\t\tgetIndex(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\tsrcModel\n\t\t\t\t) ||\n\t\t\t\t// if we were unable to find an index via relationTypes\n\t\t\t\t// i.e. for keyName connections, attempt to find one by the\n\t\t\t\t// associatedWith property\n\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName].indexes,\n\t\t\t\t\trel.associatedWith!\n\t\t\t\t);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tif (targetNames && targetNames?.length) {\n\t\t\t\t\t\t\tlet hasOneIndex;\n\n\t\t\t\t\t\t\tif (index) {\n\t\t\t\t\t\t\t\thasOneIndex = index.split(IDENTIFIER_KEY_SEPARATOR);\n\t\t\t\t\t\t\t} else if (associatedWith) {\n\t\t\t\t\t\t\t\tif (Array.isArray(associatedWith)) {\n\t\t\t\t\t\t\t\t\thasOneIndex = associatedWith;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\thasOneIndex = [associatedWith];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// iterate over targetNames array and see if each key is present in model object\n\t\t\t\t\t\t\t// targetNames here being the keys for the CHILD model\n\t\t\t\t\t\t\tconst hasConnectedModelFields = targetNames.every(targetName =>\n\t\t\t\t\t\t\t\tmodel.hasOwnProperty(targetName)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// PK / Composite key for the parent model\n\t\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(model);\n\n\t\t\t\t\t\t\tlet values;\n\n\t\t\t\t\t\t\tconst isUnidirectionalConnection = hasOneIndex === associatedWith;\n\n\t\t\t\t\t\t\tif (hasConnectedModelFields && isUnidirectionalConnection) {\n\t\t\t\t\t\t\t\t// Values will be that of the child model\n\t\t\t\t\t\t\t\tvalues = targetNames\n\t\t\t\t\t\t\t\t\t.filter(targetName => model[targetName] ?? false)\n\t\t\t\t\t\t\t\t\t.map(targetName => model[targetName]) as any;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// values will be that of the parent model\n\t\t\t\t\t\t\t\tvalues = keyValuesPath.split(\n\t\t\t\t\t\t\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (values.length === 0) break;\n\n\t\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\t\tlet recordToDelete;\n\n\t\t\t\t\t\t\t// values === targetNames\n\t\t\t\t\t\t\tif (hasConnectedModelFields) {\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * Retrieve record by finding the record where all\n\t\t\t\t\t\t\t\t * targetNames are present on the connected model.\n\t\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t// recordToDelete = allRecords.filter(childItem =>\n\t\t\t\t\t\t\t\t// \tvalues.every(value => childItem[value] != null)\n\t\t\t\t\t\t\t\t// ) as T[];\n\n\t\t\t\t\t\t\t\trecordToDelete = allRecords.filter(childItem =>\n\t\t\t\t\t\t\t\t\thasOneIndex.every(index => values.includes(childItem[index]))\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// values === keyValuePath\n\t\t\t\t\t\t\t\trecordToDelete = allRecords.filter(\n\t\t\t\t\t\t\t\t\tchildItem => childItem[hasOneIndex] === values\n\t\t\t\t\t\t\t\t) as T[];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete,\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst hasOneIndex = index || associatedWith;\n\t\t\t\t\t\t\tconst hasOneCustomField = targetName! in model;\n\t\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(model);\n\t\t\t\t\t\t\tconst value = hasOneCustomField\n\t\t\t\t\t\t\t\t? model[targetName!]\n\t\t\t\t\t\t\t\t: keyValuesPath;\n\n\t\t\t\t\t\t\tif (!value) break;\n\n\t\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\t\tconst recordToDelete = allRecords.filter(\n\t\t\t\t\t\t\t\tchildItem => childItem[hasOneIndex as string] === value\n\t\t\t\t\t\t\t) as T[];\n\n\t\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete,\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\t// Key values for the parent model:\n\t\t\t\t\t\tconst keyValues: string[] = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\tconst indices = index!.split(IDENTIFIER_KEY_SEPARATOR);\n\n\t\t\t\t\t\tconst childrenArray = allRecords.filter(childItem =>\n\t\t\t\t\t\t\tindices.every(index => keyValues.includes(childItem[index]))\n\t\t\t\t\t\t) as T[];\n\n\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid relationType ${relationType}`);\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.db.clear();\n\n\t\tthis.db = undefined!;\n\t\tthis.initPromise = undefined!;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tconst { name: modelName } = modelConstructor;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\tconst keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n\t\tconst batch: ModelInstanceMetadata[] = [];\n\n\t\tfor (const item of items) {\n\t\t\tconst model = this.modelInstanceCreator(modelConstructor, item);\n\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelName,\n\t\t\t\tmodel,\n\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName\n\t\t\t);\n\n\t\t\tconst keyValuesPath = this.getIndexKeyValuesPath(model);\n\n\t\t\tconst { instance } = connectedModels.find(({ instance }) => {\n\t\t\t\tconst instanceKeyValuesPath = this.getIndexKeyValuesPath(instance);\n\t\t\t\treturn keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n\t\t\t})!;\n\n\t\t\tbatch.push(instance);\n\t\t}\n\n\t\treturn await this.db.batchSave(storeName, batch, keys);\n\t}\n}\n\nexport default new AsyncStorageAdapter();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}