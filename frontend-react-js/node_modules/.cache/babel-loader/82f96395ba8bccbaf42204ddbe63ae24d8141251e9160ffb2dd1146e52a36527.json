{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { print, parse, GraphQLError } from 'graphql';\nimport { Amplify, ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER } from '@aws-amplify/core';\nimport { PubSub } from '@aws-amplify/pubsub';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { GraphQLAuthError } from './types';\nimport { RestClient } from '@aws-amplify/api-rest';\nvar USER_AGENT_HEADER = 'x-amz-user-agent';\nvar logger = new Logger('GraphQLAPI');\nexport var graphqlOperation = function (query, variables, authToken, userAgentSuffix) {\n  if (variables === void 0) {\n    variables = {};\n  }\n  return {\n    query: query,\n    variables: variables,\n    authToken: authToken,\n    userAgentSuffix: userAgentSuffix\n  };\n};\n/**\n * Export Cloud Logic APIs\n */\nvar GraphQLAPIClass = /** @class */function () {\n  /**\n   * Initialize GraphQL API with AWS configuration\n   * @param {Object} options - Configuration object for API\n   */\n  function GraphQLAPIClass(options) {\n    this._api = null;\n    this.Auth = Auth;\n    this.Cache = Cache;\n    this.Credentials = Credentials;\n    this._options = options;\n    logger.debug('API Options', this._options);\n  }\n  GraphQLAPIClass.prototype.getModuleName = function () {\n    return 'GraphQLAPI';\n  };\n  /**\n   * Configure API\n   * @param {Object} config - Configuration of the API\n   * @return {Object} - The current configuration\n   */\n  GraphQLAPIClass.prototype.configure = function (options) {\n    var _a = options || {},\n      _b = _a.API,\n      API = _b === void 0 ? {} : _b,\n      otherOptions = __rest(_a, [\"API\"]);\n    var opt = __assign(__assign({}, otherOptions), API);\n    logger.debug('configure GraphQL API', {\n      opt: opt\n    });\n    if (opt['aws_project_region']) {\n      opt = Object.assign({}, opt, {\n        region: opt['aws_project_region'],\n        header: {}\n      });\n    }\n    if (typeof opt.graphql_headers !== 'undefined' && typeof opt.graphql_headers !== 'function') {\n      logger.warn('graphql_headers should be a function');\n      opt.graphql_headers = undefined;\n    }\n    this._options = Object.assign({}, this._options, opt);\n    this.createInstance();\n    return this._options;\n  };\n  /**\n   * Create an instance of API for the library\n   * @return - A promise of true if Success\n   */\n  GraphQLAPIClass.prototype.createInstance = function () {\n    logger.debug('create Rest instance');\n    if (this._options) {\n      this._api = new RestClient(this._options);\n      // Share instance Credentials with client for SSR\n      this._api.Credentials = this.Credentials;\n      return true;\n    } else {\n      return Promise.reject('API not configured');\n    }\n  };\n  GraphQLAPIClass.prototype._headerBasedAuth = function (defaultAuthenticationType, additionalHeaders) {\n    if (additionalHeaders === void 0) {\n      additionalHeaders = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, aws_appsync_authenticationType, apiKey, authenticationType, headers, _b, credentialsOK, token, federatedInfo, currentUser, e_1, session, e_2;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = this._options, aws_appsync_authenticationType = _a.aws_appsync_authenticationType, apiKey = _a.aws_appsync_apiKey;\n            authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';\n            headers = {};\n            _b = authenticationType;\n            switch (_b) {\n              case 'API_KEY':\n                return [3 /*break*/, 1];\n              case 'AWS_IAM':\n                return [3 /*break*/, 2];\n              case 'OPENID_CONNECT':\n                return [3 /*break*/, 4];\n              case 'AMAZON_COGNITO_USER_POOLS':\n                return [3 /*break*/, 11];\n              case 'AWS_LAMBDA':\n                return [3 /*break*/, 15];\n            }\n            return [3 /*break*/, 16];\n          case 1:\n            if (!apiKey) {\n              throw new Error(GraphQLAuthError.NO_API_KEY);\n            }\n            headers = {\n              Authorization: null,\n              'X-Api-Key': apiKey\n            };\n            return [3 /*break*/, 17];\n          case 2:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 3:\n            credentialsOK = _c.sent();\n            if (!credentialsOK) {\n              throw new Error(GraphQLAuthError.NO_CREDENTIALS);\n            }\n            return [3 /*break*/, 17];\n          case 4:\n            _c.trys.push([4, 9,, 10]);\n            token = void 0;\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 5:\n            federatedInfo = _c.sent();\n            if (!federatedInfo) return [3 /*break*/, 6];\n            token = federatedInfo.token;\n            return [3 /*break*/, 8];\n          case 6:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 7:\n            currentUser = _c.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _c.label = 8;\n          case 8:\n            if (!token) {\n              throw new Error(GraphQLAuthError.NO_FEDERATED_JWT);\n            }\n            headers = {\n              Authorization: token\n            };\n            return [3 /*break*/, 10];\n          case 9:\n            e_1 = _c.sent();\n            throw new Error(GraphQLAuthError.NO_CURRENT_USER);\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            _c.trys.push([11, 13,, 14]);\n            return [4 /*yield*/, this.Auth.currentSession()];\n          case 12:\n            session = _c.sent();\n            headers = {\n              Authorization: session.getAccessToken().getJwtToken()\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            e_2 = _c.sent();\n            throw new Error(GraphQLAuthError.NO_CURRENT_USER);\n          case 14:\n            return [3 /*break*/, 17];\n          case 15:\n            if (!additionalHeaders.Authorization) {\n              throw new Error(GraphQLAuthError.NO_AUTH_TOKEN);\n            }\n            headers = {\n              Authorization: additionalHeaders.Authorization\n            };\n            return [3 /*break*/, 17];\n          case 16:\n            headers = {\n              Authorization: null\n            };\n            return [3 /*break*/, 17];\n          case 17:\n            return [2 /*return*/, headers];\n        }\n      });\n    });\n  };\n  /**\n   * to get the operation type\n   * @param operation\n   */\n  GraphQLAPIClass.prototype.getGraphqlOperationType = function (operation) {\n    var doc = parse(operation);\n    var definitions = doc.definitions;\n    var _a = __read(definitions, 1),\n      operationType = _a[0].operation;\n    return operationType;\n  };\n  /**\n   * Executes a GraphQL operation\n   *\n   * @param options - GraphQL Options\n   * @param [additionalHeaders] - headers to merge in after any `graphql_headers` set in the config\n   * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n   */\n  GraphQLAPIClass.prototype.graphql = function (_a, additionalHeaders) {\n    var paramQuery = _a.query,\n      _b = _a.variables,\n      variables = _b === void 0 ? {} : _b,\n      authMode = _a.authMode,\n      authToken = _a.authToken,\n      userAgentSuffix = _a.userAgentSuffix;\n    var query = typeof paramQuery === 'string' ? parse(paramQuery) : parse(print(paramQuery));\n    var _c = __read(query.definitions.filter(function (def) {\n        return def.kind === 'OperationDefinition';\n      }), 1),\n      _d = _c[0],\n      operationDef = _d === void 0 ? {} : _d;\n    var operationType = operationDef.operation;\n    var headers = additionalHeaders || {};\n    // if an authorization header is set, have the explicit authToken take precedence\n    if (authToken) {\n      headers.Authorization = authToken;\n    }\n    switch (operationType) {\n      case 'query':\n      case 'mutation':\n        this.createInstanceIfNotCreated();\n        var cancellableToken = this._api.getCancellableToken();\n        var initParams = {\n          cancellableToken: cancellableToken\n        };\n        var responsePromise = this._graphql({\n          query: query,\n          variables: variables,\n          authMode: authMode,\n          userAgentSuffix: userAgentSuffix\n        }, headers, initParams);\n        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n        return responsePromise;\n      case 'subscription':\n        return this._graphqlSubscribe({\n          query: query,\n          variables: variables,\n          authMode: authMode\n        }, headers);\n      default:\n        throw new Error(\"invalid operation type: \" + operationType);\n    }\n  };\n  GraphQLAPIClass.prototype._graphql = function (_a, additionalHeaders, initParams) {\n    var query = _a.query,\n      variables = _a.variables,\n      authMode = _a.authMode,\n      userAgentSuffix = _a.userAgentSuffix;\n    if (additionalHeaders === void 0) {\n      additionalHeaders = {};\n    }\n    if (initParams === void 0) {\n      initParams = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, region, appSyncGraphqlEndpoint, _c, graphql_headers, customGraphqlEndpoint, customEndpointRegion, headers, _d, _e, _f, _g, _h, _j, body, init, endpoint, error, response, err_1, errors;\n      var _k;\n      return __generator(this, function (_l) {\n        switch (_l.label) {\n          case 0:\n            this.createInstanceIfNotCreated();\n            _b = this._options, region = _b.aws_appsync_region, appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint, _c = _b.graphql_headers, graphql_headers = _c === void 0 ? function () {\n              return {};\n            } : _c, customGraphqlEndpoint = _b.graphql_endpoint, customEndpointRegion = _b.graphql_endpoint_iam_region;\n            _d = [{}];\n            _e = !customGraphqlEndpoint;\n            if (!_e) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._headerBasedAuth(authMode, additionalHeaders)];\n          case 1:\n            _e = _l.sent();\n            _l.label = 2;\n          case 2:\n            _f = [__assign.apply(void 0, _d.concat([_e]))];\n            _g = customGraphqlEndpoint;\n            if (!_g) return [3 /*break*/, 6];\n            if (!customEndpointRegion) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._headerBasedAuth(authMode, additionalHeaders)];\n          case 3:\n            _h = _l.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            _h = {\n              Authorization: null\n            };\n            _l.label = 5;\n          case 5:\n            _g = _h;\n            _l.label = 6;\n          case 6:\n            _j = [__assign.apply(void 0, _f.concat([_g]))];\n            return [4 /*yield*/, graphql_headers({\n              query: query,\n              variables: variables\n            })];\n          case 7:\n            headers = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), additionalHeaders]), !customGraphqlEndpoint && (_k = {}, _k[USER_AGENT_HEADER] = getAmplifyUserAgent(userAgentSuffix), _k)]);\n            body = {\n              query: print(query),\n              variables: variables\n            };\n            init = Object.assign({\n              headers: headers,\n              body: body,\n              signerServiceInfo: {\n                service: !customGraphqlEndpoint ? 'appsync' : 'execute-api',\n                region: !customGraphqlEndpoint ? region : customEndpointRegion\n              }\n            }, initParams);\n            endpoint = customGraphqlEndpoint || appSyncGraphqlEndpoint;\n            if (!endpoint) {\n              error = new GraphQLError('No graphql endpoint provided.');\n              throw {\n                data: {},\n                errors: [error]\n              };\n            }\n            _l.label = 8;\n          case 8:\n            _l.trys.push([8, 10,, 11]);\n            return [4 /*yield*/, this._api.post(endpoint, init)];\n          case 9:\n            response = _l.sent();\n            return [3 /*break*/, 11];\n          case 10:\n            err_1 = _l.sent();\n            // If the exception is because user intentionally\n            // cancelled the request, do not modify the exception\n            // so that clients can identify the exception correctly.\n            if (this._api.isCancel(err_1)) {\n              throw err_1;\n            }\n            response = {\n              data: {},\n              errors: [new GraphQLError(err_1.message, null, null, null, null, err_1)]\n            };\n            return [3 /*break*/, 11];\n          case 11:\n            errors = response.errors;\n            if (errors && errors.length) {\n              throw response;\n            }\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  GraphQLAPIClass.prototype.createInstanceIfNotCreated = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this._api) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.createInstance()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param {any} error - Any error\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n   */\n  GraphQLAPIClass.prototype.isCancel = function (error) {\n    return this._api.isCancel(error);\n  };\n  /**\n   * Cancels an inflight request. Only applicable for graphql queries and mutations\n   * @param {any} request - request to cancel\n   * @return {boolean} - A boolean indicating if the request was cancelled\n   */\n  GraphQLAPIClass.prototype.cancel = function (request, message) {\n    return this._api.cancel(request, message);\n  };\n  /**\n   * Check if the request has a corresponding cancel token in the WeakMap.\n   * @params request - The request promise\n   * @return if the request has a corresponding cancel token.\n   */\n  GraphQLAPIClass.prototype.hasCancelToken = function (request) {\n    return this._api.hasCancelToken(request);\n  };\n  GraphQLAPIClass.prototype._graphqlSubscribe = function (_a, additionalHeaders) {\n    var query = _a.query,\n      variables = _a.variables,\n      defaultAuthenticationType = _a.authMode,\n      authToken = _a.authToken;\n    if (additionalHeaders === void 0) {\n      additionalHeaders = {};\n    }\n    var _b = this._options,\n      region = _b.aws_appsync_region,\n      appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint,\n      aws_appsync_authenticationType = _b.aws_appsync_authenticationType,\n      apiKey = _b.aws_appsync_apiKey,\n      _c = _b.graphql_headers,\n      graphql_headers = _c === void 0 ? function () {\n        return {};\n      } : _c;\n    var authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';\n    if (PubSub && typeof PubSub.subscribe === 'function') {\n      return PubSub.subscribe('', {\n        provider: INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n        appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n        authenticationType: authenticationType,\n        apiKey: apiKey,\n        query: print(query),\n        region: region,\n        variables: variables,\n        graphql_headers: graphql_headers,\n        additionalHeaders: additionalHeaders,\n        authToken: authToken\n      });\n    } else {\n      logger.debug('No pubsub module applied for subscription');\n      throw new Error('No pubsub module applied for subscription');\n    }\n  };\n  /**\n   * @private\n   */\n  GraphQLAPIClass.prototype._ensureCredentials = function () {\n    var _this = this;\n    return this.Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = _this.Credentials.shear(credentials);\n      logger.debug('set credentials for api', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return GraphQLAPIClass;\n}();\nexport { GraphQLAPIClass };\nexport var GraphQLAPI = new GraphQLAPIClass(null);\nAmplify.register(GraphQLAPI);","map":{"version":3,"mappings":";AAAA;AACA;AACA,SAGCA,KAAK,EACLC,KAAK,EACLC,YAAY,QAEN,SAAS;AAEhB,SACCC,OAAO,EACPC,aAAa,IAAIC,MAAM,EACvBC,WAAW,EACXC,mBAAmB,EACnBC,6CAA6C,QACvC,mBAAmB;AAC1B,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SACCC,gBAAgB,QAIV,SAAS;AAChB,SAASC,UAAU,QAAQ,uBAAuB;AAClD,IAAMC,iBAAiB,GAAG,kBAAkB;AAE5C,IAAMC,MAAM,GAAG,IAAIV,MAAM,CAAC,YAAY,CAAC;AAEvC,OAAO,IAAMW,gBAAgB,GAAG,UAC/BC,KAAK,EACLC,SAAc,EACdC,SAAkB,EAClBC,eAAwB;EAFxB;IAAAF,cAAc;EAAA;EAGV,OAAC;IACLD,KAAK;IACLC,SAAS;IACTC,SAAS;IACTC,eAAe;GACf;AALI,CAKH;AAEF;;;AAGA;EAWC;;;;EAIA,yBAAYC,OAAO;IAVX,SAAI,GAAG,IAAI;IAEnB,SAAI,GAAGX,IAAI;IACX,UAAK,GAAGC,KAAK;IACb,gBAAW,GAAGL,WAAW;IAOxB,IAAI,CAACgB,QAAQ,GAAGD,OAAO;IACvBN,MAAM,CAACQ,KAAK,CAAC,aAAa,EAAE,IAAI,CAACD,QAAQ,CAAC;EAC3C;EAEOE,uCAAa,GAApB;IACC,OAAO,YAAY;EACpB,CAAC;EAED;;;;;EAKAA,mCAAS,GAAT,UAAUH,OAAO;IAChB,IAAMI,kBAA6C;MAA3CC,WAAQ;MAARC,6BAAQ;MAAEC,kCAAiC;IACnD,IAAIC,GAAG,yBAAQD,YAAY,GAAKD,GAAG,CAAE;IACrCZ,MAAM,CAACQ,KAAK,CAAC,uBAAuB,EAAE;MAAEM,GAAG;IAAA,CAAE,CAAC;IAE9C,IAAIA,GAAG,CAAC,oBAAoB,CAAC,EAAE;MAC9BA,GAAG,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEF,GAAG,EAAE;QAC5BG,MAAM,EAAEH,GAAG,CAAC,oBAAoB,CAAC;QACjCI,MAAM,EAAE;OACR,CAAC;;IAGH,IACC,OAAOJ,GAAG,CAACK,eAAe,KAAK,WAAW,IAC1C,OAAOL,GAAG,CAACK,eAAe,KAAK,UAAU,EACxC;MACDnB,MAAM,CAACoB,IAAI,CAAC,sCAAsC,CAAC;MACnDN,GAAG,CAACK,eAAe,GAAGE,SAAS;;IAGhC,IAAI,CAACd,QAAQ,GAAGQ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACT,QAAQ,EAAEO,GAAG,CAAC;IAErD,IAAI,CAACQ,cAAc,EAAE;IAErB,OAAO,IAAI,CAACf,QAAQ;EACrB,CAAC;EAED;;;;EAIAE,wCAAc,GAAd;IACCT,MAAM,CAACQ,KAAK,CAAC,sBAAsB,CAAC;IACpC,IAAI,IAAI,CAACD,QAAQ,EAAE;MAClB,IAAI,CAACgB,IAAI,GAAG,IAAIzB,UAAU,CAAC,IAAI,CAACS,QAAQ,CAAC;MACzC;MACA,IAAI,CAACgB,IAAI,CAAChC,WAAW,GAAG,IAAI,CAACA,WAAW;MAExC,OAAO,IAAI;KACX,MAAM;MACN,OAAOiC,OAAO,CAACC,MAAM,CAAC,oBAAoB,CAAC;;EAE7C,CAAC;EAEahB,0CAAgB,GAA9B,UACCiB,yBAA0B,EAC1BC,iBAAiD;IAAjD;MAAAA,sBAAiD;IAAA;;;;;;YAE3CjB,KACL,IAAI,CAACH,QAAQ,EADNqB,8BAA8B,sCAAsBC,MAAM;YAE5DC,kBAAkB,GACvBJ,yBAAyB,IAAIE,8BAA8B,IAAI,SAAS;YACrEG,OAAO,GAAG,EAAE;YAERpB,uBAAkB;;mBACpB,SAAS;gBAAT;mBASA,SAAS;gBAAT;mBAMA,gBAAgB;gBAAhB;mBAuBA,2BAA2B;gBAA3B;mBAUA,YAAY;gBAAZ;YAAY;;;YA/ChB,IAAI,CAACkB,MAAM,EAAE;cACZ,MAAM,IAAIG,KAAK,CAACnC,gBAAgB,CAACoC,UAAU,CAAC;;YAE7CF,OAAO,GAAG;cACTG,aAAa,EAAE,IAAI;cACnB,WAAW,EAAEL;aACb;YACD;;YAEsB,qBAAM,IAAI,CAACM,kBAAkB,EAAE;;YAA/CC,aAAa,GAAGC,SAA+B;YACrD,IAAI,CAACD,aAAa,EAAE;cACnB,MAAM,IAAIJ,KAAK,CAACnC,gBAAgB,CAACyC,cAAc,CAAC;;YAEjD;;;YAGKC,KAAK;YAEa,qBAAM3C,KAAK,CAAC4C,OAAO,CAAC,eAAe,CAAC;;YAApDC,aAAa,GAAGJ,SAAoC;iBACtDI,aAAa,EAAb;YACHF,KAAK,GAAGE,aAAa,CAACF,KAAK;;;YAEP,qBAAM5C,IAAI,CAAC+C,wBAAwB,EAAE;;YAAnDC,WAAW,GAAGN,SAAqC;YACzD,IAAIM,WAAW,EAAE;cAChBJ,KAAK,GAAGI,WAAW,CAACJ,KAAK;;;;YAG3B,IAAI,CAACA,KAAK,EAAE;cACX,MAAM,IAAIP,KAAK,CAACnC,gBAAgB,CAAC+C,gBAAgB,CAAC;;YAEnDb,OAAO,GAAG;cACTG,aAAa,EAAEK;aACf;;;;YAED,MAAM,IAAIP,KAAK,CAACnC,gBAAgB,CAACgD,eAAe,CAAC;;YAElD;;;YAGiB,qBAAM,IAAI,CAAClD,IAAI,CAACmD,cAAc,EAAE;;YAA1CC,OAAO,GAAGV,SAAgC;YAChDN,OAAO,GAAG;cACTG,aAAa,EAAEa,OAAO,CAACC,cAAc,EAAE,CAACC,WAAW;aACnD;;;;YAED,MAAM,IAAIjB,KAAK,CAACnC,gBAAgB,CAACgD,eAAe,CAAC;;YAElD;;YAEA,IAAI,CAAClB,iBAAiB,CAACO,aAAa,EAAE;cACrC,MAAM,IAAIF,KAAK,CAACnC,gBAAgB,CAACqD,aAAa,CAAC;;YAEhDnB,OAAO,GAAG;cACTG,aAAa,EAAEP,iBAAiB,CAACO;aACjC;YACD;;YAEAH,OAAO,GAAG;cACTG,aAAa,EAAE;aACf;YACD;;YAGF,sBAAOH,OAAO;QAAC;;;GACf;EAED;;;;EAIAtB,iDAAuB,GAAvB,UAAwB0C,SAA2B;IAClD,IAAMC,GAAG,GAAGlE,KAAK,CAACiE,SAAS,CAAC;IAC5B,IAAME,WAAW,GAChBD,GAAG,CAACC,WAAqD;IACpD,+BAA4C;MAAzCC,+BAAyC;IAElD,OAAOA,aAAa;EACrB,CAAC;EAED;;;;;;;EAOA7C,iCAAO,GAAP,UACCC,EAMiB,EACjBiB,iBAA6C;QAN5C4B,qBAAiB;MACjB5C,iBAAc;MAAdR,mCAAc;MACdqD,sBAAQ;MACRpD,wBAAS;MACTC,oCAAe;IAIhB,IAAMH,KAAK,GACV,OAAOqD,UAAU,KAAK,QAAQ,GAC3BrE,KAAK,CAACqE,UAAU,CAAC,GACjBrE,KAAK,CAACD,KAAK,CAACsE,UAAU,CAAC,CAAC;IAEtB;QAAA;MAAA,MAEL;MAFME,UAAiB;MAAjBC,sCAEN;IACO,0CAAwB;IAGhC,IAAM3B,OAAO,GAAGJ,iBAAiB,IAAI,EAAE;IAEvC;IACA,IAAIvB,SAAS,EAAE;MACd2B,OAAO,CAACG,aAAa,GAAG9B,SAAS;;IAGlC,QAAQkD,aAAa;MACpB,KAAK,OAAO;MACZ,KAAK,UAAU;QACd,IAAI,CAACK,0BAA0B,EAAE;QACjC,IAAMC,gBAAgB,GAAG,IAAI,CAACrC,IAAI,CAACsC,mBAAmB,EAAE;QACxD,IAAMC,UAAU,GAAG;UAAEF,gBAAgB;QAAA,CAAE;QACvC,IAAMG,eAAe,GAAG,IAAI,CAACC,QAAQ,CACpC;UAAE9D,KAAK;UAAEC,SAAS;UAAEqD,QAAQ;UAAEnD,eAAe;QAAA,CAAE,EAC/C0B,OAAO,EACP+B,UAAU,CACV;QACD,IAAI,CAACvC,IAAI,CAAC0C,4BAA4B,CACrCF,eAAe,EACfH,gBAAgB,CAChB;QACD,OAAOG,eAAe;MACvB,KAAK,cAAc;QAClB,OAAO,IAAI,CAACG,iBAAiB,CAAC;UAAEhE,KAAK;UAAEC,SAAS;UAAEqD,QAAQ;QAAA,CAAE,EAAEzB,OAAO,CAAC;MACvE;QACC,MAAM,IAAIC,KAAK,CAAC,6BAA2BsB,aAAe,CAAC;IAAC;EAE/D,CAAC;EAEa7C,kCAAQ,GAAtB,UACCC,EAA+D,EAC/DiB,iBAAsB,EACtBmC,UAAe;QAFb5D,gBAAK;MAAEC,wBAAS;MAAEqD,sBAAQ;MAAEnD,oCAAe;IAC7C;MAAAsB,sBAAsB;IAAA;IACtB;MAAAmC,eAAe;IAAA;;;;;;;YAEf,IAAI,CAACH,0BAA0B,EAAE;YAC3BhD,KAMF,IAAI,CAACJ,QAAQ,EALIU,MAAM,0BACGkD,sBAAsB,mCACnD9B,uBAA4B,EAA5BlB,eAAe,mBAAG;cAAM,OAAC,EAAE;YAAH,CAAI,OACViD,qBAAqB,wBACVC,oBAAoB;;YAI7CC,MAACF,qBAAqB;qBAAtB;YACF,qBAAM,IAAI,CAACG,gBAAgB,CAACf,QAAQ,EAAE7B,iBAAiB,CAAC;;YAAzD2C,KAACE,SAAyD;;;oDADxDF,GACyD;YACxDG,0BAAqB;qBAArB;iBACFJ,oBAAoB,EAApB;YACE,qBAAM,IAAI,CAACE,gBAAgB,CAACf,QAAQ,EAAE7B,iBAAiB,CAAC;;YAAxD+C,cAAwD;;;YACxDA;cAAExC,aAAa,EAAE;YAAI,CAAE;;;YAF1BuC,OAE2B;;;oDAHzBA,GAG0B;YACzB,qBAAMtD,eAAe,CAAC;cAAEjB,KAAK;cAAEC,SAAS;YAAA,CAAE,CAAC;;YAP1C4B,OAAO,qFAORyC,SAA2C,CAAC,IAC7C7C,iBAAiB,IAChB,CAACyC,qBAAqB,cACzBO,GAAC5E,iBAAiB,IAAGP,mBAAmB,CAACa,eAAe,CAAC,KACzD,CAAC,CACF;YAEKuE,IAAI,GAAG;cACZ1E,KAAK,EAAEjB,KAAK,CAACiB,KAAqB,CAAC;cACnCC,SAAS;aACT;YAEK0E,IAAI,GAAG9D,MAAM,CAACC,MAAM,CACzB;cACCe,OAAO;cACP6C,IAAI;cACJE,iBAAiB,EAAE;gBAClBC,OAAO,EAAE,CAACX,qBAAqB,GAAG,SAAS,GAAG,aAAa;gBAC3DnD,MAAM,EAAE,CAACmD,qBAAqB,GAAGnD,MAAM,GAAGoD;;aAE3C,EACDP,UAAU,CACV;YAEKkB,QAAQ,GAAGZ,qBAAqB,IAAID,sBAAsB;YAEhE,IAAI,CAACa,QAAQ,EAAE;cACRC,KAAK,GAAG,IAAI9F,YAAY,CAAC,+BAA+B,CAAC;cAE/D,MAAM;gBACL+F,IAAI,EAAE,EAAE;gBACRC,MAAM,EAAE,CAACF,KAAK;eACd;;;;;YAKU,qBAAM,IAAI,CAAC1D,IAAI,CAAC6D,IAAI,CAACJ,QAAQ,EAAEH,IAAI,CAAC;;YAA/CQ,QAAQ,GAAGb,SAAoC;;;;YAE/C;YACA;YACA;YACA,IAAI,IAAI,CAACjD,IAAI,CAAC+D,QAAQ,CAACC,KAAG,CAAC,EAAE;cAC5B,MAAMA,KAAG;;YAEVF,QAAQ,GAAG;cACVH,IAAI,EAAE,EAAE;cACRC,MAAM,EAAE,CAAC,IAAIhG,YAAY,CAACoG,KAAG,CAACC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAED,KAAG,CAAC;aACnE;;;YAGMJ,MAAM,GAAKE,QAAQ,OAAb;YAEd,IAAIF,MAAM,IAAIA,MAAM,CAACM,MAAM,EAAE;cAC5B,MAAMJ,QAAQ;;YAGf,sBAAOA,QAAQ;QAAC;;;GAChB;EAEK5E,oDAA0B,GAAhC;;;;;iBACK,CAAC,IAAI,CAACc,IAAI,EAAV;YACH,qBAAM,IAAI,CAACD,cAAc,EAAE;;YAA3BZ,SAA2B;;;;;;;GAE5B;EAED;;;;;EAKAD,kCAAQ,GAAR,UAASwE,KAAK;IACb,OAAO,IAAI,CAAC1D,IAAI,CAAC+D,QAAQ,CAACL,KAAK,CAAC;EACjC,CAAC;EAED;;;;;EAKAxE,gCAAM,GAAN,UAAOiF,OAAqB,EAAEF,OAAgB;IAC7C,OAAO,IAAI,CAACjE,IAAI,CAACoE,MAAM,CAACD,OAAO,EAAEF,OAAO,CAAC;EAC1C,CAAC;EAED;;;;;EAKA/E,wCAAc,GAAd,UAAeiF,OAAqB;IACnC,OAAO,IAAI,CAACnE,IAAI,CAACqE,cAAc,CAACF,OAAO,CAAC;EACzC,CAAC;EAEOjF,2CAAiB,GAAzB,UACCC,EAKiB,EACjBiB,iBAAsB;QALrBzB,gBAAK;MACLC,wBAAS;MACTuB,uCAAmC;MACnCtB,wBAAS;IAEV;MAAAuB,sBAAsB;IAAA;IAEhB,sBAMW;MALhBV,8BAA0B;MAC1BkD,uDAAmD;MACnDvC,kEAA8B;MAC9BC,8BAA0B;MAC1BQ,uBAA4B;MAA5BlB;QAAA;MAAA,MACgB;IACjB,IAAMW,kBAAkB,GACvBJ,yBAAyB,IAAIE,8BAA8B,IAAI,SAAS;IAEzE,IAAIlC,MAAM,IAAI,OAAOA,MAAM,CAACmG,SAAS,KAAK,UAAU,EAAE;MACrD,OAAOnG,MAAM,CAACmG,SAAS,CAAC,EAAE,EAAE;QAC3BC,QAAQ,EAAErG,6CAA6C;QACvD0E,sBAAsB;QACtBrC,kBAAkB;QAClBD,MAAM;QACN3B,KAAK,EAAEjB,KAAK,CAACiB,KAAqB,CAAC;QACnCe,MAAM;QACNd,SAAS;QACTgB,eAAe;QACfQ,iBAAiB;QACjBvB,SAAS;OACT,CAAC;KACF,MAAM;MACNJ,MAAM,CAACQ,KAAK,CAAC,2CAA2C,CAAC;MACzD,MAAM,IAAIwB,KAAK,CAAC,2CAA2C,CAAC;;EAE9D,CAAC;EAED;;;EAGAvB,4CAAkB,GAAlB;IAAA;IACC,OAAO,IAAI,CAAClB,WAAW,CAACwG,GAAG,EAAE,CAC3BC,IAAI,CAAC,qBAAW;MAChB,IAAI,CAACC,WAAW,EAAE,OAAO,KAAK;MAC9B,IAAMC,IAAI,GAAGC,KAAI,CAAC5G,WAAW,CAAC6G,KAAK,CAACH,WAAW,CAAC;MAChDjG,MAAM,CAACQ,KAAK,CAAC,yBAAyB,EAAE0F,IAAI,CAAC;MAE7C,OAAO,IAAI;IACZ,CAAC,CAAC,CACDG,KAAK,CAAC,aAAG;MACTrG,MAAM,CAACoB,IAAI,CAAC,0BAA0B,EAAEkF,GAAG,CAAC;MAC5C,OAAO,KAAK;IACb,CAAC,CAAC;EACJ,CAAC;EACF,sBAAC;AAAD,CAAC,EAtYD;;AAwYA,OAAO,IAAMC,UAAU,GAAG,IAAI9F,eAAe,CAAC,IAAI,CAAC;AACnDrB,OAAO,CAACoH,QAAQ,CAACD,UAAU,CAAC","names":["print","parse","GraphQLError","Amplify","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER","PubSub","Auth","Cache","GraphQLAuthError","RestClient","USER_AGENT_HEADER","logger","graphqlOperation","query","variables","authToken","userAgentSuffix","options","_options","debug","GraphQLAPIClass","_a","_b","API","otherOptions","opt","Object","assign","region","header","graphql_headers","warn","undefined","createInstance","_api","Promise","reject","defaultAuthenticationType","additionalHeaders","aws_appsync_authenticationType","apiKey","authenticationType","headers","Error","NO_API_KEY","Authorization","_ensureCredentials","credentialsOK","_c","NO_CREDENTIALS","token","getItem","federatedInfo","currentAuthenticatedUser","currentUser","NO_FEDERATED_JWT","NO_CURRENT_USER","currentSession","session","getAccessToken","getJwtToken","NO_AUTH_TOKEN","operation","doc","definitions","operationType","paramQuery","authMode","_d","operationDef","createInstanceIfNotCreated","cancellableToken","getCancellableToken","initParams","responsePromise","_graphql","updateRequestToBeCancellable","_graphqlSubscribe","appSyncGraphqlEndpoint","customGraphqlEndpoint","customEndpointRegion","_e","_headerBasedAuth","_l","_g","_h","_k","body","init","signerServiceInfo","service","endpoint","error","data","errors","post","response","isCancel","err_1","message","length","request","cancel","hasCancelToken","subscribe","provider","get","then","credentials","cred","_this","shear","catch","err","GraphQLAPI","register"],"sources":["/frontend-react-js/node_modules/@aws-amplify/api-graphql/src/GraphQLAPI.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tDocumentNode,\n\tOperationDefinitionNode,\n\tprint,\n\tparse,\n\tGraphQLError,\n\tOperationTypeNode,\n} from 'graphql';\nimport Observable from 'zen-observable-ts';\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n\tINTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n} from '@aws-amplify/core';\nimport { PubSub } from '@aws-amplify/pubsub';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport {\n\tGraphQLAuthError,\n\tGraphQLOptions,\n\tGraphQLResult,\n\tGraphQLOperation,\n} from './types';\nimport { RestClient } from '@aws-amplify/api-rest';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\n\nconst logger = new Logger('GraphQLAPI');\n\nexport const graphqlOperation = (\n\tquery,\n\tvariables = {},\n\tauthToken?: string,\n\tuserAgentSuffix?: string\n) => ({\n\tquery,\n\tvariables,\n\tauthToken,\n\tuserAgentSuffix,\n});\n\n/**\n * Export Cloud Logic APIs\n */\nexport class GraphQLAPIClass {\n\t/**\n\t * @private\n\t */\n\tprivate _options;\n\tprivate _api = null;\n\n\tAuth = Auth;\n\tCache = Cache;\n\tCredentials = Credentials;\n\n\t/**\n\t * Initialize GraphQL API with AWS configuration\n\t * @param {Object} options - Configuration object for API\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t\tlogger.debug('API Options', this._options);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'GraphQLAPI';\n\t}\n\n\t/**\n\t * Configure API\n\t * @param {Object} config - Configuration of the API\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options) {\n\t\tconst { API = {}, ...otherOptions } = options || {};\n\t\tlet opt = { ...otherOptions, ...API };\n\t\tlogger.debug('configure GraphQL API', { opt });\n\n\t\tif (opt['aws_project_region']) {\n\t\t\topt = Object.assign({}, opt, {\n\t\t\t\tregion: opt['aws_project_region'],\n\t\t\t\theader: {},\n\t\t\t});\n\t\t}\n\n\t\tif (\n\t\t\ttypeof opt.graphql_headers !== 'undefined' &&\n\t\t\ttypeof opt.graphql_headers !== 'function'\n\t\t) {\n\t\t\tlogger.warn('graphql_headers should be a function');\n\t\t\topt.graphql_headers = undefined;\n\t\t}\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tthis.createInstance();\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * Create an instance of API for the library\n\t * @return - A promise of true if Success\n\t */\n\tcreateInstance() {\n\t\tlogger.debug('create Rest instance');\n\t\tif (this._options) {\n\t\t\tthis._api = new RestClient(this._options);\n\t\t\t// Share instance Credentials with client for SSR\n\t\t\tthis._api.Credentials = this.Credentials;\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn Promise.reject('API not configured');\n\t\t}\n\t}\n\n\tprivate async _headerBasedAuth(\n\t\tdefaultAuthenticationType?,\n\t\tadditionalHeaders: { [key: string]: string } = {}\n\t) {\n\t\tconst { aws_appsync_authenticationType, aws_appsync_apiKey: apiKey } =\n\t\t\tthis._options;\n\t\tconst authenticationType =\n\t\t\tdefaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';\n\t\tlet headers = {};\n\n\t\tswitch (authenticationType) {\n\t\t\tcase 'API_KEY':\n\t\t\t\tif (!apiKey) {\n\t\t\t\t\tthrow new Error(GraphQLAuthError.NO_API_KEY);\n\t\t\t\t}\n\t\t\t\theaders = {\n\t\t\t\t\tAuthorization: null,\n\t\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'AWS_IAM':\n\t\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\t\tif (!credentialsOK) {\n\t\t\t\t\tthrow new Error(GraphQLAuthError.NO_CREDENTIALS);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'OPENID_CONNECT':\n\t\t\t\ttry {\n\t\t\t\t\tlet token;\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tconst federatedInfo = await Cache.getItem('federatedInfo');\n\t\t\t\t\tif (federatedInfo) {\n\t\t\t\t\t\ttoken = federatedInfo.token;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst currentUser = await Auth.currentAuthenticatedUser();\n\t\t\t\t\t\tif (currentUser) {\n\t\t\t\t\t\t\ttoken = currentUser.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!token) {\n\t\t\t\t\t\tthrow new Error(GraphQLAuthError.NO_FEDERATED_JWT);\n\t\t\t\t\t}\n\t\t\t\t\theaders = {\n\t\t\t\t\t\tAuthorization: token,\n\t\t\t\t\t};\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(GraphQLAuthError.NO_CURRENT_USER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'AMAZON_COGNITO_USER_POOLS':\n\t\t\t\ttry {\n\t\t\t\t\tconst session = await this.Auth.currentSession();\n\t\t\t\t\theaders = {\n\t\t\t\t\t\tAuthorization: session.getAccessToken().getJwtToken(),\n\t\t\t\t\t};\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(GraphQLAuthError.NO_CURRENT_USER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'AWS_LAMBDA':\n\t\t\t\tif (!additionalHeaders.Authorization) {\n\t\t\t\t\tthrow new Error(GraphQLAuthError.NO_AUTH_TOKEN);\n\t\t\t\t}\n\t\t\t\theaders = {\n\t\t\t\t\tAuthorization: additionalHeaders.Authorization,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\theaders = {\n\t\t\t\t\tAuthorization: null,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn headers;\n\t}\n\n\t/**\n\t * to get the operation type\n\t * @param operation\n\t */\n\tgetGraphqlOperationType(operation: GraphQLOperation): OperationTypeNode {\n\t\tconst doc = parse(operation);\n\t\tconst definitions =\n\t\t\tdoc.definitions as ReadonlyArray<OperationDefinitionNode>;\n\t\tconst [{ operation: operationType }] = definitions;\n\n\t\treturn operationType;\n\t}\n\n\t/**\n\t * Executes a GraphQL operation\n\t *\n\t * @param options - GraphQL Options\n\t * @param [additionalHeaders] - headers to merge in after any `graphql_headers` set in the config\n\t * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n\t */\n\tgraphql<T = any>(\n\t\t{\n\t\t\tquery: paramQuery,\n\t\t\tvariables = {},\n\t\t\tauthMode,\n\t\t\tauthToken,\n\t\t\tuserAgentSuffix,\n\t\t}: GraphQLOptions,\n\t\tadditionalHeaders?: { [key: string]: string }\n\t): Observable<GraphQLResult<T>> | Promise<GraphQLResult<T>> {\n\t\tconst query =\n\t\t\ttypeof paramQuery === 'string'\n\t\t\t\t? parse(paramQuery)\n\t\t\t\t: parse(print(paramQuery));\n\n\t\tconst [operationDef = {}] = query.definitions.filter(\n\t\t\tdef => def.kind === 'OperationDefinition'\n\t\t);\n\t\tconst { operation: operationType } =\n\t\t\toperationDef as OperationDefinitionNode;\n\n\t\tconst headers = additionalHeaders || {};\n\n\t\t// if an authorization header is set, have the explicit authToken take precedence\n\t\tif (authToken) {\n\t\t\theaders.Authorization = authToken;\n\t\t}\n\n\t\tswitch (operationType) {\n\t\t\tcase 'query':\n\t\t\tcase 'mutation':\n\t\t\t\tthis.createInstanceIfNotCreated();\n\t\t\t\tconst cancellableToken = this._api.getCancellableToken();\n\t\t\t\tconst initParams = { cancellableToken };\n\t\t\t\tconst responsePromise = this._graphql<T>(\n\t\t\t\t\t{ query, variables, authMode, userAgentSuffix },\n\t\t\t\t\theaders,\n\t\t\t\t\tinitParams\n\t\t\t\t);\n\t\t\t\tthis._api.updateRequestToBeCancellable(\n\t\t\t\t\tresponsePromise,\n\t\t\t\t\tcancellableToken\n\t\t\t\t);\n\t\t\t\treturn responsePromise;\n\t\t\tcase 'subscription':\n\t\t\t\treturn this._graphqlSubscribe({ query, variables, authMode }, headers);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid operation type: ${operationType}`);\n\t\t}\n\t}\n\n\tprivate async _graphql<T = any>(\n\t\t{ query, variables, authMode, userAgentSuffix }: GraphQLOptions,\n\t\tadditionalHeaders = {},\n\t\tinitParams = {}\n\t): Promise<GraphQLResult<T>> {\n\t\tthis.createInstanceIfNotCreated();\n\t\tconst {\n\t\t\taws_appsync_region: region,\n\t\t\taws_appsync_graphqlEndpoint: appSyncGraphqlEndpoint,\n\t\t\tgraphql_headers = () => ({}),\n\t\t\tgraphql_endpoint: customGraphqlEndpoint,\n\t\t\tgraphql_endpoint_iam_region: customEndpointRegion,\n\t\t} = this._options;\n\n\t\tconst headers = {\n\t\t\t...(!customGraphqlEndpoint &&\n\t\t\t\t(await this._headerBasedAuth(authMode, additionalHeaders))),\n\t\t\t...(customGraphqlEndpoint &&\n\t\t\t\t(customEndpointRegion\n\t\t\t\t\t? await this._headerBasedAuth(authMode, additionalHeaders)\n\t\t\t\t\t: { Authorization: null })),\n\t\t\t...(await graphql_headers({ query, variables })),\n\t\t\t...additionalHeaders,\n\t\t\t...(!customGraphqlEndpoint && {\n\t\t\t\t[USER_AGENT_HEADER]: getAmplifyUserAgent(userAgentSuffix),\n\t\t\t}),\n\t\t};\n\n\t\tconst body = {\n\t\t\tquery: print(query as DocumentNode),\n\t\t\tvariables,\n\t\t};\n\n\t\tconst init = Object.assign(\n\t\t\t{\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: !customGraphqlEndpoint ? 'appsync' : 'execute-api',\n\t\t\t\t\tregion: !customGraphqlEndpoint ? region : customEndpointRegion,\n\t\t\t\t},\n\t\t\t},\n\t\t\tinitParams\n\t\t);\n\n\t\tconst endpoint = customGraphqlEndpoint || appSyncGraphqlEndpoint;\n\n\t\tif (!endpoint) {\n\t\t\tconst error = new GraphQLError('No graphql endpoint provided.');\n\n\t\t\tthrow {\n\t\t\t\tdata: {},\n\t\t\t\terrors: [error],\n\t\t\t};\n\t\t}\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await this._api.post(endpoint, init);\n\t\t} catch (err) {\n\t\t\t// If the exception is because user intentionally\n\t\t\t// cancelled the request, do not modify the exception\n\t\t\t// so that clients can identify the exception correctly.\n\t\t\tif (this._api.isCancel(err)) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tresponse = {\n\t\t\t\tdata: {},\n\t\t\t\terrors: [new GraphQLError(err.message, null, null, null, null, err)],\n\t\t\t};\n\t\t}\n\n\t\tconst { errors } = response;\n\n\t\tif (errors && errors.length) {\n\t\t\tthrow response;\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tasync createInstanceIfNotCreated() {\n\t\tif (!this._api) {\n\t\t\tawait this.createInstance();\n\t\t}\n\t}\n\n\t/**\n\t * Checks to see if an error thrown is from an api request cancellation\n\t * @param {any} error - Any error\n\t * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n\t */\n\tisCancel(error) {\n\t\treturn this._api.isCancel(error);\n\t}\n\n\t/**\n\t * Cancels an inflight request. Only applicable for graphql queries and mutations\n\t * @param {any} request - request to cancel\n\t * @return {boolean} - A boolean indicating if the request was cancelled\n\t */\n\tcancel(request: Promise<any>, message?: string) {\n\t\treturn this._api.cancel(request, message);\n\t}\n\n\t/**\n\t * Check if the request has a corresponding cancel token in the WeakMap.\n\t * @params request - The request promise\n\t * @return if the request has a corresponding cancel token.\n\t */\n\thasCancelToken(request: Promise<any>) {\n\t\treturn this._api.hasCancelToken(request);\n\t}\n\n\tprivate _graphqlSubscribe(\n\t\t{\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tauthMode: defaultAuthenticationType,\n\t\t\tauthToken,\n\t\t}: GraphQLOptions,\n\t\tadditionalHeaders = {}\n\t): Observable<any> {\n\t\tconst {\n\t\t\taws_appsync_region: region,\n\t\t\taws_appsync_graphqlEndpoint: appSyncGraphqlEndpoint,\n\t\t\taws_appsync_authenticationType,\n\t\t\taws_appsync_apiKey: apiKey,\n\t\t\tgraphql_headers = () => ({}),\n\t\t} = this._options;\n\t\tconst authenticationType =\n\t\t\tdefaultAuthenticationType || aws_appsync_authenticationType || 'AWS_IAM';\n\n\t\tif (PubSub && typeof PubSub.subscribe === 'function') {\n\t\t\treturn PubSub.subscribe('', {\n\t\t\t\tprovider: INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tapiKey,\n\t\t\t\tquery: print(query as DocumentNode),\n\t\t\t\tregion,\n\t\t\t\tvariables,\n\t\t\t\tgraphql_headers,\n\t\t\t\tadditionalHeaders,\n\t\t\t\tauthToken,\n\t\t\t});\n\t\t} else {\n\t\t\tlogger.debug('No pubsub module applied for subscription');\n\t\t\tthrow new Error('No pubsub module applied for subscription');\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn this.Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = this.Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for api', cred);\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n}\n\nexport const GraphQLAPI = new GraphQLAPIClass(null);\nAmplify.register(GraphQLAPI);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}