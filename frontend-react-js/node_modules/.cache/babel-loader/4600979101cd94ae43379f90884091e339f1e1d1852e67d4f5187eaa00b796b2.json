{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { formatUrl } from \"@aws-sdk/util-format-url\";\nimport { S3RequestPresigner } from \"./presigner\";\nexport var getSignedUrl = function (client, command, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var s3Presigner, presignInterceptMiddleware, middlewareName, presigned, output;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          s3Presigner = new S3RequestPresigner(__assign({}, client.config));\n          presignInterceptMiddleware = function (next, context) {\n            return function (args) {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var request, presigned;\n                var _a, _b;\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      request = args.request;\n                      if (!HttpRequest.isInstance(request)) {\n                        throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n                      }\n                      // Retry information headers are not meaningful in presigned URLs\n                      delete request.headers[\"amz-sdk-invocation-id\"];\n                      delete request.headers[\"amz-sdk-request\"];\n                      return [4 /*yield*/, s3Presigner.presign(request, __assign(__assign({}, options), {\n                        signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context[\"signing_region\"],\n                        signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context[\"signing_service\"]\n                      }))];\n                    case 1:\n                      presigned = _c.sent();\n                      return [2 /*return*/, {\n                        // Intercept the middleware stack by returning fake response\n                        response: {},\n                        output: {\n                          $metadata: {\n                            httpStatusCode: 200\n                          },\n                          presigned: presigned\n                        }\n                      }];\n                  }\n                });\n              });\n            };\n          };\n          middlewareName = \"presignInterceptMiddleware\";\n          client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n            name: middlewareName,\n            relation: \"before\",\n            toMiddleware: \"awsAuthMiddleware\",\n            override: true\n          });\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1,, 3, 4]);\n          return [4 /*yield*/, client.send(command)];\n        case 2:\n          output = _a.sent();\n          //@ts-ignore the output is faked, so it's not actually OutputType\n          presigned = output.presigned;\n          return [3 /*break*/, 4];\n        case 3:\n          client.middlewareStack.remove(middlewareName);\n          return [7 /*endfinally*/];\n        case 4:\n          return [2 /*return*/, formatUrl(presigned)];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,wBAAwB;AAGpD,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,SAASC,kBAAkB,QAAQ,aAAa;AAEhD,OAAO,IAAMC,YAAY,GAAG,UAK1BC,MAAyD,EACzDC,OAA6E,EAC7EC,OAAwC;EAAxC;IAAAA,YAAwC;EAAA;;;;;;UAElCC,WAAW,GAAG,IAAIL,kBAAkB,cAAME,MAAM,CAACI,MAAM,EAAG;UAC1DC,0BAA0B,GAAqD,UAACC,IAAI,EAAEC,OAAO;YAAK,iBACtGC,IAAI;cAAA;;;;;;sBAEIC,OAAO,GAAKD,IAAI,QAAT;sBACf,IAAI,CAACZ,WAAW,CAACc,UAAU,CAACD,OAAO,CAAC,EAAE;wBACpC,MAAM,IAAIE,KAAK,CAAC,uDAAuD,CAAC;;sBAE1E;sBACA,OAAOF,OAAO,CAACG,OAAO,CAAC,uBAAuB,CAAC;sBAC/C,OAAOH,OAAO,CAACG,OAAO,CAAC,iBAAiB,CAAC;sBAEvB,qBAAMT,WAAW,CAACU,OAAO,CAACJ,OAAO,wBAC9CP,OAAO;wBACVY,aAAa,QAAEZ,OAAO,CAACY,aAAa,mCAAIP,OAAO,CAAC,gBAAgB,CAAC;wBACjEQ,cAAc,QAAEb,OAAO,CAACa,cAAc,mCAAIR,OAAO,CAAC,iBAAiB;sBAAC,GACpE;;sBAJIS,SAAS,GAAGC,SAIhB;sBACF,sBAAO;wBACL;wBACAC,QAAQ,EAAE,EAAE;wBACZC,MAAM,EAAE;0BACNC,SAAS,EAAE;4BAAEC,cAAc,EAAE;0BAAG,CAAE;0BAClCL,SAAS;;uBAEL;kBAAC;;;aACV;UAxBuG,CAwBvG;UACKM,cAAc,GAAG,4BAA4B;UACnDtB,MAAM,CAACuB,eAAe,CAACC,aAAa,CAACnB,0BAA0B,EAAE;YAC/DoB,IAAI,EAAEH,cAAc;YACpBI,QAAQ,EAAE,QAAQ;YAClBC,YAAY,EAAE,mBAAmB;YACjCC,QAAQ,EAAE;WACX,CAAC;;;;UAIe,qBAAM5B,MAAM,CAAC6B,IAAI,CAAC5B,OAAO,CAAC;;UAAnCkB,MAAM,GAAGW,SAA0B;UACzC;UACAd,SAAS,GAAGG,MAAM,CAACH,SAAS;;;UAE5BhB,MAAM,CAACuB,eAAe,CAACQ,MAAM,CAACT,cAAc,CAAC;;;UAG/C,sBAAOzB,SAAS,CAACmB,SAAS,CAAC;MAAC;;;CAC7B","names":["HttpRequest","formatUrl","S3RequestPresigner","getSignedUrl","client","command","options","s3Presigner","config","presignInterceptMiddleware","next","context","args","request","isInstance","Error","headers","presign","signingRegion","signingService","presigned","_c","response","output","$metadata","httpStatusCode","middlewareName","middlewareStack","addRelativeTo","name","relation","toMiddleware","override","send","_a","remove"],"sources":["/frontend-react-js/node_modules/@aws-sdk/s3-request-presigner/src/getSignedUrl.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { Client, Command } from \"@aws-sdk/smithy-client\";\nimport { BuildMiddleware, MetadataBearer, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { formatUrl } from \"@aws-sdk/util-format-url\";\n\nimport { S3RequestPresigner } from \"./presigner\";\n\nexport const getSignedUrl = async <\n  InputTypesUnion extends object,\n  InputType extends InputTypesUnion,\n  OutputType extends MetadataBearer = MetadataBearer\n>(\n  client: Client<any, InputTypesUnion, MetadataBearer, any>,\n  command: Command<InputType, OutputType, any, InputTypesUnion, MetadataBearer>,\n  options: RequestPresigningArguments = {}\n): Promise<string> => {\n  const s3Presigner = new S3RequestPresigner({ ...client.config });\n  const presignInterceptMiddleware: BuildMiddleware<InputTypesUnion, MetadataBearer> = (next, context) => async (\n    args\n  ) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request)) {\n      throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n    }\n    // Retry information headers are not meaningful in presigned URLs\n    delete request.headers[\"amz-sdk-invocation-id\"];\n    delete request.headers[\"amz-sdk-request\"];\n\n    const presigned = await s3Presigner.presign(request, {\n      ...options,\n      signingRegion: options.signingRegion ?? context[\"signing_region\"],\n      signingService: options.signingService ?? context[\"signing_service\"],\n    });\n    return {\n      // Intercept the middleware stack by returning fake response\n      response: {},\n      output: {\n        $metadata: { httpStatusCode: 200 },\n        presigned,\n      },\n    } as any;\n  };\n  const middlewareName = \"presignInterceptMiddleware\";\n  client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n    name: middlewareName,\n    relation: \"before\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true,\n  });\n\n  let presigned: HttpRequest;\n  try {\n    const output = await client.send(command);\n    //@ts-ignore the output is faked, so it's not actually OutputType\n    presigned = output.presigned;\n  } finally {\n    client.middlewareStack.remove(middlewareName);\n  }\n\n  return formatUrl(presigned);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}