{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseAWSExports } from '../parseAWSExports';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\nvar AWSCloudWatchProvider = /** @class */function () {\n  function AWSCloudWatchProvider(config) {\n    this.configure(config);\n    this._dataTracker = {\n      eventUploadInProgress: false,\n      logEvents: []\n    };\n    this._currentLogBatch = [];\n    this._initiateLogPushInterval();\n  }\n  AWSCloudWatchProvider.prototype.getProviderName = function () {\n    return AWSCloudWatchProvider.PROVIDER_NAME;\n  };\n  AWSCloudWatchProvider.prototype.getCategoryName = function () {\n    return AWSCloudWatchProvider.CATEGORY;\n  };\n  AWSCloudWatchProvider.prototype.getLogQueue = function () {\n    return this._dataTracker.logEvents;\n  };\n  AWSCloudWatchProvider.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    var conf = Object.assign({}, this._config, parseAWSExports(config).Logging, config);\n    this._config = conf;\n    return this._config;\n  };\n  AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n            cmd = new CreateLogGroupCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_1 = _a.sent();\n            logger.error(\"error creating log group - \" + error_1);\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log groups');\n            cmd = new DescribeLogGroupsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_2 = _a.sent();\n            logger.error(\"error getting log group - \" + error_2);\n            throw error_2;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n            cmd = new CreateLogStreamCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_3 = _a.sent();\n            logger.error(\"error creating log stream - \" + error_3);\n            throw error_3;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log streams');\n            cmd = new DescribeLogStreamsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_4 = _a.sent();\n            logger.error(\"error getting log stream - \" + error_4);\n            throw error_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting log events from stream - ', params.logStreamName);\n            cmd = new GetLogEventsCommand(params);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 3:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 4:\n            error_5 = _a.sent();\n            logger.error(\"error getting log events - \" + error_5);\n            throw error_5;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n    logger.debug('pushing log events to Cloudwatch...');\n    this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n  };\n  AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currGroups, foundGroups, err_1, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._dataTracker.verifiedLogGroup) {\n              return [2 /*return*/, this._dataTracker.verifiedLogGroup];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 2:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            return [4 /*yield*/, this.getLogGroups({\n              logGroupNamePrefix: logGroupName\n            })];\n          case 3:\n            currGroups = _a.sent();\n            if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n              foundGroups = currGroups.logGroups.filter(function (group) {\n                return group.logGroupName === logGroupName;\n              });\n              if (foundGroups.length > 0) {\n                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                return [2 /*return*/, foundGroups[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            return [4 /*yield*/, this.createLogGroup({\n              logGroupName: logGroupName\n            })];\n          case 4:\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            _a.sent();\n            return [2 /*return*/, null];\n          case 5:\n            err_1 = _a.sent();\n            errString = \"failure during log group search: \" + err_1;\n            logger.error(errString);\n            throw err_1;\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currStreams, foundStreams, err_2, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            return [4 /*yield*/, this.getLogStreams({\n              logGroupName: logGroupName,\n              logStreamNamePrefix: logStreamName\n            })];\n          case 2:\n            currStreams = _a.sent();\n            if (currStreams.logStreams) {\n              foundStreams = currStreams.logStreams.filter(function (stream) {\n                return stream.logStreamName === logStreamName;\n              });\n              if (foundStreams.length > 0) {\n                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                return [2 /*return*/, foundStreams[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            return [4 /*yield*/, this.createLogStream({\n              logGroupName: logGroupName,\n              logStreamName: logStreamName\n            })];\n          case 3:\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            _a.sent();\n            return [2 /*return*/, null];\n          case 4:\n            err_2 = _a.sent();\n            errString = \"failure during log stream search: \" + err_2;\n            logger.error(errString);\n            throw err_2;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, cmd, client, output, err_3, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n            logger.debug('sending log events to stream - ', params.logStreamName);\n            cmd = new PutLogEventsCommand(params);\n            client = this._initCloudWatchLogs();\n            return [4 /*yield*/, client.send(cmd)];\n          case 2:\n            output = _a.sent();\n            return [2 /*return*/, output];\n          case 3:\n            err_3 = _a.sent();\n            errString = \"failure during log push: \" + err_3;\n            logger.error(errString);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n    return new CloudWatchLogsClient({\n      region: this._config.region,\n      credentials: this._config.credentials,\n      customUserAgent: getAmplifyUserAgent(),\n      endpoint: this._config.endpoint\n    });\n  };\n  AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              if (!credentials) return false;\n              var cred = Credentials.shear(credentials);\n              logger.debug('set credentials for logging', cred);\n              _this._config.credentials = cred;\n              return true;\n            }).catch(function (error) {\n              logger.warn('ensure credentials error', error);\n              return false;\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var logStream, err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n              return [2 /*return*/, this._nextSequenceToken];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n          case 2:\n            _a.sent();\n            this._nextSequenceToken = undefined;\n            return [4 /*yield*/, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n          case 3:\n            logStream = _a.sent();\n            if (logStream) {\n              this._nextSequenceToken = logStream.uploadSequenceToken;\n            }\n            return [2 /*return*/, this._nextSequenceToken];\n          case 4:\n            err_4 = _a.sent();\n            logger.error(\"failure while getting next sequence token: \" + err_4);\n            throw err_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this._getNextSequenceToken()];\n          case 1:\n            seqToken = _a.sent();\n            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;\n            putLogsPayload = {\n              logGroupName: this._config.logGroupName,\n              logStreamName: this._config.logStreamName,\n              logEvents: logBatch,\n              sequenceToken: seqToken\n            };\n            this._dataTracker.eventUploadInProgress = true;\n            return [4 /*yield*/, this._sendLogEvents(putLogsPayload)];\n          case 2:\n            sendLogEventsResponse = _a.sent();\n            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2 /*return*/, sendLogEventsResponse];\n          case 3:\n            err_5 = _a.sent();\n            logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n            if (RETRY_ERROR_CODES.includes(err_5.name)) {\n              this._getNewSequenceTokenAndSubmit({\n                logEvents: this._currentLogBatch,\n                logGroupName: this._config.logGroupName,\n                logStreamName: this._config.logStreamName\n              });\n            } else {\n              this._dataTracker.eventUploadInProgress = false;\n              throw err_5;\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n    /**\n     * CloudWatch has restrictions on the size of the log events that get sent up.\n     * We need to track both the size of each event and the total size of the batch\n     * of logs.\n     *\n     * We also need to ensure that the logs in the batch are sorted in chronological order.\n     * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n     */\n    var currentEventIdx = 0;\n    var totalByteSize = 0;\n    while (currentEventIdx < this._dataTracker.logEvents.length) {\n      var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;\n      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n        var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n        logger.warn(errString);\n        currentEvent.message = currentEvent.message.substring(0, eventSize);\n      }\n      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE) break;\n      totalByteSize += eventSize;\n      currentEventIdx++;\n    }\n    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n    return this._currentLogBatch;\n  };\n  AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, sendLogEventsRepsonse, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            this._nextSequenceToken = undefined;\n            this._dataTracker.eventUploadInProgress = true;\n            return [4 /*yield*/, this._getNextSequenceToken()];\n          case 1:\n            seqToken = _a.sent();\n            payload.sequenceToken = seqToken;\n            return [4 /*yield*/, this._sendLogEvents(payload)];\n          case 2:\n            sendLogEventsRepsonse = _a.sent();\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2 /*return*/, sendLogEventsRepsonse];\n          case 3:\n            err_6 = _a.sent();\n            logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n            this._dataTracker.eventUploadInProgress = false;\n            throw err_6;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n    var _this = this;\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    this._timer = setInterval(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_7;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n              if (!this._getDocUploadPermissibility()) return [3 /*break*/, 2];\n              return [4 /*yield*/, this._safeUploadLogEvents()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              return [3 /*break*/, 4];\n            case 3:\n              err_7 = _a.sent();\n              logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, 2000);\n  };\n  AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;\n  };\n  AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n  AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n  return AWSCloudWatchProvider;\n}();\nexport { AWSCloudWatchProvider };","map":{"version":3,"mappings":"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","names":["CloudWatchLogsClient","CreateLogGroupCommand","CreateLogStreamCommand","DescribeLogGroupsCommand","DescribeLogStreamsCommand","GetLogEventsCommand","PutLogEventsCommand","Credentials","ConsoleLogger","Logger","getAmplifyUserAgent","parseAWSExports","AWS_CLOUDWATCH_BASE_BUFFER_SIZE","AWS_CLOUDWATCH_CATEGORY","AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE","AWS_CLOUDWATCH_MAX_EVENT_SIZE","AWS_CLOUDWATCH_PROVIDER_NAME","NO_CREDS_ERROR_STRING","RETRY_ERROR_CODES","logger","config","configure","_dataTracker","eventUploadInProgress","logEvents","_currentLogBatch","_initiateLogPushInterval","AWSCloudWatchProvider","PROVIDER_NAME","CATEGORY","_config","conf","Object","assign","Logging","params","debug","logGroupName","cmd","_ensureCredentials","credentialsOK","_a","Error","client","_initCloudWatchLogs","send","output","error","error_1","error_2","logStreamName","error_3","error_4","error_5","logs","verifiedLogGroup","getLogGroups","logGroupNamePrefix","currGroups","logGroups","foundGroups","filter","length","createLogGroup","errString","err_1","getLogStreams","logStreamNamePrefix","currStreams","logStreams","foundStreams","_nextSequenceToken","uploadSequenceToken","createLogStream","err_2","err_3","region","credentials","customUserAgent","endpoint","get","then","cred","shear","_this","catch","warn","_validateLogGroupExistsAndCreate","undefined","_validateLogStreamExists","logStream","err_4","_getNextSequenceToken","seqToken","logBatch","_getBufferedBatchOfLogs","putLogsPayload","sequenceToken","_sendLogEvents","sendLogEventsResponse","nextSequenceToken","err_5","includes","name","_getNewSequenceTokenAndSubmit","currentEventIdx","totalByteSize","currentEvent","eventSize","TextEncoder","encode","message","substring","splice","payload","sendLogEventsRepsonse","err_6","_timer","clearInterval","setInterval","_getDocUploadPermissibility","_safeUploadLogEvents","err_7"],"sources":["/frontend-react-js/node_modules/@aws-amplify/core/src/Providers/AWSCloudWatchProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tCloudWatchLogsClient,\n\tCreateLogGroupCommand,\n\tCreateLogGroupCommandInput,\n\tCreateLogGroupCommandOutput,\n\tCreateLogStreamCommand,\n\tCreateLogStreamCommandInput,\n\tCreateLogStreamCommandOutput,\n\tDescribeLogGroupsCommand,\n\tDescribeLogGroupsCommandInput,\n\tDescribeLogGroupsCommandOutput,\n\tDescribeLogStreamsCommand,\n\tDescribeLogStreamsCommandInput,\n\tDescribeLogStreamsCommandOutput,\n\tGetLogEventsCommand,\n\tGetLogEventsCommandInput,\n\tGetLogEventsCommandOutput,\n\tInputLogEvent,\n\tLogGroup,\n\tLogStream,\n\tPutLogEventsCommand,\n\tPutLogEventsCommandInput,\n\tPutLogEventsCommandOutput,\n} from '@aws-sdk/client-cloudwatch-logs';\nimport {\n\tAWSCloudWatchProviderOptions,\n\tCloudWatchDataTracker,\n\tLoggingProvider,\n} from '../types/types';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseAWSExports } from '../parseAWSExports';\nimport {\n\tAWS_CLOUDWATCH_BASE_BUFFER_SIZE,\n\tAWS_CLOUDWATCH_CATEGORY,\n\tAWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE,\n\tAWS_CLOUDWATCH_MAX_EVENT_SIZE,\n\tAWS_CLOUDWATCH_PROVIDER_NAME,\n\tNO_CREDS_ERROR_STRING,\n\tRETRY_ERROR_CODES,\n} from '../Util/Constants';\n\nconst logger = new Logger('AWSCloudWatch');\n\nclass AWSCloudWatchProvider implements LoggingProvider {\n\tstatic readonly PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n\tstatic readonly CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n\n\tprivate _config: AWSCloudWatchProviderOptions;\n\tprivate _dataTracker: CloudWatchDataTracker;\n\tprivate _currentLogBatch: InputLogEvent[];\n\tprivate _timer;\n\tprivate _nextSequenceToken: string | undefined;\n\n\tconstructor(config?: AWSCloudWatchProviderOptions) {\n\t\tthis.configure(config);\n\t\tthis._dataTracker = {\n\t\t\teventUploadInProgress: false,\n\t\t\tlogEvents: [],\n\t\t};\n\t\tthis._currentLogBatch = [];\n\t\tthis._initiateLogPushInterval();\n\t}\n\n\tpublic getProviderName(): string {\n\t\treturn AWSCloudWatchProvider.PROVIDER_NAME;\n\t}\n\n\tpublic getCategoryName(): string {\n\t\treturn AWSCloudWatchProvider.CATEGORY;\n\t}\n\n\tpublic getLogQueue(): InputLogEvent[] {\n\t\treturn this._dataTracker.logEvents;\n\t}\n\n\tpublic configure(\n\t\tconfig?: AWSCloudWatchProviderOptions\n\t): AWSCloudWatchProviderOptions {\n\t\tif (!config) return this._config || {};\n\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tparseAWSExports(config).Logging,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\n\t\treturn this._config;\n\t}\n\n\tpublic async createLogGroup(\n\t\tparams: CreateLogGroupCommandInput\n\t): Promise<CreateLogGroupCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log group in CloudWatch - ',\n\t\t\tparams.logGroupName\n\t\t);\n\t\tconst cmd = new CreateLogGroupCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogGroups(\n\t\tparams: DescribeLogGroupsCommandInput\n\t): Promise<DescribeLogGroupsCommandOutput> {\n\t\tlogger.debug('getting list of log groups');\n\n\t\tconst cmd = new DescribeLogGroupsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async createLogStream(\n\t\tparams: CreateLogStreamCommandInput\n\t): Promise<CreateLogStreamCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log stream in CloudWatch - ',\n\t\t\tparams.logStreamName\n\t\t);\n\t\tconst cmd = new CreateLogStreamCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogStreams(\n\t\tparams: DescribeLogStreamsCommandInput\n\t): Promise<DescribeLogStreamsCommandOutput> {\n\t\tlogger.debug('getting list of log streams');\n\t\tconst cmd = new DescribeLogStreamsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogEvents(\n\t\tparams: GetLogEventsCommandInput\n\t): Promise<GetLogEventsCommandOutput> {\n\t\tlogger.debug('getting log events from stream - ', params.logStreamName);\n\t\tconst cmd = new GetLogEventsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log events - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic pushLogs(logs: InputLogEvent[]): void {\n\t\tlogger.debug('pushing log events to Cloudwatch...');\n\t\tthis._dataTracker.logEvents = [...this._dataTracker.logEvents, ...logs];\n\t}\n\n\tprivate async _validateLogGroupExistsAndCreate(\n\t\tlogGroupName: string\n\t): Promise<LogGroup> {\n\t\tif (this._dataTracker.verifiedLogGroup) {\n\t\t\treturn this._dataTracker.verifiedLogGroup;\n\t\t}\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currGroups = await this.getLogGroups({\n\t\t\t\tlogGroupNamePrefix: logGroupName,\n\t\t\t});\n\n\t\t\tif (!(typeof currGroups === 'string') && currGroups.logGroups) {\n\t\t\t\tconst foundGroups = currGroups.logGroups.filter(\n\t\t\t\t\tgroup => group.logGroupName === logGroupName\n\t\t\t\t);\n\t\t\t\tif (foundGroups.length > 0) {\n\t\t\t\t\tthis._dataTracker.verifiedLogGroup = foundGroups[0];\n\n\t\t\t\t\treturn foundGroups[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified log group does not exist\n\t\t\t * and we should create it.\n\t\t\t */\n\t\t\tawait this.createLogGroup({ logGroupName });\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log group search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _validateLogStreamExists(\n\t\tlogGroupName: string,\n\t\tlogStreamName: string\n\t): Promise<LogStream> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currStreams = await this.getLogStreams({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamNamePrefix: logStreamName,\n\t\t\t});\n\n\t\t\tif (currStreams.logStreams) {\n\t\t\t\tconst foundStreams = currStreams.logStreams.filter(\n\t\t\t\t\tstream => stream.logStreamName === logStreamName\n\t\t\t\t);\n\t\t\t\tif (foundStreams.length > 0) {\n\t\t\t\t\tthis._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n\n\t\t\t\t\treturn foundStreams[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified stream does not\n\t\t\t * exist, and we should create it now.\n\t\t\t */\n\t\t\tawait this.createLogStream({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamName,\n\t\t\t});\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log stream search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _sendLogEvents(\n\t\tparams: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tlogger.debug('sending log events to stream - ', params.logStreamName);\n\t\t\tconst cmd = new PutLogEventsCommand(params);\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\n\t\t\treturn output;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log push: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t}\n\t}\n\n\tprivate _initCloudWatchLogs() {\n\t\treturn new CloudWatchLogsClient({\n\t\t\tregion: this._config.region,\n\t\t\tcredentials: this._config.credentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\tendpoint: this._config.endpoint,\n\t\t});\n\t}\n\n\tprivate async _ensureCredentials() {\n\t\treturn await Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for logging', cred);\n\t\t\t\tthis._config.credentials = cred;\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n\n\tprivate async _getNextSequenceToken(): Promise<string> {\n\t\tif (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n\t\t\treturn this._nextSequenceToken;\n\t\t}\n\n\t\t/**\n\t\t * A sequence token will not exist if any of the following are true:\n\t\t *   ...the log group does not exist\n\t\t *   ...the log stream does not exist\n\t\t *   ...the log stream does exist but has no logs written to it yet\n\t\t */\n\t\ttry {\n\t\t\tawait this._validateLogGroupExistsAndCreate(this._config.logGroupName);\n\n\t\t\tthis._nextSequenceToken = undefined;\n\n\t\t\tconst logStream = await this._validateLogStreamExists(\n\t\t\t\tthis._config.logGroupName,\n\t\t\t\tthis._config.logStreamName\n\t\t\t);\n\n\t\t\tif (logStream) {\n\t\t\t\tthis._nextSequenceToken = logStream.uploadSequenceToken;\n\t\t\t}\n\n\t\t\treturn this._nextSequenceToken;\n\t\t} catch (err) {\n\t\t\tlogger.error(`failure while getting next sequence token: ${err}`);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _safeUploadLogEvents(): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\t/**\n\t\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t\t * We need to track both the size of each event and the total size of the batch\n\t\t\t * of logs.\n\t\t\t *\n\t\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t\t */\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tconst logBatch =\n\t\t\t\tthis._currentLogBatch.length === 0\n\t\t\t\t\t? this._getBufferedBatchOfLogs()\n\t\t\t\t\t: this._currentLogBatch;\n\n\t\t\tconst putLogsPayload: PutLogEventsCommandInput = {\n\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\tlogEvents: logBatch,\n\t\t\t\tsequenceToken: seqToken,\n\t\t\t};\n\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\t\t\tconst sendLogEventsResponse = await this._sendLogEvents(putLogsPayload);\n\n\t\t\tthis._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsResponse;\n\t\t} catch (err) {\n\t\t\tlogger.error(`error during _safeUploadLogEvents: ${err}`);\n\n\t\t\tif (RETRY_ERROR_CODES.includes(err.name)) {\n\t\t\t\tthis._getNewSequenceTokenAndSubmit({\n\t\t\t\t\tlogEvents: this._currentLogBatch,\n\t\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getBufferedBatchOfLogs(): InputLogEvent[] {\n\t\t/**\n\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t * We need to track both the size of each event and the total size of the batch\n\t\t * of logs.\n\t\t *\n\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t */\n\t\tlet currentEventIdx = 0;\n\t\tlet totalByteSize = 0;\n\n\t\twhile (currentEventIdx < this._dataTracker.logEvents.length) {\n\t\t\tconst currentEvent = this._dataTracker.logEvents[currentEventIdx];\n\t\t\tconst eventSize = currentEvent\n\t\t\t\t? new TextEncoder().encode(currentEvent.message).length +\n\t\t\t\t  AWS_CLOUDWATCH_BASE_BUFFER_SIZE\n\t\t\t\t: 0;\n\t\t\tif (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n\t\t\t\tconst errString = `Log entry exceeds maximum size for CloudWatch logs. Log size: ${eventSize}. Truncating log message.`;\n\t\t\t\tlogger.warn(errString);\n\n\t\t\t\tcurrentEvent.message = currentEvent.message.substring(0, eventSize);\n\t\t\t}\n\n\t\t\tif (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)\n\t\t\t\tbreak;\n\t\t\ttotalByteSize += eventSize;\n\t\t\tcurrentEventIdx++;\n\t\t}\n\n\t\tthis._currentLogBatch = this._dataTracker.logEvents.splice(\n\t\t\t0,\n\t\t\tcurrentEventIdx\n\t\t);\n\n\t\treturn this._currentLogBatch;\n\t}\n\n\tprivate async _getNewSequenceTokenAndSubmit(\n\t\tpayload: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tthis._nextSequenceToken = undefined;\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tpayload.sequenceToken = seqToken;\n\t\t\tconst sendLogEventsRepsonse = await this._sendLogEvents(payload);\n\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsRepsonse;\n\t\t} catch (err) {\n\t\t\tlogger.error(\n\t\t\t\t`error when retrying log submission with new sequence token: ${err}`\n\t\t\t);\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate _initiateLogPushInterval(): void {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\n\t\tthis._timer = setInterval(async () => {\n\t\t\ttry {\n\t\t\t\tif (this._getDocUploadPermissibility()) {\n\t\t\t\t\tawait this._safeUploadLogEvents();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error(\n\t\t\t\t\t`error when calling _safeUploadLogEvents in the timer interval - ${err}`\n\t\t\t\t);\n\t\t\t}\n\t\t}, 2000);\n\t}\n\n\tprivate _getDocUploadPermissibility(): boolean {\n\t\treturn (\n\t\t\t(this._dataTracker.logEvents.length !== 0 ||\n\t\t\t\tthis._currentLogBatch.length !== 0) &&\n\t\t\t!this._dataTracker.eventUploadInProgress\n\t\t);\n\t}\n}\n\nexport { AWSCloudWatchProvider };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}