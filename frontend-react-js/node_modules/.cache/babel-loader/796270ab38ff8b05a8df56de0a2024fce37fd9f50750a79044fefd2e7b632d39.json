{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateDNSHostLabel, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateS3Service, validateService } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function (options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n    baseHostname = options.baseHostname,\n    dualstackEndpoint = options.dualstackEndpoint,\n    accelerateEndpoint = options.accelerateEndpoint;\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n  return isBucketNameOptions(options) ?\n  // Construct endpoint when bucketName is a string referring to a bucket name\n  getEndpointFromBucketName(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  })) :\n  // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n  getEndpointFromArn(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  }));\n};\nvar getEndpointFromArn = function (options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n    baseHostname = options.baseHostname;\n  var _a = __read(isCustomEndpoint ? [options.clientRegion, baseHostname] :\n    // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n    getSuffixForArnEndpoint(baseHostname), 2),\n    clientRegion = _a[0],\n    hostnameSuffix = _a[1];\n  var pathStyleEndpoint = options.pathStyleEndpoint,\n    _b = options.dualstackEndpoint,\n    dualstackEndpoint = _b === void 0 ? false : _b,\n    _c = options.accelerateEndpoint,\n    accelerateEndpoint = _c === void 0 ? false : _c,\n    _d = options.tlsCompatible,\n    tlsCompatible = _d === void 0 ? true : _d,\n    useArnRegion = options.useArnRegion,\n    bucketName = options.bucketName,\n    _e = options.clientPartition,\n    clientPartition = _e === void 0 ? \"aws\" : _e,\n    _f = options.clientSigningRegion,\n    clientSigningRegion = _f === void 0 ? clientRegion : _f;\n  validateArnEndpointOptions({\n    pathStyleEndpoint: pathStyleEndpoint,\n    accelerateEndpoint: accelerateEndpoint,\n    tlsCompatible: tlsCompatible\n  });\n  // Validate and parse the ARN supplied as a bucket name\n  var service = bucketName.service,\n    partition = bucketName.partition,\n    accountId = bucketName.accountId,\n    region = bucketName.region,\n    resource = bucketName.resource;\n  validateService(service);\n  validatePartition(partition, {\n    clientPartition: clientPartition\n  });\n  validateAccountId(accountId);\n  validateRegion(region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion\n  });\n  var _g = getArnResources(resource),\n    accesspointName = _g.accesspointName,\n    outpostId = _g.outpostId;\n  validateDNSHostLabel(accesspointName + \"-\" + accountId, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? region : clientRegion;\n  var signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, {\n      tlsCompatible: tlsCompatible\n    });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    var hostnamePrefix_1 = accesspointName + \"-\" + accountId + \".\" + outpostId;\n    return {\n      bucketEndpoint: true,\n      hostname: \"\" + hostnamePrefix_1 + (isCustomEndpoint ? \"\" : \".s3-outposts.\" + endpointRegion) + \".\" + hostnameSuffix,\n      signingRegion: signingRegion,\n      signingService: \"s3-outposts\"\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  var hostnamePrefix = accesspointName + \"-\" + accountId;\n  return {\n    bucketEndpoint: true,\n    hostname: \"\" + hostnamePrefix + (isCustomEndpoint ? \"\" : \".s3-accesspoint\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + endpointRegion) + \".\" + hostnameSuffix,\n    signingRegion: signingRegion\n  };\n};\nvar getEndpointFromBucketName = function (_a) {\n  var _b = _a.accelerateEndpoint,\n    accelerateEndpoint = _b === void 0 ? false : _b,\n    region = _a.clientRegion,\n    baseHostname = _a.baseHostname,\n    bucketName = _a.bucketName,\n    _c = _a.dualstackEndpoint,\n    dualstackEndpoint = _c === void 0 ? false : _c,\n    _d = _a.pathStyleEndpoint,\n    pathStyleEndpoint = _d === void 0 ? false : _d,\n    _e = _a.tlsCompatible,\n    tlsCompatible = _e === void 0 ? true : _e,\n    _f = _a.isCustomEndpoint,\n    isCustomEndpoint = _f === void 0 ? false : _f;\n  var _g = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2),\n    clientRegion = _g[0],\n    hostnameSuffix = _g[1];\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix : baseHostname\n    };\n  }\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix;\n  }\n  return {\n    bucketEndpoint: true,\n    hostname: bucketName + \".\" + baseHostname\n  };\n};","map":{"version":3,"mappings":"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","names":["DOT_PATTERN","getArnResources","getSuffix","getSuffixForArnEndpoint","isBucketNameOptions","isDnsCompatibleBucketName","validateAccountId","validateArnEndpointOptions","validateDNSHostLabel","validateNoDualstack","validateNoFIPS","validateOutpostService","validatePartition","validateRegion","validateS3Service","validateService","bucketHostname","options","baseHostname","dualstackEndpoint","accelerateEndpoint","isCustomEndpoint","Error","getEndpointFromBucketName","getEndpointFromArn","clientRegion","hostnameSuffix","_b","_c","_d","tlsCompatible","useArnRegion","bucketName","_e","clientPartition","_f","clientSigningRegion","pathStyleEndpoint","partition","accountId","region","resource","service","accesspointName","outpostId","endpointRegion","signingRegion","hostnamePrefix_1","bucketEndpoint","hostname","signingService","hostnamePrefix","_a","test"],"sources":["/frontend-react-js/node_modules/@aws-sdk/middleware-bucket-endpoint/src/bucketHostname.ts"],"sourcesContent":["import {\n  ArnHostnameParams,\n  BucketHostnameParams,\n  DOT_PATTERN,\n  getArnResources,\n  getSuffix,\n  getSuffixForArnEndpoint,\n  isBucketNameOptions,\n  isDnsCompatibleBucketName,\n  validateAccountId,\n  validateArnEndpointOptions,\n  validateDNSHostLabel,\n  validateNoDualstack,\n  validateNoFIPS,\n  validateOutpostService,\n  validatePartition,\n  validateRegion,\n  validateS3Service,\n  validateService,\n} from \"./bucketHostnameUtils\";\n\nexport interface BucketHostname {\n  hostname: string;\n  bucketEndpoint: boolean;\n  signingRegion?: string;\n  signingService?: string;\n}\n\nexport const bucketHostname = (options: BucketHostnameParams | ArnHostnameParams): BucketHostname => {\n  const { isCustomEndpoint, baseHostname, dualstackEndpoint, accelerateEndpoint } = options;\n\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n\n  return isBucketNameOptions(options)\n    ? // Construct endpoint when bucketName is a string referring to a bucket name\n      getEndpointFromBucketName({ ...options, isCustomEndpoint })\n    : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n      getEndpointFromArn({ ...options, isCustomEndpoint });\n};\n\nconst getEndpointFromArn = (options: ArnHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const { isCustomEndpoint, baseHostname } = options;\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint\n    ? [options.clientRegion, baseHostname]\n    : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n      getSuffixForArnEndpoint(baseHostname);\n\n  const {\n    pathStyleEndpoint,\n    dualstackEndpoint = false,\n    accelerateEndpoint = false,\n    tlsCompatible = true,\n    useArnRegion,\n    bucketName,\n    clientPartition = \"aws\",\n    clientSigningRegion = clientRegion,\n  } = options;\n\n  validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n\n  // Validate and parse the ARN supplied as a bucket name\n  const { service, partition, accountId, region, resource } = bucketName;\n  validateService(service);\n  validatePartition(partition, { clientPartition });\n  validateAccountId(accountId);\n  validateRegion(region, { useArnRegion, clientRegion, clientSigningRegion });\n  const { accesspointName, outpostId } = getArnResources(resource);\n  validateDNSHostLabel(`${accesspointName}-${accountId}`, { tlsCompatible });\n\n  const endpointRegion = useArnRegion ? region : clientRegion;\n  const signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, { tlsCompatible });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    const hostnamePrefix = `${accesspointName}-${accountId}.${outpostId}`;\n    return {\n      bucketEndpoint: true,\n      hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,\n      signingRegion,\n      signingService: \"s3-outposts\",\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  const hostnamePrefix = `${accesspointName}-${accountId}`;\n  return {\n    bucketEndpoint: true,\n    hostname: `${hostnamePrefix}${\n      isCustomEndpoint ? \"\" : `.s3-accesspoint${dualstackEndpoint ? \".dualstack\" : \"\"}.${endpointRegion}`\n    }.${hostnameSuffix}`,\n    signingRegion,\n  };\n};\n\nconst getEndpointFromBucketName = ({\n  accelerateEndpoint = false,\n  clientRegion: region,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true,\n  isCustomEndpoint = false,\n}: BucketHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}