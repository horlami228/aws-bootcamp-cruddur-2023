{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __read, __spread } from \"tslib\";\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Hub');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nfunction isLegacyCallback(callback) {\n  return callback.onHubCapsule !== undefined;\n}\nvar HubClass = /** @class */function () {\n  function HubClass(name) {\n    this.listeners = [];\n    this.patterns = [];\n    this.protectedChannels = ['core', 'auth', 'api', 'analytics', 'interactions', 'pubsub', 'storage', 'ui', 'xr'];\n    this.name = name;\n  }\n  /**\n   * Used internally to remove a Hub listener.\n   *\n   * @remarks\n   * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.\n   */\n  HubClass.prototype._remove = function (channel, listener) {\n    if (channel instanceof RegExp) {\n      var pattern_1 = this.patterns.find(function (_a) {\n        var pattern = _a.pattern;\n        return pattern.source === channel.source;\n      });\n      if (!pattern_1) {\n        logger.warn(\"No listeners for \" + channel);\n        return;\n      }\n      this.patterns = __spread(this.patterns.filter(function (x) {\n        return x !== pattern_1;\n      }));\n    } else {\n      var holder = this.listeners[channel];\n      if (!holder) {\n        logger.warn(\"No listeners for \" + channel);\n        return;\n      }\n      this.listeners[channel] = __spread(holder.filter(function (_a) {\n        var callback = _a.callback;\n        return callback !== listener;\n      }));\n    }\n  };\n  /**\n   * @deprecated Instead of calling Hub.remove, call the result of Hub.listen.\n   */\n  HubClass.prototype.remove = function (channel, listener) {\n    this._remove(channel, listener);\n  };\n  /**\n   * Used to send a Hub event.\n   *\n   * @param channel - The channel on which the event will be broadcast\n   * @param payload - The HubPayload\n   * @param source  - The source of the event; defaults to ''\n   * @param ampSymbol - Symbol used to determine if the event is dispatched internally on a protected channel\n   *\n   */\n  HubClass.prototype.dispatch = function (channel, payload, source, ampSymbol) {\n    if (source === void 0) {\n      source = '';\n    }\n    if (this.protectedChannels.indexOf(channel) > -1) {\n      var hasAccess = ampSymbol === AMPLIFY_SYMBOL;\n      if (!hasAccess) {\n        logger.warn(\"WARNING: \" + channel + \" is protected and dispatching on it can have unintended consequences\");\n      }\n    }\n    var capsule = {\n      channel: channel,\n      payload: __assign({}, payload),\n      source: source,\n      patternInfo: []\n    };\n    try {\n      this._toListeners(capsule);\n    } catch (e) {\n      logger.error(e);\n    }\n  };\n  /**\n   * Used to listen for Hub events.\n   *\n   * @param channel - The channel on which to listen\n   * @param callback - The callback to execute when an event is received on the specified channel\n   * @param listenerName - The name of the listener; defaults to 'noname'\n   * @returns A function which can be called to cancel the listener.\n   *\n   */\n  HubClass.prototype.listen = function (channel, callback, listenerName) {\n    var _this = this;\n    if (listenerName === void 0) {\n      listenerName = 'noname';\n    }\n    var cb;\n    // Check for legacy onHubCapsule callback for backwards compatability\n    if (isLegacyCallback(callback)) {\n      logger.warn(\"WARNING onHubCapsule is Deprecated. Please pass in a callback.\");\n      cb = callback.onHubCapsule.bind(callback);\n    } else if (typeof callback !== 'function') {\n      throw new Error('No callback supplied to Hub');\n    } else {\n      cb = callback;\n    }\n    if (channel instanceof RegExp) {\n      this.patterns.push({\n        pattern: channel,\n        callback: cb\n      });\n    } else {\n      var holder = this.listeners[channel];\n      if (!holder) {\n        holder = [];\n        this.listeners[channel] = holder;\n      }\n      holder.push({\n        name: listenerName,\n        callback: cb\n      });\n    }\n    return function () {\n      _this._remove(channel, cb);\n    };\n  };\n  HubClass.prototype._toListeners = function (capsule) {\n    var channel = capsule.channel,\n      payload = capsule.payload;\n    var holder = this.listeners[channel];\n    if (holder) {\n      holder.forEach(function (listener) {\n        logger.debug(\"Dispatching to \" + channel + \" with \", payload);\n        try {\n          listener.callback(capsule);\n        } catch (e) {\n          logger.error(e);\n        }\n      });\n    }\n    if (this.patterns.length > 0) {\n      if (!payload.message) {\n        logger.warn(\"Cannot perform pattern matching without a message key\");\n        return;\n      }\n      var payloadStr_1 = payload.message;\n      this.patterns.forEach(function (pattern) {\n        var match = payloadStr_1.match(pattern.pattern);\n        if (match) {\n          var _a = __read(match),\n            groups = _a.slice(1);\n          var dispatchingCapsule = __assign(__assign({}, capsule), {\n            patternInfo: groups\n          });\n          try {\n            pattern.callback(dispatchingCapsule);\n          } catch (e) {\n            logger.error(e);\n          }\n        }\n      });\n    }\n  };\n  return HubClass;\n}();\nexport { HubClass };\n/*We export a __default__ instance of HubClass to use it as a\npseudo Singleton for the main messaging bus, however you can still create\nyour own instance of HubClass() for a separate \"private bus\" of events.*/\nexport var Hub = new HubClass('__default__');","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","logger","AMPLIFY_SYMBOL","Symbol","for","isLegacyCallback","callback","onHubCapsule","undefined","name","HubClass","channel","listener","RegExp","pattern_1","patterns","find","_a","pattern","source","warn","filter","holder","listeners","_remove","payload","ampSymbol","protectedChannels","indexOf","hasAccess","capsule","patternInfo","_toListeners","e","error","listenerName","cb","bind","Error","push","_this","forEach","debug","length","message","payloadStr_1","match","groups","dispatchingCapsule","Hub"],"sources":["/frontend-react-js/node_modules/@aws-amplify/core/src/Hub.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ConsoleLogger as Logger } from './Logger';\n\nconst logger = new Logger('Hub');\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\ninterface IPattern {\n\tpattern: RegExp;\n\tcallback: HubCallback;\n}\n\ninterface IListener {\n\tname: string;\n\tcallback: HubCallback;\n}\n\nexport type HubCapsule = {\n\tchannel: string;\n\tpayload: HubPayload;\n\tsource: string;\n\tpatternInfo?: string[];\n};\n\nexport type HubPayload = {\n\tevent: string;\n\tdata?: any;\n\tmessage?: string;\n};\n\nexport type HubCallback = (capsule: HubCapsule) => void;\n\nexport type LegacyCallback = { onHubCapsule: HubCallback };\n\nfunction isLegacyCallback(callback: any): callback is LegacyCallback {\n\treturn (<LegacyCallback>callback).onHubCapsule !== undefined;\n}\n\nexport class HubClass {\n\tname: string;\n\tprivate listeners: IListener[] = [];\n\tprivate patterns: IPattern[] = [];\n\n\tprotectedChannels = [\n\t\t'core',\n\t\t'auth',\n\t\t'api',\n\t\t'analytics',\n\t\t'interactions',\n\t\t'pubsub',\n\t\t'storage',\n\t\t'ui',\n\t\t'xr',\n\t];\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * Used internally to remove a Hub listener.\n\t *\n\t * @remarks\n\t * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.\n\t */\n\tprivate _remove(channel: string | RegExp, listener: HubCallback) {\n\t\tif (channel instanceof RegExp) {\n\t\t\tconst pattern = this.patterns.find(\n\t\t\t\t({ pattern }) => pattern.source === channel.source\n\t\t\t);\n\t\t\tif (!pattern) {\n\t\t\t\tlogger.warn(`No listeners for ${channel}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.patterns = [...this.patterns.filter(x => x !== pattern)];\n\t\t} else {\n\t\t\tconst holder = this.listeners[channel];\n\t\t\tif (!holder) {\n\t\t\t\tlogger.warn(`No listeners for ${channel}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.listeners[channel] = [\n\t\t\t\t...holder.filter(({ callback }) => callback !== listener),\n\t\t\t];\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated Instead of calling Hub.remove, call the result of Hub.listen.\n\t */\n\tremove(channel: string | RegExp, listener: HubCallback) {\n\t\tthis._remove(channel, listener);\n\t}\n\n\t/**\n\t * Used to send a Hub event.\n\t *\n\t * @param channel - The channel on which the event will be broadcast\n\t * @param payload - The HubPayload\n\t * @param source  - The source of the event; defaults to ''\n\t * @param ampSymbol - Symbol used to determine if the event is dispatched internally on a protected channel\n\t *\n\t */\n\tdispatch(\n\t\tchannel: string,\n\t\tpayload: HubPayload,\n\t\tsource: string = '',\n\t\tampSymbol?: Symbol\n\t) {\n\t\tif (this.protectedChannels.indexOf(channel) > -1) {\n\t\t\tconst hasAccess = ampSymbol === AMPLIFY_SYMBOL;\n\n\t\t\tif (!hasAccess) {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t`WARNING: ${channel} is protected and dispatching on it can have unintended consequences`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst capsule: HubCapsule = {\n\t\t\tchannel,\n\t\t\tpayload: { ...payload },\n\t\t\tsource,\n\t\t\tpatternInfo: [],\n\t\t};\n\n\t\ttry {\n\t\t\tthis._toListeners(capsule);\n\t\t} catch (e) {\n\t\t\tlogger.error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Used to listen for Hub events.\n\t *\n\t * @param channel - The channel on which to listen\n\t * @param callback - The callback to execute when an event is received on the specified channel\n\t * @param listenerName - The name of the listener; defaults to 'noname'\n\t * @returns A function which can be called to cancel the listener.\n\t *\n\t */\n\tlisten(\n\t\tchannel: string | RegExp,\n\t\tcallback?: HubCallback | LegacyCallback,\n\t\tlistenerName = 'noname'\n\t) {\n\t\tlet cb: HubCallback;\n\t\t// Check for legacy onHubCapsule callback for backwards compatability\n\t\tif (isLegacyCallback(callback)) {\n\t\t\tlogger.warn(\n\t\t\t\t`WARNING onHubCapsule is Deprecated. Please pass in a callback.`\n\t\t\t);\n\t\t\tcb = callback.onHubCapsule.bind(callback);\n\t\t} else if (typeof callback !== 'function') {\n\t\t\tthrow new Error('No callback supplied to Hub');\n\t\t} else {\n\t\t\tcb = callback;\n\t\t}\n\n\t\tif (channel instanceof RegExp) {\n\t\t\tthis.patterns.push({\n\t\t\t\tpattern: channel,\n\t\t\t\tcallback: cb,\n\t\t\t});\n\t\t} else {\n\t\t\tlet holder = this.listeners[channel];\n\n\t\t\tif (!holder) {\n\t\t\t\tholder = [];\n\t\t\t\tthis.listeners[channel] = holder;\n\t\t\t}\n\n\t\t\tholder.push({\n\t\t\t\tname: listenerName,\n\t\t\t\tcallback: cb,\n\t\t\t});\n\t\t}\n\n\t\treturn () => {\n\t\t\tthis._remove(channel, cb);\n\t\t};\n\t}\n\n\tprivate _toListeners(capsule: HubCapsule) {\n\t\tconst { channel, payload } = capsule;\n\t\tconst holder = this.listeners[channel];\n\n\t\tif (holder) {\n\t\t\tholder.forEach(listener => {\n\t\t\t\tlogger.debug(`Dispatching to ${channel} with `, payload);\n\t\t\t\ttry {\n\t\t\t\t\tlistener.callback(capsule);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this.patterns.length > 0) {\n\t\t\tif (!payload.message) {\n\t\t\t\tlogger.warn(`Cannot perform pattern matching without a message key`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst payloadStr = payload.message;\n\n\t\t\tthis.patterns.forEach(pattern => {\n\t\t\t\tconst match = payloadStr.match(pattern.pattern);\n\t\t\t\tif (match) {\n\t\t\t\t\tconst [, ...groups] = match;\n\t\t\t\t\tconst dispatchingCapsule: HubCapsule = {\n\t\t\t\t\t\t...capsule,\n\t\t\t\t\t\tpatternInfo: groups,\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpattern.callback(dispatchingCapsule);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.error(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\n/*We export a __default__ instance of HubClass to use it as a \npseudo Singleton for the main messaging bus, however you can still create\nyour own instance of HubClass() for a separate \"private bus\" of events.*/\nexport const Hub = new HubClass('__default__');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}