{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand, GetCredentialsForIdentityCommand } from '@aws-sdk/client-cognito-identity';\nimport { parseAWSExports } from './parseAWSExports';\nimport { Hub } from './Hub';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchCredentialsEvent = function (event, data, message) {\n  Hub.dispatch('core', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Credentials', AMPLIFY_SYMBOL);\n};\nvar CredentialsClass = /** @class */function () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers;\n    // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n    this._storage = this._config.storage;\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    dispatchCredentialsEvent('credentials_configured', null, \"Credentials has been configured successfully\");\n    return this._config;\n  };\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n  // currently we only store the guest identity in local storage\n  CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n    return \"\" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;\n  };\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n    return this._gettingCredPromise;\n  };\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2 /*return*/, Promise.resolve(cred)];\n            }\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              // If Auth module is not imported, do a best effort to get guest credentials\n              return [2 /*return*/, this._setCredentialsForGuest()];\n            }\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3 /*break*/, 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, Auth.currentUserPoolUser()];\n          case 2:\n            user_1 = _b.sent();\n            return [4 /*yield*/, Auth.currentSession()];\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4 /*yield*/, refreshRequest];\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n            return [3 /*break*/, 6];\n          case 5:\n            err_1 = _b.sent();\n            // should not throw because user might just be on guest access or is authenticated through federation\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3 /*break*/, 6];\n          case 6:\n            return [2 /*return*/, Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n      user = federatedInfo.user,\n      token = federatedInfo.token,\n      identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at;\n    // Make sure expires_at is in millis\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n    var refreshHandler = _a.refreshHandler,\n      provider = _a.provider,\n      user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000;\n    // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n      if (!isNetworkError) {\n        _this.clear();\n      }\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, identityPoolId, region, mandatorySignIn, identityId, _c, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) {\n              // If Credentials are not configured thru Auth module,\n              // doing best effort to check if the library was configured\n              this._config = Object.assign({}, this._config, parseAWSExports(this._config || {}).Auth);\n            }\n            _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn;\n            if (mandatorySignIn) {\n              return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];\n            }\n            _c = this;\n            return [4 /*yield*/, this._getGuestIdentityId()];\n          case 1:\n            identityId = _c._identityId = _d.sent();\n            cognitoClient = new CognitoIdentityClient({\n              region: region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            credentials = undefined;\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                        return [2 /*return*/, credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var credentialsProvider;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(e.name === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\")) return [3 /*break*/, 2];\n                      logger.debug('Failed to load guest credentials');\n                      return [4 /*yield*/, this._removeGuestIdentityId()];\n                    case 1:\n                      _a.sent();\n                      credentialsProvider = function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                                  IdentityPoolId: identityPoolId\n                                }))];\n                              case 1:\n                                IdentityId = _a.sent().IdentityId;\n                                this._identityId = IdentityId;\n                                cognitoIdentityParams = {\n                                  client: cognitoClient,\n                                  identityId: IdentityId\n                                };\n                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                return [2 /*return*/, credentialsFromCognitoIdentity()];\n                            }\n                          });\n                        });\n                      };\n                      credentials = credentialsProvider().catch(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            throw err;\n                          });\n                        });\n                      });\n                      return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)];\n                    case 2:\n                      return [2 /*return*/, e];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n      token = params.token,\n      identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    };\n    // Use custom provider url instead of the predefined ones\n    var domain = domains[provider] || provider;\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n      identityPoolId = _a.identityPoolId,\n      region = _a.region;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n      region = _a.region,\n      userPoolId = _a.userPoolId,\n      identityPoolId = _a.identityPoolId;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4 /*yield*/, this._getGuestIdentityId()];\n            case 1:\n              guestIdentityId = _c.sent();\n              if (!!guestIdentityId) return [3 /*break*/, 3];\n              return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n            case 2:\n              IdentityId = _c.sent().IdentityId;\n              generatedOrRetrievedIdentityId = IdentityId;\n              _c.label = 3;\n            case 3:\n              return [4 /*yield*/, cognitoClient.send(new GetCredentialsForIdentityCommand({\n                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                Logins: logins\n              }))];\n            case 4:\n              _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n              this._identityId = primaryIdentityId;\n              if (!guestIdentityId) return [3 /*break*/, 6];\n              // if guestIdentity is found and used by GetCredentialsForIdentity\n              // it will be linked to the logins provided, and disqualified as an unauth identity\n              logger.debug(\"The guest identity \" + guestIdentityId + \" has been successfully linked to the logins\");\n              if (guestIdentityId === primaryIdentityId) {\n                logger.debug(\"The guest identity \" + guestIdentityId + \" has become the primary identity\");\n              }\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              return [4 /*yield*/, this._removeGuestIdentityId()];\n            case 5:\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              _c.sent();\n              _c.label = 6;\n            case 6:\n              // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n              return [2 /*return*/, {\n                accessKeyId: AccessKeyId,\n                secretAccessKey: SecretKey,\n                sessionToken: SessionToken,\n                expiration: Expiration,\n                identityId: primaryIdentityId\n              }];\n          }\n        });\n      });\n    };\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n    var that = this;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n                if (!(source === 'guest')) return [3 /*break*/, 2];\n                return [4 /*yield*/, this._setGuestIdentityId(credentials.identityId)];\n              case 1:\n                _a.sent();\n                _a.label = 2;\n              case 2:\n                res(that._credentials);\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n        this._storage.removeItem('aws-amplify-federatedInfo');\n        return [2 /*return*/];\n      });\n    });\n  };\n  /* operations on local stored guest identity */\n  CredentialsClass.prototype._getGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n          case 3:\n            e_1 = _a.sent();\n            logger.debug('Failed to get the cached guest identityId', e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n            return [3 /*break*/, 4];\n          case 3:\n            e_2 = _a.sent();\n            logger.debug('Failed to cache guest identityId', e_2);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._removeGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId;\n      return __generator(this, function (_a) {\n        identityPoolId = this._config.identityPoolId;\n        logger.debug(\"removing \" + this._getCognitoIdentityIdStorageKey(identityPoolId) + \" from storage\");\n        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  return CredentialsClass;\n}();\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","StorageHelper","makeQuerablePromise","FacebookOAuth","GoogleOAuth","jitteredExponentialRetry","getAmplifyUserAgent","Amplify","fromCognitoIdentity","fromCognitoIdentityPool","CognitoIdentityClient","GetIdCommand","GetCredentialsForIdentityCommand","parseAWSExports","Hub","logger","CREDENTIALS_TTL","COGNITO_IDENTITY_KEY_PREFIX","AMPLIFY_SYMBOL","Symbol","for","dispatchCredentialsEvent","event","data","message","dispatch","config","undefined","configure","_refreshHandlers","refreshGoogleToken","refreshFacebookToken","CredentialsClass","_credentials_source","_config","Object","assign","refreshHandlers","_storage","storage","getStorage","_storageSync","Promise","resolve","debug","_pickupCredentials","identityPoolId","_gettingCredPromise","isPending","_keepAlive","cred","_credentials","_isExpired","_isPastTTL","_a","Auth","currentUserCredentials","_setCredentialsForGuest","currentUserPoolUser","user_1","_b","currentSession","session","refreshToken_1","refreshToken","refreshRequest","res","rej","refreshSession","err","err_1","federatedInfo","user","token","identity_id","expires_at","Date","getFullYear","that","getTime","_setCredentialsFromFederation","provider","_providerRefreshWithRetry","refreshHandler","clear","reject","MAX_DELAY_MS","then","_this","catch","isNetworkError","e","toLowerCase","lastIndexOf","length","credentials","ts","now","expiration","_nextCredentialsRefresh","region","mandatorySignIn","_c","_getGuestIdentityId","identityId","_identityId","_d","cognitoClient","customUserAgent","cognitoIdentityParams","client","credentialsProvider","send","IdentityPoolId","IdentityId","credentialsFromCognitoIdentity","_loadCredentials","name","_removeGuestIdentityId","params","domains","google","facebook","amazon","developer","domain","logins","idToken","getIdToken","getJwtToken","userPoolId","key","guestIdentityId","Logins","generatedOrRetrievedIdentityId","AccessKeyId","Expiration","SecretKey","SessionToken","primaryIdentityId","accessKeyId","secretAccessKey","sessionToken","source","authenticated","info","id","setItem","JSON","stringify","_setGuestIdentityId","_setCredentialsFromSession","removeItem","getItem","_getCognitoIdentityIdStorageKey","e_1","e_2","Credentials","register"],"sources":["/frontend-react-js/node_modules/@aws-amplify/core/src/Credentials.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { ICredentials } from './types';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport {\n\tfromCognitoIdentity,\n\tFromCognitoIdentityParameters,\n\tfromCognitoIdentityPool,\n\tFromCognitoIdentityPoolParameters,\n} from '@aws-sdk/credential-provider-cognito-identity';\nimport {\n\tCognitoIdentityClient,\n\tGetIdCommand,\n\tGetCredentialsForIdentityCommand,\n} from '@aws-sdk/client-cognito-identity';\nimport { CredentialProvider } from '@aws-sdk/types';\nimport { parseAWSExports } from './parseAWSExports';\nimport { Hub } from './Hub';\n\nconst logger = new Logger('Credentials');\n\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nconst COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchCredentialsEvent = (\n\tevent: string,\n\tdata: any,\n\tmessage: string\n) => {\n\tHub.dispatch('core', { event, data, message }, 'Credentials', AMPLIFY_SYMBOL);\n};\n\nexport class CredentialsClass {\n\tprivate _config;\n\tprivate _credentials;\n\tprivate _credentials_source;\n\tprivate _gettingCredPromise = null;\n\tprivate _refreshHandlers = {};\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate _identityId;\n\tprivate _nextCredentialsRefresh: Number;\n\n\t// Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\tAuth = undefined;\n\n\tconstructor(config) {\n\t\tthis.configure(config);\n\t\tthis._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n\t\tthis._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Credentials';\n\t}\n\n\tpublic getCredSource() {\n\t\treturn this._credentials_source;\n\t}\n\n\tpublic configure(config) {\n\t\tif (!config) return this._config || {};\n\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\tconst { refreshHandlers } = this._config;\n\t\t// If the developer has provided an object of refresh handlers,\n\t\t// then we can merge the provided handlers with the current handlers.\n\t\tif (refreshHandlers) {\n\t\t\tthis._refreshHandlers = {\n\t\t\t\t...this._refreshHandlers,\n\t\t\t\t...refreshHandlers,\n\t\t\t};\n\t\t}\n\n\t\tthis._storage = this._config.storage;\n\n\t\tif (!this._storage) {\n\t\t\tthis._storage = new StorageHelper().getStorage();\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\tdispatchCredentialsEvent(\n\t\t\t'credentials_configured',\n\t\t\tnull,\n\t\t\t`Credentials has been configured successfully`\n\t\t);\n\n\t\treturn this._config;\n\t}\n\n\tpublic get() {\n\t\tlogger.debug('getting credentials');\n\t\treturn this._pickupCredentials();\n\t}\n\n\t// currently we only store the guest identity in local storage\n\tprivate _getCognitoIdentityIdStorageKey(identityPoolId: string) {\n\t\treturn `${COGNITO_IDENTITY_KEY_PREFIX}${identityPoolId}`;\n\t}\n\n\tprivate _pickupCredentials() {\n\t\tlogger.debug('picking up credentials');\n\t\tif (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n\t\t\tlogger.debug('getting new cred promise');\n\t\t\tthis._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n\t\t} else {\n\t\t\tlogger.debug('getting old cred promise');\n\t\t}\n\t\treturn this._gettingCredPromise;\n\t}\n\n\tprivate async _keepAlive() {\n\t\tlogger.debug('checking if credentials exists and not expired');\n\t\tconst cred = this._credentials;\n\t\tif (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n\t\t\tlogger.debug('credentials not changed and not expired, directly return');\n\t\t\treturn Promise.resolve(cred);\n\t\t}\n\n\t\tlogger.debug('need to get a new credential or refresh the existing one');\n\n\t\t// Some use-cases don't require Auth for signing in, but use Credentials for guest users (e.g. Analytics)\n\t\t// Prefer locally scoped `Auth`, but fallback to registered `Amplify.Auth` global otherwise.\n\t\tconst { Auth = Amplify.Auth } = this;\n\n\t\tif (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n\t\t\t// If Auth module is not imported, do a best effort to get guest credentials\n\t\t\treturn this._setCredentialsForGuest();\n\t\t}\n\n\t\tif (!this._isExpired(cred) && this._isPastTTL()) {\n\t\t\tlogger.debug('ttl has passed but token is not yet expired');\n\t\t\ttry {\n\t\t\t\tconst user = await Auth.currentUserPoolUser();\n\t\t\t\tconst session = await Auth.currentSession();\n\t\t\t\tconst refreshToken = session.refreshToken;\n\t\t\t\tconst refreshRequest = new Promise((res, rej) => {\n\t\t\t\t\tuser.refreshSession(refreshToken, (err, data) => {\n\t\t\t\t\t\treturn err ? rej(err) : res(data);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tawait refreshRequest; // note that rejections will be caught and handled in the catch block.\n\t\t\t} catch (err) {\n\t\t\t\t// should not throw because user might just be on guest access or is authenticated through federation\n\t\t\t\tlogger.debug('Error attempting to refreshing the session', err);\n\t\t\t}\n\t\t}\n\t\treturn Auth.currentUserCredentials();\n\t}\n\n\tpublic refreshFederatedToken(federatedInfo) {\n\t\tlogger.debug('Getting federated credentials');\n\t\tconst { provider, user, token, identity_id } = federatedInfo;\n\t\tlet { expires_at } = federatedInfo;\n\n\t\t// Make sure expires_at is in millis\n\t\texpires_at =\n\t\t\tnew Date(expires_at).getFullYear() === 1970\n\t\t\t\t? expires_at * 1000\n\t\t\t\t: expires_at;\n\n\t\tconst that = this;\n\t\tlogger.debug('checking if federated jwt token expired');\n\t\tif (expires_at > new Date().getTime()) {\n\t\t\t// if not expired\n\t\t\tlogger.debug('token not expired');\n\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\tuser,\n\t\t\t\tidentity_id,\n\t\t\t\texpires_at,\n\t\t\t});\n\t\t} else {\n\t\t\t// if refresh handler exists\n\t\t\tif (\n\t\t\t\tthat._refreshHandlers[provider] &&\n\t\t\t\ttypeof that._refreshHandlers[provider] === 'function'\n\t\t\t) {\n\t\t\t\tlogger.debug('getting refreshed jwt token from federation provider');\n\t\t\t\treturn this._providerRefreshWithRetry({\n\t\t\t\t\trefreshHandler: that._refreshHandlers[provider],\n\t\t\t\t\tprovider,\n\t\t\t\t\tuser,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug('no refresh handler for provider:', provider);\n\t\t\t\tthis.clear();\n\t\t\t\treturn Promise.reject('no refresh handler for provider');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _providerRefreshWithRetry({ refreshHandler, provider, user }) {\n\t\tconst MAX_DELAY_MS = 10 * 1000;\n\t\t// refreshHandler will retry network errors, otherwise it will\n\t\t// return NonRetryableError to break out of jitteredExponentialRetry\n\t\treturn jitteredExponentialRetry<any>(refreshHandler, [], MAX_DELAY_MS)\n\t\t\t.then(data => {\n\t\t\t\tlogger.debug('refresh federated token sucessfully', data);\n\t\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\t\tprovider,\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tuser,\n\t\t\t\t\tidentity_id: data.identity_id,\n\t\t\t\t\texpires_at: data.expires_at,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconst isNetworkError =\n\t\t\t\t\ttypeof e === 'string' &&\n\t\t\t\t\te.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n\t\t\t\tif (!isNetworkError) {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('refresh federated token failed', e);\n\t\t\t\treturn Promise.reject('refreshing federation token failed: ' + e);\n\t\t\t});\n\t}\n\n\tprivate _isExpired(credentials): boolean {\n\t\tif (!credentials) {\n\t\t\tlogger.debug('no credentials for expiration check');\n\t\t\treturn true;\n\t\t}\n\t\tlogger.debug('are these credentials expired?', credentials);\n\t\tconst ts = Date.now();\n\n\t\t/* returns date object.\n\t\t\thttps://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n\t\t*/\n\t\tconst { expiration } = credentials;\n\t\treturn expiration.getTime() <= ts;\n\t}\n\n\tprivate _isPastTTL(): boolean {\n\t\treturn this._nextCredentialsRefresh <= Date.now();\n\t}\n\n\tprivate async _setCredentialsForGuest() {\n\t\tlogger.debug('setting credentials for guest');\n\t\tif (!this._config?.identityPoolId) {\n\t\t\t// If Credentials are not configured thru Auth module,\n\t\t\t// doing best effort to check if the library was configured\n\t\t\tthis._config = Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis._config,\n\t\t\t\tparseAWSExports(this._config || {}).Auth\n\t\t\t);\n\t\t}\n\t\tconst { identityPoolId, region, mandatorySignIn } = this._config;\n\n\t\tif (mandatorySignIn) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'cannot get guest credentials when mandatory signin enabled'\n\t\t\t);\n\t\t}\n\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t}\n\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst identityId = (this._identityId = await this._getGuestIdentityId());\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identityId) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\t/*\n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t\t*/\n\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t};\n\n\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t);\n\n\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t};\n\n\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadCredentials(credentials, 'guest', false, null)\n\t\t\t.then(res => {\n\t\t\t\treturn res;\n\t\t\t})\n\t\t\t.catch(async e => {\n\t\t\t\t// If identity id is deleted in the console, we make one attempt to recreate it\n\t\t\t\t// and remove existing id from cache.\n\t\t\t\tif (\n\t\t\t\t\te.name === 'ResourceNotFoundException' &&\n\t\t\t\t\te.message === `Identity '${identityId}' not found.`\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('Failed to load guest credentials');\n\t\t\t\t\tawait this._removeGuestIdentityId();\n\n\t\t\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t\t\t};\n\n\t\t\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._loadCredentials(credentials, 'guest', false, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _setCredentialsFromFederation(params) {\n\t\tconst { provider, token, identity_id } = params;\n\t\tconst domains = {\n\t\t\tgoogle: 'accounts.google.com',\n\t\t\tfacebook: 'graph.facebook.com',\n\t\t\tamazon: 'www.amazon.com',\n\t\t\tdeveloper: 'cognito-identity.amazonaws.com',\n\t\t};\n\n\t\t// Use custom provider url instead of the predefined ones\n\t\tconst domain = domains[provider] || provider;\n\t\tif (!domain) {\n\t\t\treturn Promise.reject('You must specify a federated provider');\n\t\t}\n\n\t\tconst logins = {};\n\t\tlogins[domain] = token;\n\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identity_id) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId: identity_id,\n\t\t\t\tlogins,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityPoolParameters = {\n\t\t\t\tlogins,\n\t\t\t\tidentityPoolId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n\t\t}\n\t\treturn this._loadCredentials(credentials, 'federated', true, params);\n\t}\n\n\tprivate _setCredentialsFromSession(session): Promise<ICredentials> {\n\t\tlogger.debug('set credentials from session');\n\t\tconst idToken = session.getIdToken().getJwtToken();\n\t\tconst { region, userPoolId, identityPoolId } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\t\tconst key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n\t\tconst logins = {};\n\t\tlogins[key] = idToken;\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t/* \n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t*/\n\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t// try to fetch the local stored guest identity, if found, we will associate it with the logins\n\t\t\tconst guestIdentityId = await this._getGuestIdentityId();\n\n\t\t\tlet generatedOrRetrievedIdentityId;\n\t\t\tif (!guestIdentityId) {\n\t\t\t\t// for a first-time user, this will return a brand new identity\n\t\t\t\t// for a returning user, this will retrieve the previous identity assocaited with the logins\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\tLogins: logins,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tgeneratedOrRetrievedIdentityId = IdentityId;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tCredentials: { AccessKeyId, Expiration, SecretKey, SessionToken },\n\t\t\t\t// single source of truth for the primary identity associated with the logins\n\t\t\t\t// only if a guest identity is used for a first-time user, that guest identity will become its primary identity\n\t\t\t\tIdentityId: primaryIdentityId,\n\t\t\t} = await cognitoClient.send(\n\t\t\t\tnew GetCredentialsForIdentityCommand({\n\t\t\t\t\tIdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n\t\t\t\t\tLogins: logins,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis._identityId = primaryIdentityId;\n\t\t\tif (guestIdentityId) {\n\t\t\t\t// if guestIdentity is found and used by GetCredentialsForIdentity\n\t\t\t\t// it will be linked to the logins provided, and disqualified as an unauth identity\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`The guest identity ${guestIdentityId} has been successfully linked to the logins`\n\t\t\t\t);\n\t\t\t\tif (guestIdentityId === primaryIdentityId) {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t`The guest identity ${guestIdentityId} has become the primary identity`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\t\t\t\tawait this._removeGuestIdentityId();\n\t\t\t}\n\n\t\t\t// https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n\t\t\treturn {\n\t\t\t\taccessKeyId: AccessKeyId,\n\t\t\t\tsecretAccessKey: SecretKey,\n\t\t\t\tsessionToken: SessionToken,\n\t\t\t\texpiration: Expiration,\n\t\t\t\tidentityId: primaryIdentityId,\n\t\t\t};\n\t\t};\n\n\t\tconst credentials = credentialsProvider().catch(async err => {\n\t\t\tthrow err;\n\t\t});\n\n\t\treturn this._loadCredentials(credentials, 'userPool', true, null);\n\t}\n\n\tprivate _loadCredentials(\n\t\tcredentials,\n\t\tsource,\n\t\tauthenticated,\n\t\tinfo\n\t): Promise<ICredentials> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tcredentials\n\t\t\t\t.then(async credentials => {\n\t\t\t\t\tlogger.debug('Load credentials successfully', credentials);\n\t\t\t\t\tif (this._identityId && !credentials.identityId) {\n\t\t\t\t\t\tcredentials['identityId'] = this._identityId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthat._credentials = credentials;\n\t\t\t\t\tthat._credentials.authenticated = authenticated;\n\t\t\t\t\tthat._credentials_source = source;\n\t\t\t\t\tthat._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\t\t\t\t\tif (source === 'federated') {\n\t\t\t\t\t\tconst user = Object.assign(\n\t\t\t\t\t\t\t{ id: this._credentials.identityId },\n\t\t\t\t\t\t\tinfo.user\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst { provider, token, expires_at, identity_id } = info;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t\t'aws-amplify-federatedInfo',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('Failed to put federated info into auth storage', e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (source === 'guest') {\n\t\t\t\t\t\tawait this._setGuestIdentityId(credentials.identityId);\n\t\t\t\t\t}\n\t\t\t\t\tres(that._credentials);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to load credentials', credentials);\n\t\t\t\t\t\tlogger.debug('Error loading credentials', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic set(params, source): Promise<ICredentials> {\n\t\tif (source === 'session') {\n\t\t\treturn this._setCredentialsFromSession(params);\n\t\t} else if (source === 'federation') {\n\t\t\treturn this._setCredentialsFromFederation(params);\n\t\t} else if (source === 'guest') {\n\t\t\treturn this._setCredentialsForGuest();\n\t\t} else {\n\t\t\tlogger.debug('no source specified for setting credentials');\n\t\t\treturn Promise.reject('invalid source');\n\t\t}\n\t}\n\n\tpublic async clear() {\n\t\tthis._credentials = null;\n\t\tthis._credentials_source = null;\n\t\tlogger.debug('removing aws-amplify-federatedInfo from storage');\n\t\tthis._storage.removeItem('aws-amplify-federatedInfo');\n\t}\n\n\t/* operations on local stored guest identity */\n\tprivate async _getGuestIdentityId(): Promise<string> {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\treturn this._storage.getItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to get the cached guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _setGuestIdentityId(identityId: string) {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\tthis._storage.setItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId),\n\t\t\t\tidentityId\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to cache guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _removeGuestIdentityId() {\n\t\tconst { identityPoolId } = this._config;\n\t\tlogger.debug(\n\t\t\t`removing ${this._getCognitoIdentityIdStorageKey(\n\t\t\t\tidentityPoolId\n\t\t\t)} from storage`\n\t\t);\n\t\tthis._storage.removeItem(\n\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t);\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic shear(credentials) {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n}\n\nexport const Credentials = new CredentialsClass(null);\n\nAmplify.register(Credentials);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}