{"ast":null,"code":"import { __values } from \"tslib\";\nimport { browserOrNode, isWebWorker } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nvar ReachabilityNavigator = /** @class */function () {\n  function ReachabilityNavigator() {}\n  ReachabilityNavigator.prototype.networkMonitor = function (netInfo) {\n    if (browserOrNode().isNode) {\n      return Observable.from([{\n        online: true\n      }]);\n    }\n    var globalObj = isWebWorker() ? self : window;\n    return new Observable(function (observer) {\n      observer.next({\n        online: globalObj.navigator.onLine\n      });\n      var notifyOnline = function () {\n        return observer.next({\n          online: true\n        });\n      };\n      var notifyOffline = function () {\n        return observer.next({\n          online: false\n        });\n      };\n      globalObj.addEventListener('online', notifyOnline);\n      globalObj.addEventListener('offline', notifyOffline);\n      ReachabilityNavigator._observers.push(observer);\n      return function () {\n        globalObj.removeEventListener('online', notifyOnline);\n        globalObj.removeEventListener('offline', notifyOffline);\n        ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function (_observer) {\n          return _observer !== observer;\n        });\n      };\n    });\n  };\n  // expose observers to simulate offline mode for integration testing\n  ReachabilityNavigator._observerOverride = function (status) {\n    var e_1, _a;\n    var _loop_1 = function (observer) {\n      if (observer.closed) {\n        ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function (_observer) {\n          return _observer !== observer;\n        });\n        return \"continue\";\n      }\n      observer.next(status);\n    };\n    try {\n      for (var _b = __values(ReachabilityNavigator._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var observer = _c.value;\n        _loop_1(observer);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  ReachabilityNavigator._observers = [];\n  return ReachabilityNavigator;\n}();\nexport default ReachabilityNavigator;","map":{"version":3,"mappings":";AAAA,SAASA,aAAa,EAAEC,WAAW,QAAQ,mBAAmB;AAC9D,OAAOC,UAA6B,MAAM,mBAAmB;AAM7D;EAAA,kCA8CA;EAzCCC,8CAAc,GAAd,UAAeC,OAAa;IAC3B,IAAIJ,aAAa,EAAE,CAACK,MAAM,EAAE;MAC3B,OAAOH,UAAU,CAACI,IAAI,CAAC,CAAC;QAAEC,MAAM,EAAE;MAAI,CAAE,CAAC,CAAC;;IAG3C,IAAMC,SAAS,GAAGP,WAAW,EAAE,GAAGQ,IAAI,GAAGC,MAAM;IAE/C,OAAO,IAAIR,UAAU,CAAC,kBAAQ;MAC7BS,QAAQ,CAACC,IAAI,CAAC;QAAEL,MAAM,EAAEC,SAAS,CAACK,SAAS,CAACC;MAAM,CAAE,CAAC;MAErD,IAAMC,YAAY,GAAG;QAAM,eAAQ,CAACH,IAAI,CAAC;UAAEL,MAAM,EAAE;QAAI,CAAE,CAAC;MAA/B,CAA+B;MAC1D,IAAMS,aAAa,GAAG;QAAM,eAAQ,CAACJ,IAAI,CAAC;UAAEL,MAAM,EAAE;QAAK,CAAE,CAAC;MAAhC,CAAgC;MAE5DC,SAAS,CAACS,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;MAClDP,SAAS,CAACS,gBAAgB,CAAC,SAAS,EAAED,aAAa,CAAC;MAEpDb,qBAAqB,CAACe,UAAU,CAACC,IAAI,CAACR,QAAQ,CAAC;MAE/C,OAAO;QACNH,SAAS,CAACY,mBAAmB,CAAC,QAAQ,EAAEL,YAAY,CAAC;QACrDP,SAAS,CAACY,mBAAmB,CAAC,SAAS,EAAEJ,aAAa,CAAC;QAEvDb,qBAAqB,CAACe,UAAU,GAAGf,qBAAqB,CAACe,UAAU,CAACG,MAAM,CACzE,mBAAS;UAAI,gBAAS,KAAKV,QAAQ;QAAtB,CAAsB,CACnC;MACF,CAAC;IACF,CAAC,CAAC;EACH,CAAC;EAED;EACeR,uCAAiB,GAAhC,UAAiCmB,MAAqB;;4BAC1CX,QAAQ;MAClB,IAAIA,QAAQ,CAACY,MAAM,EAAE;QACpBpB,qBAAqB,CAACe,UAAU,GAAGf,qBAAqB,CAACe,UAAU,CAACG,MAAM,CACzE,mBAAS;UAAI,gBAAS,KAAKV,QAAQ;QAAtB,CAAsB,CACnC;;;MAGFA,QAAQ,CAACC,IAAI,CAACU,MAAM,CAAC;;;MAPtB,KAAuB,uCAAqB,CAACJ,UAAU;QAAlD,IAAMP,QAAQ;gBAARA,QAAQ;;;;;;;;;;;;;EASpB,CAAC;EA5CcR,gCAAU,GAErB,EAAE;EA2CP,4BAAC;CAAA,EA9CD;eAAqBA,qBAAqB","names":["browserOrNode","isWebWorker","Observable","ReachabilityNavigator","netInfo","isNode","from","online","globalObj","self","window","observer","next","navigator","onLine","notifyOnline","notifyOffline","addEventListener","_observers","push","removeEventListener","filter","status","closed"],"sources":["/frontend-react-js/node_modules/@aws-amplify/core/src/Util/Reachability.ts"],"sourcesContent":["import { browserOrNode, isWebWorker } from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\n\ntype NetworkStatus = {\n\tonline: boolean;\n};\n\nexport default class ReachabilityNavigator implements Reachability {\n\tprivate static _observers: Array<\n\t\tZenObservable.SubscriptionObserver<NetworkStatus>\n\t> = [];\n\n\tnetworkMonitor(netInfo?: any): Observable<NetworkStatus> {\n\t\tif (browserOrNode().isNode) {\n\t\t\treturn Observable.from([{ online: true }]);\n\t\t}\n\n\t\tconst globalObj = isWebWorker() ? self : window;\n\n\t\treturn new Observable(observer => {\n\t\t\tobserver.next({ online: globalObj.navigator.onLine });\n\n\t\t\tconst notifyOnline = () => observer.next({ online: true });\n\t\t\tconst notifyOffline = () => observer.next({ online: false });\n\n\t\t\tglobalObj.addEventListener('online', notifyOnline);\n\t\t\tglobalObj.addEventListener('offline', notifyOffline);\n\n\t\t\tReachabilityNavigator._observers.push(observer);\n\n\t\t\treturn () => {\n\t\t\t\tglobalObj.removeEventListener('online', notifyOnline);\n\t\t\t\tglobalObj.removeEventListener('offline', notifyOffline);\n\n\t\t\t\tReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(\n\t\t\t\t\t_observer => _observer !== observer\n\t\t\t\t);\n\t\t\t};\n\t\t});\n\t}\n\n\t// expose observers to simulate offline mode for integration testing\n\tprivate static _observerOverride(status: NetworkStatus): void {\n\t\tfor (const observer of ReachabilityNavigator._observers) {\n\t\t\tif (observer.closed) {\n\t\t\t\tReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(\n\t\t\t\t\t_observer => _observer !== observer\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tobserver.next(status);\n\t\t}\n\t}\n}\n\ninterface Reachability {\n\tnetworkMonitor(netInfo?: any): Observable<NetworkStatus>;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}