{"ast":null,"code":"var STORE_NAME = \"IdentityIds\";\nvar IndexedDbStorage = /** @class */function () {\n  function IndexedDbStorage(dbName) {\n    if (dbName === void 0) {\n      dbName = \"aws:cognito-identity-ids\";\n    }\n    this.dbName = dbName;\n  }\n  IndexedDbStorage.prototype.getItem = function (key) {\n    return this.withObjectStore(\"readonly\", function (store) {\n      var req = store.get(key);\n      return new Promise(function (resolve) {\n        req.onerror = function () {\n          return resolve(null);\n        };\n        req.onsuccess = function () {\n          return resolve(req.result ? req.result.value : null);\n        };\n      });\n    }).catch(function () {\n      return null;\n    });\n  };\n  IndexedDbStorage.prototype.removeItem = function (key) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.delete(key);\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n  IndexedDbStorage.prototype.setItem = function (id, value) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.put({\n        id: id,\n        value: value\n      });\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n  IndexedDbStorage.prototype.getDb = function () {\n    var openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise(function (resolve, reject) {\n      openDbRequest.onsuccess = function () {\n        resolve(openDbRequest.result);\n      };\n      openDbRequest.onerror = function () {\n        reject(openDbRequest.error);\n      };\n      openDbRequest.onblocked = function () {\n        reject(new Error(\"Unable to access DB\"));\n      };\n      openDbRequest.onupgradeneeded = function () {\n        var db = openDbRequest.result;\n        db.onerror = function () {\n          reject(new Error(\"Failed to create object store\"));\n        };\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  };\n  IndexedDbStorage.prototype.withObjectStore = function (mode, action) {\n    return this.getDb().then(function (db) {\n      var tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = function () {\n        return db.close();\n      };\n      return new Promise(function (resolve, reject) {\n        tx.onerror = function () {\n          return reject(tx.error);\n        };\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(function (err) {\n        db.close();\n        throw err;\n      });\n    });\n  };\n  return IndexedDbStorage;\n}();\nexport { IndexedDbStorage };","map":{"version":3,"mappings":"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","names":["STORE_NAME","dbName","IndexedDbStorage","key","withObjectStore","store","req","get","Promise","resolve","onerror","onsuccess","result","value","catch","delete","reject","error","id","put","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","getDb","then","tx","transaction","oncomplete","close","objectStore","err"],"sources":["/frontend-react-js/node_modules/@aws-sdk/credential-provider-cognito-identity/src/IndexedDbStorage.ts"],"sourcesContent":["import { Storage } from \"./Storage\";\n\nconst STORE_NAME = \"IdentityIds\";\n\nexport class IndexedDbStorage implements Storage {\n  constructor(private readonly dbName: string = \"aws:cognito-identity-ids\") {}\n\n  getItem(key: string): Promise<string | null> {\n    return this.withObjectStore(\"readonly\", (store) => {\n      const req = store.get(key);\n\n      return new Promise<string | null>((resolve) => {\n        req.onerror = () => resolve(null);\n\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n\n  removeItem(key: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.delete(key);\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  setItem(id: string, value: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.put({ id, value });\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  private getDb(): Promise<IDBDatabase> {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n      };\n    });\n  }\n\n  private withObjectStore<R>(mode: IDBTransactionMode, action: (store: IDBObjectStore) => Promise<R>): Promise<R> {\n    return this.getDb().then((db) => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n\n      return new Promise<R>((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch((err) => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}